---
title: "[프로그래머스/Swift] 카드뭉치"
excerpt: "[프로그래머스/Swift] 카드뭉치"
categories: Algorithm
tags: [Algorithm, coding test, 카드뭉치]

toc: true           #On this page 보이기 
toc_sticky: true    #on this page 스크롤에 따라 움직이도록 
comments: true      #댓글
---
# 문제 설명 
- 코니는 영어 단어가 적힌 카드 뭉치 두 개를 선물로 받았습니다. 코니는 다음과 같은 규칙으로 카드에 적힌 단어들을 사용해 원하는 순서의 단어 배열을 만들 수 있는지 알고 싶습니다.
    - 원하는 카드 뭉치에서 카드를 순서대로 한 장씩 사용합니다.
    - 한 번 사용한 카드는 다시 사용할 수 없습니다.
    - 카드를 사용하지 않고 다음 카드로 넘어갈 수 없습니다.
    - 기존에 주어진 카드 뭉치의 단어 순서는 바꿀 수 없습니다.
- 예를 들어 첫 번째 카드 뭉치에 순서대로 ["i", "drink", "water"], 두 번째 카드 뭉치에 순서대로 ["want", "to"]가 적혀있을 때 ["i", "want", "to", "drink", "water"] 순서의 단어 배열을 만들려고 한다면 첫 번째 카드 뭉치에서 "i"를 사용한 후 두 번째 카드 뭉치에서 "want"와 "to"를 사용하고 첫 번째 카드뭉치에 "drink"와 "water"를 차례대로 사용하면 원하는 순서의 단어 배열을 만들 수 있습니다.
- 문자열로 이루어진 배열 cards1, cards2와 원하는 단어 배열 goal이 매개변수로 주어질 때, cards1과 cards2에 적힌 단어들로 goal를 만들 있다면 "Yes"를, 만들 수 없다면 "No"를 return하는 solution 함수를 완성해주세요.

- [문제 풀기](https://school.programmers.co.kr/learn/courses/30/lessons/159994){:target="_blank"} 

# 제한사항
- 1 ≤ cards1의 길이, cards2의 길이 ≤ 10
    - 1 ≤ cards1[i]의 길이, cards2[i]의 길이 ≤ 10
    - cards1과 cards2에는 서로 다른 단어만 존재합니다.
- 2 ≤ goal의 길이 ≤ cards1의 길이 + cards2의 길이
    - 1 ≤ goal[i]의 길이 ≤ 10
    - goal의 원소는 cards1과 cards2의 원소들로만 이루어져 있습니다.
- cards1, cards2, goal의 문자열들은 모두 알파벳 소문자로만 이루어져 있습니다.

# 입출력 예

|cards1|cards2|goal|result|
|---|---|---|---|
|["i", "drink", "water"]|["want", "to"]|["i", "want", "to", "drink", "water"]|"Yes"|
|["i", "water", "drink"]|["want", "to"]|["i", "want", "to", "drink", "water"]|"No"|

# 나의 풀이 
```swift 
import Foundation

func solution(_ cards1:[String], _ cards2:[String], _ goal:[String]) -> String {
    var cd1 = cards1
    var cd2 = cards2
    var removeCnt: Int = 0
    
    for i in goal {
        if cd1.count != 0 && i == cd1[0] {
            cd1.remove(at: 0)
            removeCnt += 1
        } else if cd2.count != 0 && i == cd2[0] {
            cd2.remove(at: 0)
            removeCnt += 1
        }
    }
    
    if goal.count == removeCnt {
        return "Yes"
    } else {
        return "No"
    }
}
``` 

# 다른 사람 풀이 
```swift 
import Foundation

func solution(_ cards1:[String], _ cards2:[String], _ goal:[String]) -> String {
    var reverseCards1 = Array(cards1.reversed())
    var reverseCards2 = Array(cards2.reversed())

    for g in goal {
        if !reverseCards1.isEmpty && reverseCards1.last == g {
            reverseCards1.removeLast()
            continue
        }
        if !reverseCards2.isEmpty && reverseCards2.last == g {
            reverseCards2.removeLast()
            continue
        }
        return "No"
    }
    return "Yes"
}
``` 

# 나의 풀이방법 
- goal을 하나씩 불러와서 card의 첫번째 값과 같으면 remove 시키고 삭제 횟수를 증가, 삭제 횟수가 goal 수가 일치하면 Yes, 아니면 No ! 

# 다른사람 풀이 
- 이번에는 다른 사람 풀이도 비슷 