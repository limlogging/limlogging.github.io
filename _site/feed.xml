<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-04-30T01:08:53+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">limlogging Devlog</title><author><name>HyeongSub Lim</name></author><entry><title type="html">[내배캠] iOS 앱 개발 숙련 팀 프로젝트 - 영화 앱 만들기 / KPT 회고</title><link href="http://localhost:4000/sparta/mega6boxKPT/" rel="alternate" type="text/html" title="[내배캠] iOS 앱 개발 숙련 팀 프로젝트 - 영화 앱 만들기 / KPT 회고" /><published>2024-04-29T00:00:00+09:00</published><updated>2024-04-29T00:00:00+09:00</updated><id>http://localhost:4000/sparta/mega6boxKPT</id><content type="html" xml:base="http://localhost:4000/sparta/mega6boxKPT/"><![CDATA[<h1 id="앱-개발-숙련-팀-프로젝트-kpt-회고">앱 개발 숙련 팀 프로젝트 KPT 회고</h1>
<p>앱 개발 숙련 팀 프로젝트 발표가 끝났습니다. <br />
팀원들과 프로젝트를 통해 느낀 “Keep (계속할 것)”, “Problem (문제)”, “Try (시도할 것)”의 세 가지 요소를 토대로 프로젝트의 경험을 돌아보고 이야기를 나누었습니다.</p>

<h2 id="keep">Keep</h2>
<ul>
  <li>팀원끼리 모르는것 물어보기</li>
  <li>서로 도우면서 작업하기</li>
  <li>피그마, 캔버스 등을 사용한 협업하기</li>
</ul>

<h2 id="problem">Problem</h2>
<ul>
  <li>커밋메시지 정리
    <ul>
      <li>문제점 : 시간이 갈수록 규칙에 벗어난 커밋메시지 작성</li>
      <li>해결방안 : 바쁘더라도 규칙을 지키기</li>
    </ul>
  </li>
  <li>너무 많은 양의 StoryBoard
    <ul>
      <li>문제점 : 코드베이스가 익숙치 않아 스토리보드 사용</li>
      <li>해결방안 : 코드로 많은 연습과 공부가 필요</li>
    </ul>
  </li>
  <li>TMDB API의 일부 이미지 및 동영상을 활용하지 못한 것</li>
</ul>

<h2 id="try">Try</h2>
<ul>
  <li>코드 컨벤션 만들기</li>
  <li>싱글톤 패턴 장단점 및 사용 이유 체크</li>
  <li>코드베이스로 UI 적용하기</li>
  <li>역할 및 진행 과정 세분화 해서 정리</li>
  <li>깃허브 공부하기</li>
</ul>

<h1 id="마무리">마무리</h1>
<ul>
  <li>지난번 프로젝트보다 기획 단계에서 디자인 협업툴을 사용하여 충분한 이야기를 나누고 프로젝트를 시작했습니다.</li>
  <li>깃허브 충돌로 인해 clone과 강제 push등을 사용하여 아쉬운점이 많습니다.</li>
  <li>노션을 적극적으로 활용하여 현재까지 진행상황과 단기적인 목표를 잡고 소통이 더 필요할 것 같습니다.</li>
</ul>

<p>이번 프로젝트를 돌아보고 다음 프로젝트에서 발전된 방향으로 프로젝트를 진행하도록 하겠습니다.</p>]]></content><author><name>HyeongSub Lim</name></author><category term="sparta" /><category term="KPT 회고" /><summary type="html"><![CDATA[iOS 앱 개발 숙련 팀 프로젝트 이후 KPT 회고 작성하기]]></summary></entry><entry><title type="html">[내배캠] iOS 앱 개발 숙련 팀 프로젝트 - 영화 예약 앱 만들기 4 끝</title><link href="http://localhost:4000/sparta/mega6box4/" rel="alternate" type="text/html" title="[내배캠] iOS 앱 개발 숙련 팀 프로젝트 - 영화 예약 앱 만들기 4 끝" /><published>2024-04-29T00:00:00+09:00</published><updated>2024-04-29T00:00:00+09:00</updated><id>http://localhost:4000/sparta/mega6box4</id><content type="html" xml:base="http://localhost:4000/sparta/mega6box4/"><![CDATA[<h1 id="영화-예약-앱-만들기-4">영화 예약 앱 만들기 4</h1>
<ul>
  <li>지난 이야기
    <ul>
      <li><a href="https://limlogging.github.io/sparta/mega6box1/" target="_blank">영화 예약 앱 만들기 1</a></li>
      <li><a href="https://limlogging.github.io/sparta/mega6box2/" target="_blank">영화 예약 앱 만들기 2</a></li>
      <li><a href="https://limlogging.github.io/sparta/mega6box3/" target="_blank">영화 예약 앱 만들기 3</a></li>
    </ul>
  </li>
</ul>

<h1 id="목금토일-이야기">목,금,토,일 이야기</h1>
<ul>
  <li>목요일
    <ul>
      <li>화요일에 네트워크 작업을 할 네트워크 컨트롤러 파일을 만들고 싱글톤 패턴으로 구현하였다. 각자 맡은 부분을 개발하면서 소스코드를 합치지 않은 상태였고 다들 새벽까지 열심히 하길래 문제 없이 진행되는 줄 알았다.</li>
      <li>하지만 네트워크 컨트롤러 파일 내용을 다른 팀원들이 이해하지 못해서 API를 사용하여 데이터 불러오는 작업이 목요일까지 아무도 하지 못했던 것이다 ㅠ ㅠ (작성된 코드 설명이 필요하다고 하셔서 그때 알게되었다.)</li>
      <li>그래서 포스트맨을 사용하여 JSON 데이터를 확인하고 구조체를 생성, 컴플리션 핸들러 동기/비동기에 관련된 내용을 한시간 가량 팀원들에게 설명을하게 되면서 나도 다시 공부할 수 있었다.</li>
      <li>수정한 내용을 깃허브에 올리고 난 후 팀원들에게 공유했는데 2~3시간 후 팀 회의를 통해 어떤 문제(구조체옵셔널) 때문에 로직이 동작을 안했다고 이야기를 하는데 그 내용이 아까 내가 화면을 공유하면서 다 수정한 내용이었고 깃허브에도 올려놓은 내용이었다. (파일이 누락되어 다시 올려놨다고해서 2번 전달)</li>
      <li>아까 다 알려준 내용 깃허브에도 올려놨는데 확인안했냐고 했더니 확인을 안했다고하더라… 조금 당황하고 섭섭했지만 소통에 문제가 있었던 것 같다.</li>
    </ul>
  </li>
  <li>금요일
    <ul>
      <li>영화 정보를 받아오는 부분을 다른 팀원들이 목요일까지 하지 못해서 내가 맡은 부분에서 디테일한 부분은 나중에 하기로하고 다른팀원들을 도와주기로했다. 영화 검색하는 부분에서 어려운 부분이 있다고해서 화면을 공유하면서 라이브 코딩을 하면서 진행했다. (내가 잘해서가 아니라 팀원들이 어떻게 데이터를 받아오는지 궁금하다고 했고 잘 몰라서 구글검색하면서 팀원들과 같이 작업했다.)</li>
      <li>영화 검색으로 데이터를 가져오고 컬렉션뷰에 데이터가 들어간것까지 확인하고 디테일한 작업은 담당자가 하기로했다.</li>
      <li>각자 브랜치를 만들고 맡은 내용을 관리하다가 merge 작업을 하면서 충돌이 발생하고 pull 받고 진행해도 Push가 안되는 등 깃허브 사용에 문제가 많았다. (나 포함 다들 깃허브 사용에 미숙했다.)</li>
      <li>팀원들 중 깃허브 데스크탑 사용에 익숙하신 분이 있어 주로 merge 작업을 해주셨으나 파일을 수동으로 옮기면서 참조로 추가가되고 깃허브 데스크탑도 원활하지 못했다. 지난번에는 내가 merge 담당으로 깃허브 홈페이지에서 풀 리퀘스트로 작업하고 충돌이 많이 없었으나 이번에는 작업을 지켜보는 입장에서 답답한 부분도 많았다. (지난번 팀원들도 나를 답답하게 생각했을것이다.) 하지만 많이 알아야 주도적으로 작업할 수 있으니 지켜보면서 다른 사람의 방법도 익히는 좋은 시간이었다.</li>
    </ul>
  </li>
  <li>토요일
    <ul>
      <li>우여곡절 끝에 merge는 되었고 디테일한 부분을 작업하느라 오후 2시부터 일요일 새벽까지 작업하였다.</li>
      <li>새벽에도 열심히 작업하는 우리 팀원들 정말 대단… 정말 많이 배웠습니다. 💪🏻💪🏻💪🏻💪🏻💪🏻💪🏻💪🏻💪🏻💪🏻💪🏻💪🏻💪🏻💪🏻
  <img src="../../assets/images/categories/sparta/2024-04-29-mega6box.png" alt="" /></li>
    </ul>
  </li>
  <li>일요일
    <ul>
      <li>캔바에서 발표자료 작성을 다 같이 진행하고 메인브랜치에 적용, 리드미 작성을 진행하였다.</li>
    </ul>
  </li>
</ul>

<h1 id="최종-결과물">최종 결과물</h1>
<p><img src="../../assets/images/categories/sparta/2024-04-29-mega6box1.png" width="200" />
<img src="../../assets/images/categories/sparta/2024-04-29-mega6box2.png" width="200" />
<img src="../../assets/images/categories/sparta/2024-04-29-mega6box3.png" width="200" />
<img src="../../assets/images/categories/sparta/2024-04-29-mega6box4.png" width="200" />
<img src="../../assets/images/categories/sparta/2024-04-29-mega6box5.png" width="200" />
<img src="../../assets/images/categories/sparta/2024-04-29-mega6box6.png" width="200" />
<img src="../../assets/images/categories/sparta/2024-04-29-mega6box7.png" width="200" />
<img src="../../assets/images/categories/sparta/2024-04-29-mega6box8.png" width="200" />
<img src="../../assets/images/categories/sparta/2024-04-29-mega6box9.png" width="200" />
<img src="../../assets/images/categories/sparta/2024-04-29-mega6box10.png" width="200" /></p>

<h1 id="문제점-및-해결">문제점 및 해결</h1>
<p><img src="../../assets/images/categories/sparta/2024-04-29-mega6box11.png" alt="" /></p>

<h1 id="느낀점">느낀점</h1>
<p><img src="../../assets/images/categories/sparta/2024-04-29-mega6box12.png" alt="" /></p>

<h1 id="마무리">마무리</h1>
<ul>
  <li>3주 가까이 캠켜놓고 공부했더니 오랜시간 함께한듯한 우리 팀원들, 성향도 비슷해 큰 문제없이 마무리 잘 할 수 있었던 것 같다.</li>
  <li>팀원들을 통해서 많이 배울 수 있었다. 🔥🔥🔥🔥🔥🔥</li>
</ul>]]></content><author><name>HyeongSub Lim</name></author><category term="sparta" /><category term="sparta" /><category term="앱 개발 숙련" /><category term="movie app" /><category term="ios" /><category term="uikit" /><category term="swift" /><category term="영화 앱" /><summary type="html"><![CDATA[iOS 앱 개발 숙련 팀 프로젝트 - 영화 예약 앱 만들기 4 끝]]></summary></entry><entry><title type="html">[내배캠] iOS 앱 개발 숙련 팀 프로젝트 - 영화 예약 앱 만들기 3</title><link href="http://localhost:4000/sparta/mega6box3/" rel="alternate" type="text/html" title="[내배캠] iOS 앱 개발 숙련 팀 프로젝트 - 영화 예약 앱 만들기 3" /><published>2024-04-24T00:00:00+09:00</published><updated>2024-04-24T00:00:00+09:00</updated><id>http://localhost:4000/sparta/mega6box3</id><content type="html" xml:base="http://localhost:4000/sparta/mega6box3/"><![CDATA[<h1 id="영화-예약-앱-만들기-3">영화 예약 앱 만들기 3</h1>
<ul>
  <li>지난 이야기
    <ul>
      <li><a href="https://limlogging.github.io/sparta/mega6box1/" target="_blank">영화 예약 앱 만들기 1</a></li>
      <li><a href="https://limlogging.github.io/sparta/mega6box2/" target="_blank">영화 예약 앱 만들기 2</a></li>
    </ul>
  </li>
</ul>

<h1 id="역할-배분">역할 배분</h1>
<ul>
  <li>태담: 런치스크린, 회원가입/로그인</li>
  <li>유진: 메인페이지, 마이페이지, 내 정보 관리</li>
  <li>민희: 예매, 검색</li>
  <li>형섭: 영화 세부정보, 감독/등장인물</li>
</ul>

<h1 id="영화-상세-페이지-구현-상황">영화 상세 페이지 구현 상황</h1>
<ul>
  <li>현재까지 구현한 내용입니다.</li>
  <li>오토레이아웃을 잡아야하는데 하나라도 어긋나는 경우 배우 슬라이드 이미지가 사라져서 신경써서 수정이 필요합니다. ㅠ</li>
  <li>배우 얼굴을 선택하면 필모그래피페이지로 넘어갑니다. 
<img src="../../assets/images/categories/sparta/2024-04-24-mega6box9.png" alt="영화 상세 페이지" /></li>
</ul>

<h1 id="배우-필모그래피-페이지-구현-상황">배우 필모그래피 페이지 구현 상황</h1>
<ul>
  <li>여기 페이지는 코드로만 작성했다. 상세페이지보다는 그나마 수월하게 구현완료 
<img src="../../assets/images/categories/sparta/2024-04-24-mega6box10.png" alt="배우 필모그래피 페이지" /></li>
</ul>

<h1 id="내일-할-일">내일 할 일</h1>
<ul>
  <li>오토레이아웃 수정 및 디테일 수정</li>
</ul>]]></content><author><name>HyeongSub Lim</name></author><category term="sparta" /><category term="sparta" /><category term="앱 개발 숙련" /><category term="movie app" /><category term="ios" /><category term="uikit" /><category term="swift" /><category term="영화 앱" /><summary type="html"><![CDATA[iOS 앱 개발 숙련 팀 프로젝트 - 영화 예약 앱 만들기 3]]></summary></entry><entry><title type="html">[내배캠] iOS 앱 개발 숙련 팀 프로젝트 - 영화 예약 앱 만들기 2</title><link href="http://localhost:4000/sparta/mega6box2/" rel="alternate" type="text/html" title="[내배캠] iOS 앱 개발 숙련 팀 프로젝트 - 영화 예약 앱 만들기 2" /><published>2024-04-23T00:00:00+09:00</published><updated>2024-04-23T00:00:00+09:00</updated><id>http://localhost:4000/sparta/mega6box2</id><content type="html" xml:base="http://localhost:4000/sparta/mega6box2/"><![CDATA[<h1 id="영화-예약-앱-만들기-2">영화 예약 앱 만들기 2</h1>
<ul>
  <li>지난 이야기
    <ul>
      <li><a href="https://limlogging.github.io/sparta/mega6box1/" target="_blank">영화 예약 앱 만들기 1</a></li>
    </ul>
  </li>
</ul>

<h1 id="역할-배분">역할 배분</h1>
<ul>
  <li>태담: 런치스크린, 회원가입/로그인</li>
  <li>유진: 메인페이지, 마이페이지, 내 정보 관리</li>
  <li>민희: 예매, 검색</li>
  <li>형섭: 영화 세부정보, 감독/등장인물</li>
</ul>

<h1 id="영화-상세-페이지-구현-상황">영화 상세 페이지 구현 상황</h1>
<ul>
  <li>현재까지 구현한 내용입니다.</li>
  <li>영화 ID를 가지고 영화 상세 페이지, 출연 배우 2가지 API를 사용해서 조합하여 만들었습니다.</li>
  <li>등장인물은 사진의 데이터가 nil이면 보이지 않게 하였고 좌우로 스크롤하여 등장인물을 확인할 수 있습니다.</li>
  <li>생각보다 페이지 1개를 구현하는데 너무 오래 걸려서 내용을 먼저 구현하고 디테일은 나중에 신경써야겠습니다.</li>
  <li>파묘데이터를 가져왔습니다! 
<img src="../../assets/images/categories/sparta/2024-04-23-mega6box8.png" alt="영화상세페이지" /></li>
</ul>

<h1 id="내일-할-일">내일 할 일</h1>
<ul>
  <li>배우 필모그래피 관련페이지 구현하기 !</li>
</ul>]]></content><author><name>HyeongSub Lim</name></author><category term="sparta" /><category term="sparta" /><category term="앱 개발 숙련" /><category term="movie app" /><category term="ios" /><category term="uikit" /><category term="swift" /><category term="영화 앱" /><summary type="html"><![CDATA[iOS 앱 개발 숙련 팀 프로젝트 - 영화 예약 앱 만들기 2]]></summary></entry><entry><title type="html">[TIL] 내배캠 iOS앱 개발 공부 39일차 - 2024.04.22(월)</title><link href="http://localhost:4000/TIL/til39/" rel="alternate" type="text/html" title="[TIL] 내배캠 iOS앱 개발 공부 39일차 - 2024.04.22(월)" /><published>2024-04-22T00:00:00+09:00</published><updated>2024-04-22T00:00:00+09:00</updated><id>http://localhost:4000/TIL/til39</id><content type="html" xml:base="http://localhost:4000/TIL/til39/"><![CDATA[<h1 id="팀-프로젝트">팀 프로젝트</h1>
<ul>
  <li>이번 팀 프로젝트는 킥보드 앱, 영화 앱 중 원하는 앱을 선택하여 구현하는 프로젝트입니다.</li>
  <li>프로젝트 주제 선정, 앱 이름 선정, 역할 분담, API 찾기, 와이어프레임그리기 등으로 하루를 썼습니다.</li>
  <li><a href="https://limlogging.github.io/sparta/mega6box1/" target="_blank">영화 예약 앱 만들기 1</a></li>
</ul>]]></content><author><name>HyeongSub Lim</name></author><category term="TIL" /><category term="TIL" /><summary type="html"><![CDATA[내배캠 iOS앱 개발 공부 39일차 이야기 - 2024.04.22(월)]]></summary></entry><entry><title type="html">[내배캠] iOS 앱 개발 숙련 팀 프로젝트 - 영화 예약 앱 만들기 1</title><link href="http://localhost:4000/sparta/mega6box1/" rel="alternate" type="text/html" title="[내배캠] iOS 앱 개발 숙련 팀 프로젝트 - 영화 예약 앱 만들기 1" /><published>2024-04-22T00:00:00+09:00</published><updated>2024-04-22T00:00:00+09:00</updated><id>http://localhost:4000/sparta/mega6box1</id><content type="html" xml:base="http://localhost:4000/sparta/mega6box1/"><![CDATA[<h1 id="영화-예약-앱-만들기">영화 예약 앱 만들기</h1>
<ul>
  <li>개인 프로젝트인 위시리스트 앱 만들기가 끝나고 팀프로젝트 발제가 있었습니다.</li>
  <li>프로젝트 주제는 킥보드 앱 만들기 또는 영화예약 앱 만들기 중 선택할 수 있었고 팀원들의 의견을 모아 영화 예약 앱을 만들기로 하였습니다.</li>
</ul>

<h1 id="필수-구현-기능">필수 구현 기능</h1>
<ul>
  <li>로그인 화면/회원가입 화면
    <ul>
      <li>앱에 진입했을 때 로그인을 먼저 진행합니다.</li>
      <li>회원가입 버튼을 누르면 아이디와 비밀번호를 입력받아 회원가입을 하고, 완료되면 다시 로그인 화면으로 이동합니다(아이디와 비밀번호 이외에 다른 정보들을 받아도 됩니다).</li>
      <li>로그인이 완료되면 UserDefault에 아이디와 비밀번호를 저장해서 이후 로그인할 때 아이디와 비밀번호가 자동으로 입력되어 있도록 합니다.</li>
      <li>로그인이 완료되면 상단 TapBar가 있는 화면으로 이동하면 됩니다.</li>
      <li>필수 기능 요소
        <ul>
          <li><code class="language-plaintext highlighter-rouge">UserDefaults</code>를 활용하여 아이디와 비밀번호, 기타 정보를 저장해주세요.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>영화 목록 페이지
    <ul>
      <li>상단 <strong>TapBar의 첫번째 화면</strong>입니다.</li>
      <li>영화 이미지들은 좌우 스크롤 가능하도록 구현해주세요</li>
      <li>필수 기능 요소
        <ul>
          <li><code class="language-plaintext highlighter-rouge">UICollectionView</code>를 활용하여 영화 포스터를 표시해주세요.</li>
          <li>사용자가 직접 상호 작용할 수 있는 다양한 기능을 제공해보세요.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>영화 세부 페이지
    <ul>
      <li>영화를 클릭시 영화의 세부 페이지로 이동해주세요</li>
      <li>영화의 정보를 함께 페이지에 보여주세요</li>
    </ul>
  </li>
  <li>영화 예매 입력 페이지
    <ul>
      <li>영화 세부 페이지에서 입력하기 버튼 클릭시 해당 페이지로 이동해주세요</li>
      <li>예매를 위해 입력해야 할 것들을 입력 가능하도록 구성해주세요</li>
      <li>결제하기 버튼을 누르면 결제 내역이 마이페이지에서 보이도록 해주세요</li>
    </ul>
  </li>
  <li>영화 검색 페이지
    <ul>
      <li>상단 <strong>TapBar의 두번째 화면</strong>입니다.</li>
      <li>검색창에 텍스트를 입력하고 검색 버튼 클릭시 해당 텍스트가 포함된 영화들을 보여주세요</li>
      <li><code class="language-plaintext highlighter-rouge">UICollectionView</code>를 활용하여 영화 포스터를 표시해주세요.</li>
    </ul>
  </li>
  <li>마이 페이지
    <ul>
      <li>상단 <strong>TapBar의 세번째 화면</strong>입니다.</li>
      <li>사용자의 정보와 관련된 기능을 모아서 제공하는 페이지를 자유롭게 만들어보세요.</li>
      <li>나의 필요한 계정 정보들을 표시해주세요(회원가입시 받은 정보들 활용)</li>
      <li>예매한 영화 내역을 볼 수 있도록 해주세요</li>
    </ul>
  </li>
</ul>

<h1 id="sa-starting-assignments-작성하기">S.A (Starting Assignments) 작성하기</h1>
<ul>
  <li>영화예매 및 영화정보 등장인물 필모그래피가 들어간 앱</li>
  <li>프로젝트 제목
    <ul>
      <li>메가 6 박스 = 메가박스와 6조의 합작품</li>
    </ul>
  </li>
  <li>프로젝트 설명
    <ul>
      <li>API를 사용한 영화 예매 앱 구현</li>
      <li>API를 사용하여 영화 정보 받아오기</li>
      <li>API를 사용하여 배우 정보 받아오기</li>
      <li>코어데이터를 활용한 회원정보 및 영화 예매 정보 확인 구현</li>
      <li>영화 정보를 활용한 영화 예매 기능 구현</li>
      <li>싱글톤 패턴, 델리게이트 등을 사용한 구현</li>
    </ul>
  </li>
  <li>프로젝트 구현 페이지
    <ul>
      <li>런치스크린</li>
      <li>회원가입/로그인 선택</li>
      <li>로그인</li>
      <li>회원가입</li>
      <li>메인(예매 가능 영화 목록)</li>
      <li>영화 예매</li>
      <li>영화 세부 정보</li>
      <li>감독/등장인물</li>
      <li>영화 검색</li>
      <li>마이 페이지</li>
      <li>내 정보 관리</li>
    </ul>
  </li>
  <li>개발기능정리
    <ul>
      <li>API</li>
      <li>sync / async</li>
      <li>URLSession</li>
      <li>CoreData</li>
      <li>UICollectionView</li>
      <li>UITableView</li>
      <li>Searchbar</li>
      <li>UIRefreshControl</li>
      <li>Navigation Bar</li>
    </ul>
  </li>
</ul>

<h1 id="결과물에-대한목업mockup그려보기">결과물에 대한 목업(MOCKUP) 그려보기</h1>
<ul>
  <li>피그마를 사용해본 경험이 있는 팀장님과 팀원들 덕분에 피그마에서 작업을 해볼 수 있었습니다.</li>
  <li>쉽게 디자인 할 수 있어 프로젝트 규모가 커져버렸습니다.</li>
  <li>와이어 프레임 
<img src="../../assets/images/categories/sparta/2024-04-22-mega6box1.png" alt="피그마1" /></li>
</ul>

<p><img src="../../assets/images/categories/sparta/2024-04-22-mega6box2.png" alt="피그마2" /></p>

<ul>
  <li>색상 입히기 및 화면 연결하기</li>
</ul>

<p><img src="../../assets/images/categories/sparta/2024-04-22-mega6box3.png" alt="피그마3" /></p>

<ul>
  <li>참고 자료</li>
</ul>

<p><img src="../../assets/images/categories/sparta/2024-04-22-mega6box4.png" alt="피그마4" /></p>

<h1 id="영화-정보를-받아오기-위한-api-사용하기">영화 정보를 받아오기 위한 API 사용하기</h1>
<ul>
  <li>영화 정보 API
    <ul>
      <li><a href="https://www.kobis.or.kr/kobisopenapi/homepg/main/main.do" target="_blank">영화진흥위원회 오픈 API</a></li>
      <li><a href="https://www.themoviedb.org/" target="_blank">The Movie Database(TMDB) API</a></li>
      <li><a href="https://www.kmdb.or.kr/info/api/apiList?menuIndex=119" target="_blank">한국영화데이터베이스(KMDB) API</a></li>
    </ul>
  </li>
  <li>영화 정보를 가져올 수 있는 곳을 구글검색하여 3가지로 추려서 TMDB를 사용하기로 결정하였습니다.</li>
</ul>

<h1 id="런치-스크린-이미지-만들기">런치 스크린 이미지 만들기</h1>
<ul>
  <li><a href="https://www.canva.com/" target="_blank">canva</a></li>
  <li>canva에서 런치스크린 이미지를 만들었습니다. 
<img src="../../assets/images/categories/sparta/2024-04-22-mega6box5.png" alt="런치스크린" /></li>
</ul>

<h1 id="tmdb-api-키-발급-받기">TMDB API 키 발급 받기</h1>
<ul>
  <li>회원가입 후 KEY 발급 요청하면 즉시 키를 발급해 줍니다. (사용용도 및 개인정보 입력해야합니다.)</li>
</ul>

<p><img src="../../assets/images/categories/sparta/2024-04-22-mega6box6.png" alt="API Key 발급" /></p>

<h1 id="포스트맨으로-조회해보기">포스트맨으로 조회해보기</h1>
<ul>
  <li>필요할 것 같은 API 4개를 찾았습니다. 필요시 더 추가할 예정입니다.
    <ul>
      <li>지금 상영중인 영화 조회</li>
      <li>영화명으로 영화 조회</li>
      <li>영화배우이름으로 배우 조회</li>
      <li>영화배우 이미지 조회</li>
    </ul>
  </li>
  <li>영화 제목으로 파묘를 입력하여 영화 검색하기 
<img src="../../assets/images/categories/sparta/2024-04-22-mega6box7.png" alt="포스트맨으로 조회하기" /></li>
</ul>

<h1 id="내일-할-일">내일 할 일</h1>
<ul>
  <li>오늘 10시 30분 부터 프로젝트 주제 정하기, 피그마로 디자인 그리기, API 찾아보기, 역할분담으로 시간을 다 써버렸습니다.</li>
  <li>내일은 깃허브에 프로젝트를 올리고 본격적으로 프로젝트를 시작해보겠습니다 ! 🔥🔥🔥</li>
</ul>]]></content><author><name>HyeongSub Lim</name></author><category term="sparta" /><category term="sparta" /><category term="앱 개발 숙련" /><category term="movie app" /><category term="ios" /><category term="uikit" /><category term="swift" /><category term="영화 앱" /><summary type="html"><![CDATA[iOS 앱 개발 숙련 팀 프로젝트 - 영화 예약 앱 만들기 1]]></summary></entry><entry><title type="html">[내배캠] iOS 앱 개발 숙련 개인 과제 - WishList 앱 만들기 3</title><link href="http://localhost:4000/sparta/wishList3/" rel="alternate" type="text/html" title="[내배캠] iOS 앱 개발 숙련 개인 과제 - WishList 앱 만들기 3" /><published>2024-04-21T00:00:00+09:00</published><updated>2024-04-21T00:00:00+09:00</updated><id>http://localhost:4000/sparta/wishList3</id><content type="html" xml:base="http://localhost:4000/sparta/wishList3/"><![CDATA[<h1 id="wishlist-앱-만들기">WishList 앱 만들기</h1>
<ul>
  <li>지난 포스팅
    <ul>
      <li><a href="https://limlogging.github.io/sparta/wishList1/" target="_blank">WishList 앱 만들기 - 1</a></li>
      <li><a href="https://limlogging.github.io/sparta/wishList2/" target="_blank">WishList 앱 만들기 - 2</a></li>
    </ul>
  </li>
</ul>

<p><br /></p>

<h1 id="과제-제출-후-피드백">과제 제출 후 피드백</h1>
<ul>
  <li>과제 제출 이후에 피드백을 받아 수정하였습니다.
    <ol>
      <li>가격이 1000달러가 넘어가면 1,000 이런식으로 표현해주시면 좋을거 같아요.</li>
      <li>Product에서 Codable를 채택하고 있는데 Encode 하는 코드가 없으니 Decodable을 채택하는것도 좋을거 같아요.</li>
      <li>코드를 보았을 때 엄청 잘 작성해주셔서 Lv5까지 도전해보시는것도 좋을거 같아요!</li>
    </ol>
  </li>
</ul>

<h1 id="1-가격이-1000달러가-넘어가면-1000-이런식으로-표현해주시면-좋을거-같아요">1. 가격이 1000달러가 넘어가면 1,000 이런식으로 표현해주시면 좋을거 같아요.</h1>
<ul>
  <li>formatter를 사용해서 자리수 표시를하고 임의로 환율을 정하여 원화도 보여주도록 했습니다.</li>
</ul>

<h2 id="viewcontroller">ViewController</h2>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="nv">formatter</span> <span class="o">=</span> <span class="kt">NumberFormatter</span><span class="p">()</span>
<span class="n">formatter</span><span class="o">.</span><span class="n">numberStyle</span> <span class="o">=</span> <span class="o">.</span><span class="n">decimal</span>
<span class="k">let</span> <span class="nv">dollarPriceText</span> <span class="o">=</span> <span class="s">"$ "</span> <span class="o">+</span> <span class="p">(</span><span class="n">formatter</span><span class="o">.</span><span class="nf">string</span><span class="p">(</span><span class="nv">from</span><span class="p">:</span> <span class="n">product</span><span class="o">.</span><span class="n">price</span> <span class="k">as</span> <span class="kt">NSNumber</span><span class="p">)</span> <span class="p">??</span> <span class="s">""</span><span class="p">)</span>
<span class="k">let</span> <span class="nv">wonPriceText</span> <span class="o">=</span> <span class="s">"￦ "</span> <span class="o">+</span> <span class="p">(</span><span class="n">formatter</span><span class="o">.</span><span class="nf">string</span><span class="p">(</span><span class="nv">from</span><span class="p">:</span> <span class="n">product</span><span class="o">.</span><span class="n">price</span> <span class="o">*</span> <span class="mi">1400</span> <span class="k">as</span> <span class="kt">NSNumber</span><span class="p">)</span> <span class="p">??</span> <span class="s">""</span><span class="p">)</span>

<span class="k">self</span><span class="o">.</span><span class="n">productPriceLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">"</span><span class="se">\(</span><span class="n">dollarPriceText</span><span class="se">)</span><span class="s"> (</span><span class="se">\(</span><span class="n">wonPriceText</span><span class="se">)</span><span class="s">)"</span>
</code></pre></div></div>

<h2 id="wishlistviewcontroller">WishListViewController</h2>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="k">let</span> <span class="nv">productPrice</span> <span class="o">=</span> <span class="kt">Double</span><span class="p">(</span><span class="n">productList</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="p">]</span><span class="o">.</span><span class="n">price</span> <span class="p">??</span> <span class="s">"0.0"</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">formatter</span> <span class="o">=</span> <span class="kt">NumberFormatter</span><span class="p">()</span>
    <span class="n">formatter</span><span class="o">.</span><span class="n">numberStyle</span> <span class="o">=</span> <span class="o">.</span><span class="n">decimal</span>
    <span class="k">let</span> <span class="nv">dollarPriceText</span> <span class="o">=</span> <span class="s">"$ "</span> <span class="o">+</span> <span class="p">(</span><span class="n">formatter</span><span class="o">.</span><span class="nf">string</span><span class="p">(</span><span class="nv">from</span><span class="p">:</span> <span class="n">productPrice</span> <span class="k">as</span> <span class="kt">NSNumber</span><span class="p">)</span> <span class="p">??</span> <span class="s">""</span><span class="p">)</span>
    <span class="k">let</span> <span class="nv">wonPriceText</span> <span class="o">=</span> <span class="s">"￦ "</span> <span class="o">+</span> <span class="p">(</span><span class="n">formatter</span><span class="o">.</span><span class="nf">string</span><span class="p">(</span><span class="nv">from</span><span class="p">:</span> <span class="n">productPrice</span> <span class="o">*</span> <span class="mi">1400</span> <span class="k">as</span> <span class="kt">NSNumber</span><span class="p">)</span> <span class="p">??</span> <span class="s">""</span><span class="p">)</span>
    <span class="n">cell</span><span class="p">?</span><span class="o">.</span><span class="n">productPriceLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">"</span><span class="se">\(</span><span class="n">dollarPriceText</span><span class="se">)</span><span class="s"> (</span><span class="se">\(</span><span class="n">wonPriceText</span><span class="se">)</span><span class="s">)"</span>
<span class="p">}</span>
</code></pre></div></div>

<h1 id="2-product에서-codable를-채택하고-있는데-encode-하는-코드가-없으니-decodable을-채택하는것도-좋을거-같아요">2. Product에서 Codable를 채택하고 있는데 Encode 하는 코드가 없으니 Decodable을 채택하는것도 좋을거 같아요.</h1>
<h2 id="수정-전">수정 전</h2>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">Foundation</span>

<span class="kd">struct</span> <span class="kt">Product</span><span class="p">:</span> <span class="kt">Codable</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">id</span><span class="p">:</span> <span class="kt">Int</span>
    <span class="k">var</span> <span class="nv">title</span><span class="p">:</span> <span class="kt">String</span>
    <span class="k">var</span> <span class="nv">description</span><span class="p">:</span> <span class="kt">String</span>
    <span class="k">var</span> <span class="nv">price</span><span class="p">:</span> <span class="kt">Double</span>
    <span class="k">var</span> <span class="nv">discountPercentage</span><span class="p">:</span> <span class="kt">Double</span>
    <span class="k">var</span> <span class="nv">rating</span><span class="p">:</span> <span class="kt">Double</span>
    <span class="k">var</span> <span class="nv">stock</span><span class="p">:</span> <span class="kt">Int</span>
    <span class="k">var</span> <span class="nv">brand</span><span class="p">:</span> <span class="kt">String</span>
    <span class="k">var</span> <span class="nv">category</span><span class="p">:</span> <span class="kt">String</span>
    <span class="k">var</span> <span class="nv">thumbnail</span><span class="p">:</span> <span class="kt">String</span>
    <span class="k">var</span> <span class="nv">images</span><span class="p">:</span> <span class="p">[</span><span class="kt">String</span><span class="p">]</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="수정-후">수정 후</h2>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">Foundation</span>

<span class="kd">struct</span> <span class="kt">Product</span><span class="p">:</span> <span class="kt">Decodable</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">id</span><span class="p">:</span> <span class="kt">Int</span>
    <span class="k">var</span> <span class="nv">title</span><span class="p">:</span> <span class="kt">String</span>
    <span class="k">var</span> <span class="nv">description</span><span class="p">:</span> <span class="kt">String</span>
    <span class="k">var</span> <span class="nv">price</span><span class="p">:</span> <span class="kt">Double</span>
    <span class="k">var</span> <span class="nv">discountPercentage</span><span class="p">:</span> <span class="kt">Double</span>
    <span class="k">var</span> <span class="nv">rating</span><span class="p">:</span> <span class="kt">Double</span>
    <span class="k">var</span> <span class="nv">stock</span><span class="p">:</span> <span class="kt">Int</span>
    <span class="k">var</span> <span class="nv">brand</span><span class="p">:</span> <span class="kt">String</span>
    <span class="k">var</span> <span class="nv">category</span><span class="p">:</span> <span class="kt">String</span>
    <span class="k">var</span> <span class="nv">thumbnail</span><span class="p">:</span> <span class="kt">String</span>
    <span class="k">var</span> <span class="nv">images</span><span class="p">:</span> <span class="p">[</span><span class="kt">String</span><span class="p">]</span>
<span class="p">}</span>
</code></pre></div></div>

<p><br /></p>

<h1 id="3-코드를-보았을-때-엄청-잘-작성해주셔서-lv5까지-도전해보시는것도-좋을거-같아요">3. 코드를 보았을 때 엄청 잘 작성해주셔서 Lv5까지 도전해보시는것도 좋을거 같아요!</h1>
<ul>
  <li>좋은 말씀을 해 주셔서 5단계까지 도전했습니다.</li>
</ul>

<h2 id="레벨4-위시리스트-보기에서-테이블뷰-스와이프해서-row-삭제하기">레벨4. 위시리스트 보기에서 테이블뷰 스와이프해서 row 삭제하기</h2>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// MARK: - 삭제 기능</span>
<span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">commit</span> <span class="nv">editingStyle</span><span class="p">:</span> <span class="kt">UITableViewCell</span><span class="o">.</span><span class="kt">EditingStyle</span><span class="p">,</span> <span class="n">forRowAt</span> <span class="nv">indexPath</span><span class="p">:</span> <span class="kt">IndexPath</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="n">editingStyle</span> <span class="o">==</span> <span class="o">.</span><span class="n">delete</span> <span class="p">{</span>
        <span class="k">guard</span> <span class="k">let</span> <span class="nv">context</span> <span class="o">=</span> <span class="k">self</span><span class="o">.</span><span class="n">persistentContainer</span><span class="p">?</span><span class="o">.</span><span class="n">viewContext</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
        
        <span class="k">let</span> <span class="nv">request</span> <span class="o">=</span> <span class="kt">MyWishList</span><span class="o">.</span><span class="nf">fetchRequest</span><span class="p">()</span>
        <span class="k">guard</span> <span class="k">let</span> <span class="nv">products</span> <span class="o">=</span> <span class="k">try</span><span class="p">?</span> <span class="n">context</span><span class="o">.</span><span class="nf">fetch</span><span class="p">(</span><span class="n">request</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
        
        <span class="c1">// 선택한 특정 인덱스의 객체를 가져옴</span>
        <span class="k">let</span> <span class="nv">productToDelete</span> <span class="o">=</span> <span class="n">products</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="p">]</span>
        
        <span class="n">context</span><span class="o">.</span><span class="nf">delete</span><span class="p">(</span><span class="n">productToDelete</span><span class="p">)</span>
        
        <span class="c1">// 변경 사항 저장</span>
        <span class="k">try</span><span class="p">?</span> <span class="n">context</span><span class="o">.</span><span class="nf">save</span><span class="p">()</span>
        
        <span class="c1">//CoreData에서 데이터 가져오기</span>
        <span class="nf">getCoreData</span><span class="p">()</span>
        <span class="c1">//테이블뷰리로드</span>
        <span class="n">wishListTableView</span><span class="o">.</span><span class="nf">reloadData</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><br /></p>

<h2 id="레벨5-메인화면에서-화면을-아래로-내리면-새로고침-창이-뜨면서-다른상품으로-변경하기">레벨5. 메인화면에서 화면을 아래로 내리면 새로고침 창이 뜨면서 다른상품으로 변경하기</h2>
<h3 id="이미지-뷰-위에-스크롤-뷰-추가하기">이미지 뷰 위에 스크롤 뷰 추가하기</h3>

<p><img src="../../assets/images/categories/sparta/2024-04-21-wishList6.png" alt="스크롤 뷰 추가" /></p>

<h3 id="uirefreshcontrol-추가하기">UIRefreshControl 추가하기</h3>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// MARK: - 위시리스트 보기</span>
<span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>
    
    <span class="k">self</span><span class="o">.</span><span class="nf">getData</span><span class="p">(</span><span class="nv">completionHandler</span><span class="p">:</span> <span class="p">{</span> <span class="n">product</span> <span class="k">in</span>
        <span class="k">self</span><span class="o">.</span><span class="n">currentProduct</span> <span class="o">=</span> <span class="n">product</span>
    <span class="p">})</span>
    
    <span class="k">self</span><span class="o">.</span><span class="n">productScrollView</span><span class="o">.</span><span class="n">refreshControl</span> <span class="o">=</span> <span class="kt">UIRefreshControl</span><span class="p">()</span>
    <span class="k">self</span><span class="o">.</span><span class="n">productScrollView</span><span class="o">.</span><span class="n">refreshControl</span><span class="p">?</span><span class="o">.</span><span class="nf">addTarget</span><span class="p">(</span><span class="k">self</span><span class="p">,</span> <span class="nv">action</span><span class="p">:</span> <span class="k">#selector</span><span class="p">(</span><span class="n">refresh</span><span class="p">),</span> <span class="nv">for</span><span class="p">:</span> <span class="o">.</span><span class="n">valueChanged</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">//새로고침 추가 </span>
<span class="kd">@objc</span> <span class="kd">func</span> <span class="nf">refresh</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">self</span><span class="o">.</span><span class="n">getData</span> <span class="p">{</span> <span class="n">product</span> <span class="k">in</span>
        <span class="k">self</span><span class="o">.</span><span class="n">currentProduct</span> <span class="o">=</span> <span class="n">product</span>
        <span class="kt">DispatchQueue</span><span class="o">.</span><span class="n">main</span><span class="o">.</span><span class="k">async</span> <span class="p">{</span>
            <span class="k">self</span><span class="o">.</span><span class="n">productScrollView</span><span class="o">.</span><span class="n">refreshControl</span><span class="p">?</span><span class="o">.</span><span class="nf">endRefreshing</span><span class="p">()</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h1 id="마무리">마무리</h1>
<ul>
  <li>시간이 갈수록 잘하는 사람과의 격차가 벌어지는 것 같아 살짝 조급한 마음이 있었지만 신경쓰지 않고 하나씩 하나씩 해봐야겠다.</li>
</ul>]]></content><author><name>HyeongSub Lim</name></author><category term="sparta" /><category term="sparta" /><category term="앱 개발 숙련" /><category term="WishList" /><category term="ios" /><category term="uikit" /><category term="swift" /><summary type="html"><![CDATA[iOS 앱 개발 숙련 개인 과제 - WishList 앱 만들기 3]]></summary></entry><entry><title type="html">[TIL] 내배캠 iOS앱 개발 공부 38일차 - 2024.04.19(금)</title><link href="http://localhost:4000/TIL/til38/" rel="alternate" type="text/html" title="[TIL] 내배캠 iOS앱 개발 공부 38일차 - 2024.04.19(금)" /><published>2024-04-21T00:00:00+09:00</published><updated>2024-04-21T00:00:00+09:00</updated><id>http://localhost:4000/TIL/til38</id><content type="html" xml:base="http://localhost:4000/TIL/til38/"><![CDATA[<h1 id="개인프로젝트">개인프로젝트</h1>
<ul>
  <li>위시리스트 만들기 개인 프로젝트를 진행하면서 네트워크 작업에 대해서 공부할 수 있었습니다.</li>
  <li>초반에는 다들 비슷비슷 했으나 시간이 갈수록 잘하는 사람과의 차이가 벌어지는 것 같아 조금의 조급함이 생겼지만 그래도 하나씩 하나씩 해봐야겠다.</li>
  <li>🔥 파이팅을 잊지 말것 ! 🔥
    <ul>
      <li><a href="https://limlogging.github.io/sparta/wishList1/" target="_blank">위시리스트 앱 만들기 1</a></li>
      <li><a href="https://limlogging.github.io/sparta/wishList2/" target="_blank">위시리스트 앱 만들기 2</a></li>
      <li><a href="https://limlogging.github.io/sparta/wishList3/" target="_blank">위시리스트 앱 만들기 3</a></li>
    </ul>
  </li>
</ul>

<h1 id="챌린지반-과제">챌린지반 과제</h1>
<ul>
  <li>이번 주 네트워크 작업 관련해서 배우기도 전 알라모파이어를 사용 과제를 진행했는데 구글 검색으로 어찌저찌 만들었더니 좋은 방법은 아니라는 것을 알고 다시 수정했다.</li>
  <li>챌린지반 사람들이 너무 잘해서 부지런히 따라가야하는 운명… 🏃🏻🏃🏻🏃🏻🏃🏻
    <ul>
      <li><a href="https://limlogging.github.io/sparta/%EC%B1%8C%EB%A6%B0%EC%A7%80%EB%B0%98%EA%B3%BC%EC%A0%9C1-1/" target="_blank">깃허브 앱 만들기 1</a></li>
      <li><a href="https://limlogging.github.io/sparta/%EC%B1%8C%EB%A6%B0%EC%A7%80%EB%B0%98%EA%B3%BC%EC%A0%9C1-2/" target="_blank">깃허브 앱 만들기 2</a></li>
    </ul>
  </li>
</ul>

<h1 id="다음주-목표">다음주 목표</h1>
<ul>
  <li>월요일부터 다시 팀 프로젝트를 진행하는데 지난번 프로젝트보다 잘 할 수 있을지 설렘반 기대반 …?</li>
</ul>]]></content><author><name>HyeongSub Lim</name></author><category term="TIL" /><category term="TIL" /><summary type="html"><![CDATA[내배캠 iOS앱 개발 공부 38일차 이야기 - 2024.04.19(금)]]></summary></entry><entry><title type="html">[내배캠] 챌린지반 과제 2차 제출 - GitHub App 만들기</title><link href="http://localhost:4000/sparta/%EC%B1%8C%EB%A6%B0%EC%A7%80%EB%B0%98%EA%B3%BC%EC%A0%9C1-2/" rel="alternate" type="text/html" title="[내배캠] 챌린지반 과제 2차 제출 - GitHub App 만들기" /><published>2024-04-21T00:00:00+09:00</published><updated>2024-04-21T00:00:00+09:00</updated><id>http://localhost:4000/sparta/%EC%B1%8C%EB%A6%B0%EC%A7%80%EB%B0%98%EA%B3%BC%EC%A0%9C1-2</id><content type="html" xml:base="http://localhost:4000/sparta/%EC%B1%8C%EB%A6%B0%EC%A7%80%EB%B0%98%EA%B3%BC%EC%A0%9C1-2/"><![CDATA[<h1 id="깃허브-앱-만들기-개선해보기">깃허브 앱 만들기 개선해보기</h1>
<ul>
  <li>이번 주차에 네트워크 작업과 관련해서 배웠습니다. 나중에 보니 구글 검색으로 알라모파이어로 어거지로 불러와서 구현은 됐는데 구조체에 Struct를 사용하지 않고 옛날 방식으로 데이터를 불러왔다는 것을 알았습니다.</li>
  <li>배운 내용을 바탕으로 다시 개선해 보았습니다.</li>
</ul>

<p><br /></p>

<h1 id="1차-제출-보기">1차 제출 보기</h1>
<ul>
  <li><a href="https://limlogging.github.io/sparta/%EC%B1%8C%EB%A6%B0%EC%A7%80%EB%B0%98%EA%B3%BC%EC%A0%9C1-1/" target="_blank">1차 제출 바로가기</a></li>
</ul>

<p><br /></p>

<h1 id="튜터님-피드백">튜터님 피드백</h1>
<ol>
  <li>Model에 있는 struct 2개에 Decodable을 적용해주세요.</li>
  <li>API에서 받아온 데이터를 Decoding 하여 객체로 만들어주세요.</li>
  <li>(responseJSON 대신 responseData 같은거를 사용하시면 됩니다)</li>
  <li>Pull to refresh는 모든 데이터를 다시 받아와서 테이블뷰를 그려주세요.</li>
  <li>페이징처리를 해주세요.</li>
  <li>as! TableViewCell 대신 옵셔널 바인딩을 사용해주세요.</li>
</ol>

<h2 id="1-model에-있는-struct-2개에-decodable을-적용해주세요">1. Model에 있는 struct 2개에 Decodable을 적용해주세요.</h2>
<h3 id="수정-전">수정 전</h3>
<h4 id="githubprofile">GithubProfile</h4>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">Foundation</span>

<span class="c1">// GitHub 프로필 정보를 저장할 구조체</span>
<span class="kd">struct</span> <span class="kt">GithubProfile</span> <span class="p">{</span>
    <span class="c1">//var myImage: UIImage?</span>
    <span class="k">var</span> <span class="nv">myImage</span><span class="p">:</span> <span class="kt">URL</span>        <span class="c1">//프로필 사진</span>
    <span class="k">var</span> <span class="nv">name</span><span class="p">:</span> <span class="kt">String</span>        <span class="c1">//이름</span>
    <span class="k">var</span> <span class="nv">login</span><span class="p">:</span> <span class="kt">String</span>       <span class="c1">//깃허브 ID</span>
    <span class="k">var</span> <span class="nv">followers</span><span class="p">:</span> <span class="kt">Int</span>      <span class="c1">//팔로워</span>
    <span class="k">var</span> <span class="nv">following</span><span class="p">:</span> <span class="kt">Int</span>      <span class="c1">//팔로잉</span>
    <span class="k">var</span> <span class="nv">repoCnt</span><span class="p">:</span> <span class="kt">Int</span>        <span class="c1">//리포지토리 개수 </span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="githubrepositories">GithubRepositories</h4>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">Foundation</span>

<span class="c1">// 리포지토리 정보를 저장할 구조체</span>
<span class="kd">struct</span> <span class="kt">GithubRepositories</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">name</span><span class="p">:</span> <span class="kt">String</span>            <span class="c1">//리포지토리 이름</span>
    <span class="k">var</span> <span class="nv">htmlUrl</span><span class="p">:</span> <span class="kt">String</span>         <span class="c1">//리포지토리 주소</span>
    <span class="k">var</span> <span class="nv">description</span><span class="p">:</span> <span class="kt">String</span>     <span class="c1">//리포지토리 설명</span>
    <span class="k">var</span> <span class="nv">language</span><span class="p">:</span> <span class="kt">String</span>        <span class="c1">//언어 </span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="수정-후">수정 후</h3>
<ul>
  <li>Decodable을 추가하였습니다.</li>
</ul>

<h4 id="githubprofile-1">GithubProfile</h4>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">Foundation</span>

<span class="c1">// GitHub 프로필 정보를 저장할 구조체</span>
<span class="kd">struct</span> <span class="kt">GithubProfile</span><span class="p">:</span> <span class="kt">Decodable</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">login</span><span class="p">:</span> <span class="kt">String</span>       <span class="c1">//깃허브 ID</span>
    <span class="k">var</span> <span class="nv">name</span><span class="p">:</span> <span class="kt">String</span>           <span class="c1">//이름</span>
    <span class="k">var</span> <span class="nv">bio</span><span class="p">:</span> <span class="kt">String</span>         <span class="c1">//bio</span>
    <span class="k">var</span> <span class="nv">avatarUrl</span><span class="p">:</span> <span class="kt">URL</span>      <span class="c1">//프로필 사진</span>
    <span class="k">var</span> <span class="nv">followers</span><span class="p">:</span> <span class="kt">Int</span>      <span class="c1">//팔로워</span>
    <span class="k">var</span> <span class="nv">following</span><span class="p">:</span> <span class="kt">Int</span>      <span class="c1">//팔로잉</span>
    
    <span class="kd">enum</span> <span class="kt">CodingKeys</span><span class="p">:</span> <span class="kt">String</span><span class="p">,</span> <span class="kt">CodingKey</span> <span class="p">{</span>
        <span class="k">case</span> <span class="n">login</span>
        <span class="k">case</span> <span class="n">name</span>
        <span class="k">case</span> <span class="n">bio</span>
        <span class="k">case</span> <span class="n">followers</span>
        <span class="k">case</span> <span class="n">following</span>
        <span class="k">case</span> <span class="n">avatarUrl</span> <span class="o">=</span> <span class="s">"avatar_url"</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="githubrepositories-1">GithubRepositories</h4>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">Foundation</span>

<span class="c1">// 리포지토리 정보를 저장할 구조체</span>
<span class="kd">struct</span> <span class="kt">GithubRepositories</span><span class="p">:</span> <span class="kt">Decodable</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">name</span><span class="p">:</span> <span class="kt">String</span>             <span class="c1">//리포지토리 이름</span>
    <span class="k">var</span> <span class="nv">language</span><span class="p">:</span> <span class="kt">String</span><span class="p">?</span>        <span class="c1">//언어</span>
<span class="p">}</span>
</code></pre></div></div>

<p><br /></p>

<h2 id="2-3번-api에서-받아온-데이터를-decoding-하여-객체로-만들어주세요--responsedata-사용">2, 3번 API에서 받아온 데이터를 Decoding 하여 객체로 만들어주세요. / responseData 사용</h2>
<h3 id="수정-전-1">수정 전</h3>
<h4 id="깃허브에서-프로필-정보-가져오기">깃허브에서 프로필 정보 가져오기</h4>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// MARK: - 깃허브에서 프로필 정보 가져오기</span>
<span class="kd">func</span> <span class="nf">getGithubProfile</span><span class="p">()</span> <span class="p">{</span>
    <span class="kt">AF</span><span class="o">.</span><span class="nf">request</span><span class="p">(</span><span class="n">profileUrl</span><span class="p">)</span><span class="o">.</span><span class="n">responseJSON</span> <span class="p">{</span> <span class="n">response</span> <span class="k">in</span>
        <span class="k">switch</span> <span class="n">response</span><span class="o">.</span><span class="n">result</span> <span class="p">{</span>
        <span class="k">case</span><span class="o">.</span><span class="nf">success</span><span class="p">(</span><span class="k">let</span> <span class="nv">value</span><span class="p">):</span>
            <span class="k">if</span> <span class="k">let</span> <span class="nv">json</span> <span class="o">=</span> <span class="n">value</span> <span class="k">as?</span> <span class="p">[</span><span class="kt">String</span><span class="p">:</span> <span class="kt">Any</span><span class="p">],</span>
                <span class="k">let</span> <span class="nv">name</span> <span class="o">=</span> <span class="n">json</span><span class="p">[</span><span class="s">"name"</span><span class="p">]</span> <span class="k">as?</span> <span class="kt">String</span><span class="p">,</span>
                <span class="k">let</span> <span class="nv">login</span> <span class="o">=</span> <span class="n">json</span><span class="p">[</span><span class="s">"login"</span><span class="p">]</span> <span class="k">as?</span> <span class="kt">String</span><span class="p">,</span>
                <span class="k">let</span> <span class="nv">followers</span> <span class="o">=</span> <span class="n">json</span><span class="p">[</span><span class="s">"followers"</span><span class="p">]</span> <span class="k">as?</span> <span class="kt">Int</span><span class="p">,</span>
                <span class="k">let</span> <span class="nv">following</span> <span class="o">=</span> <span class="n">json</span><span class="p">[</span><span class="s">"following"</span><span class="p">]</span> <span class="k">as?</span> <span class="kt">Int</span><span class="p">,</span>
                <span class="k">let</span> <span class="nv">repoCnt</span> <span class="o">=</span> <span class="n">json</span><span class="p">[</span><span class="s">"public_repos"</span><span class="p">]</span> <span class="k">as?</span> <span class="kt">Int</span><span class="p">,</span>
                <span class="k">let</span> <span class="nv">avatarURLString</span> <span class="o">=</span> <span class="n">json</span><span class="p">[</span><span class="s">"avatar_url"</span><span class="p">]</span> <span class="k">as?</span> <span class="kt">String</span><span class="p">,</span>
                <span class="k">let</span> <span class="nv">avatarURL</span> <span class="o">=</span> <span class="kt">URL</span><span class="p">(</span><span class="nv">string</span><span class="p">:</span> <span class="n">avatarURLString</span><span class="p">)</span> <span class="p">{</span>
                
                <span class="k">let</span> <span class="nv">profile</span> <span class="o">=</span> <span class="kt">GithubProfile</span><span class="p">(</span><span class="nv">myImage</span><span class="p">:</span> <span class="n">avatarURL</span><span class="p">,</span> <span class="nv">name</span><span class="p">:</span> <span class="n">name</span><span class="p">,</span> <span class="nv">login</span><span class="p">:</span> <span class="n">login</span><span class="p">,</span> <span class="nv">followers</span><span class="p">:</span> <span class="n">followers</span><span class="p">,</span> <span class="nv">following</span><span class="p">:</span> <span class="n">following</span><span class="p">,</span> <span class="nv">repoCnt</span><span class="p">:</span> <span class="n">repoCnt</span><span class="p">)</span>
                
                <span class="k">self</span><span class="o">.</span><span class="nf">showProfileInfo</span><span class="p">(</span><span class="n">profile</span><span class="p">)</span>                    
            <span class="p">}</span>
        <span class="k">case</span> <span class="o">.</span><span class="nf">failure</span><span class="p">(</span><span class="k">let</span> <span class="nv">error</span><span class="p">):</span>
            <span class="nf">print</span><span class="p">(</span><span class="s">"error: </span><span class="se">\(</span><span class="n">error</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// 구조체에서 데이터를 가져와 label 및 imageView에 보여주는 함수</span>
<span class="kd">func</span> <span class="nf">showProfileInfo</span><span class="p">(</span><span class="n">_</span> <span class="nv">profile</span><span class="p">:</span> <span class="kt">GithubProfile</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">//SDWebImage를 사용하여 프로필 이미지 다운로드 및 출력</span>
    <span class="n">profileImageView</span><span class="o">.</span><span class="nf">sd_setImage</span><span class="p">(</span><span class="nv">with</span><span class="p">:</span> <span class="n">profile</span><span class="o">.</span><span class="n">myImage</span><span class="p">,</span> <span class="nv">placeholderImage</span><span class="p">:</span> <span class="kc">nil</span><span class="p">,</span> <span class="nv">options</span><span class="p">:</span> <span class="p">[],</span> <span class="nv">completed</span><span class="p">:</span> <span class="kc">nil</span><span class="p">)</span>
    
    <span class="n">profileName</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">profile</span><span class="o">.</span><span class="n">name</span>     <span class="c1">// 이름 출력</span>
    <span class="n">profileLogin</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">profile</span><span class="o">.</span><span class="n">login</span>   <span class="c1">// 로그인 출력</span>
    <span class="n">profileFollowers</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">"Followers: </span><span class="se">\(</span><span class="kt">String</span><span class="p">(</span><span class="n">profile</span><span class="o">.</span><span class="n">followers</span><span class="p">)</span><span class="se">)</span><span class="s">"</span>   <span class="c1">//followers</span>
    <span class="n">profileFollowing</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">"Following: </span><span class="se">\(</span><span class="kt">String</span><span class="p">(</span><span class="n">profile</span><span class="o">.</span><span class="n">following</span><span class="p">)</span><span class="se">)</span><span class="s">"</span>   <span class="c1">//following</span>
    
    <span class="k">self</span><span class="o">.</span><span class="n">repoCnt</span> <span class="o">=</span> <span class="n">profile</span><span class="o">.</span><span class="n">repoCnt</span>
    <span class="n">repositoriesTableView</span><span class="o">.</span><span class="nf">reloadData</span><span class="p">()</span>  <span class="c1">//최초 실행하면 numberOfRowsInSection를 먼저 실행하고 깃허브 데이터를 받아와서 row 수가 0임, row수를 깃허브 repo수 만큼 보이도록 새로고침 추가</span>
<span class="p">}</span>
</code></pre></div></div>
<h4 id="깃허브에서-리포지토리-정보-가져오기">깃허브에서 리포지토리 정보 가져오기</h4>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// MARK: - 깃허브에서 리포지토리 정보 가져오기</span>
<span class="kd">func</span> <span class="nf">getGithubRepositories</span><span class="p">()</span> <span class="p">{</span>
    <span class="kt">AF</span><span class="o">.</span><span class="nf">request</span><span class="p">(</span><span class="n">repositoriesUrl</span><span class="p">)</span><span class="o">.</span><span class="n">responseJSON</span> <span class="p">{</span> <span class="n">response</span> <span class="k">in</span>
        <span class="k">switch</span> <span class="n">response</span><span class="o">.</span><span class="n">result</span> <span class="p">{</span>
        <span class="k">case</span><span class="o">.</span><span class="nf">success</span><span class="p">(</span><span class="k">let</span> <span class="nv">value</span><span class="p">):</span>
            <span class="k">if</span> <span class="k">let</span> <span class="nv">repositories</span> <span class="o">=</span> <span class="n">value</span> <span class="k">as?</span> <span class="p">[[</span><span class="kt">String</span><span class="p">:</span> <span class="kt">Any</span><span class="p">]]</span> <span class="p">{</span>
                <span class="k">for</span> <span class="n">repo</span> <span class="k">in</span> <span class="n">repositories</span> <span class="p">{</span>
                    <span class="k">if</span> <span class="k">let</span> <span class="nv">name</span> <span class="o">=</span> <span class="n">repo</span><span class="p">[</span><span class="s">"name"</span><span class="p">]</span> <span class="k">as?</span> <span class="kt">String</span><span class="p">,</span>
                        <span class="k">let</span> <span class="nv">htmlUrl</span> <span class="o">=</span> <span class="n">repo</span><span class="p">[</span><span class="s">"html_url"</span><span class="p">]</span> <span class="k">as?</span> <span class="kt">String</span> <span class="p">{</span>
                            <span class="c1">//description, language는 없거나 Null 값이 있어서 닐 코얼레싱 추가</span>
                            <span class="k">let</span> <span class="nv">description</span> <span class="o">=</span> <span class="n">repo</span><span class="p">[</span><span class="s">"description"</span><span class="p">]</span> <span class="k">as?</span> <span class="kt">String</span> <span class="p">??</span> <span class="s">""</span>
                            <span class="k">let</span> <span class="nv">language</span> <span class="o">=</span> <span class="n">repo</span><span class="p">[</span><span class="s">"language"</span><span class="p">]</span> <span class="k">as?</span> <span class="kt">String</span> <span class="p">??</span> <span class="s">""</span>
                            
                            <span class="c1">//배열에 저장</span>
                            <span class="k">self</span><span class="o">.</span><span class="n">repoArr</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="kt">GithubRepositories</span><span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="n">name</span><span class="p">,</span> <span class="nv">htmlUrl</span><span class="p">:</span> <span class="n">htmlUrl</span><span class="p">,</span> <span class="nv">description</span><span class="p">:</span> <span class="n">description</span><span class="p">,</span> <span class="nv">language</span><span class="p">:</span> <span class="n">language</span><span class="p">))</span>
                    <span class="p">}</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="k">case</span> <span class="o">.</span><span class="nf">failure</span><span class="p">(</span><span class="k">let</span> <span class="nv">error</span><span class="p">):</span>
            <span class="nf">print</span><span class="p">(</span><span class="s">"에러: </span><span class="se">\(</span><span class="n">error</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="수정-후-1">수정 후</h3>
<h4 id="네트워크-작업을-전담할-파일-생성">네트워크 작업을 전담할 파일 생성</h4>
<ul>
  <li>NetworkManager.swift 생성</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">Foundation</span>
<span class="kd">import</span> <span class="kt">Alamofire</span>

<span class="kd">final</span> <span class="kd">class</span> <span class="kt">NetworkManager</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">url</span> <span class="o">=</span> <span class="s">"https://api.github.com/users/"</span>
    
    <span class="c1">// MARK: - URLSession으로 깃허브 프로필 가져오기</span>
    <span class="kd">func</span> <span class="nf">fetchUserProfile</span><span class="p">(</span><span class="nv">userName</span><span class="p">:</span> <span class="kt">String</span><span class="p">,</span> <span class="nv">completionHandler</span><span class="p">:</span> <span class="kd">@escaping</span> <span class="p">(</span><span class="kt">Result</span><span class="o">&lt;</span><span class="kt">GithubProfile</span><span class="p">,</span> <span class="kt">Error</span><span class="o">&gt;</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Void</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">//1. url 구조체 생성</span>
        <span class="k">guard</span> <span class="k">let</span> <span class="nv">url</span> <span class="o">=</span> <span class="kt">URL</span><span class="p">(</span><span class="nv">string</span><span class="p">:</span> <span class="s">"</span><span class="se">\(</span><span class="k">self</span><span class="o">.</span><span class="n">url</span><span class="se">)\(</span><span class="n">userName</span><span class="se">)</span><span class="s">"</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span>
            <span class="nf">completionHandler</span><span class="p">(</span><span class="o">.</span><span class="nf">failure</span><span class="p">(</span><span class="kt">NSError</span><span class="p">(</span><span class="nv">domain</span><span class="p">:</span> <span class="s">"url 변환에 실패했어요."</span><span class="p">,</span> <span class="nv">code</span><span class="p">:</span> <span class="mi">401</span><span class="p">)))</span>
            <span class="k">return</span>
        <span class="p">}</span>
        
        <span class="c1">//2. request 설정</span>
        <span class="k">var</span> <span class="nv">request</span> <span class="o">=</span> <span class="kt">URLRequest</span><span class="p">(</span><span class="nv">url</span><span class="p">:</span> <span class="n">url</span><span class="p">)</span>
        <span class="n">request</span><span class="o">.</span><span class="n">httpMethod</span> <span class="o">=</span> <span class="s">"GET"</span>
        
        <span class="c1">//3. 작업 만들기</span>
        <span class="k">let</span> <span class="nv">task</span> <span class="o">=</span> <span class="kt">URLSession</span><span class="o">.</span><span class="n">shared</span><span class="o">.</span><span class="nf">dataTask</span><span class="p">(</span><span class="nv">with</span><span class="p">:</span> <span class="n">request</span><span class="p">)</span> <span class="p">{</span> <span class="n">data</span><span class="p">,</span> <span class="n">response</span><span class="p">,</span> <span class="n">error</span> <span class="k">in</span>
            <span class="k">if</span> <span class="k">let</span> <span class="nv">error</span> <span class="p">{</span>
                <span class="nf">completionHandler</span><span class="p">(</span><span class="o">.</span><span class="nf">failure</span><span class="p">(</span><span class="n">error</span><span class="p">))</span>
                <span class="k">return</span>
            <span class="p">}</span>
            <span class="k">guard</span> <span class="k">let</span> <span class="nv">data</span> <span class="k">else</span> <span class="p">{</span>
                <span class="nf">completionHandler</span><span class="p">(</span><span class="o">.</span><span class="nf">failure</span><span class="p">(</span><span class="kt">NSError</span><span class="p">(</span><span class="nv">domain</span><span class="p">:</span> <span class="s">"Data가 없습니다."</span><span class="p">,</span> <span class="nv">code</span><span class="p">:</span> <span class="mi">402</span><span class="p">)))</span>
                <span class="k">return</span>
            <span class="p">}</span>
            <span class="k">do</span> <span class="p">{</span>
                <span class="k">let</span> <span class="nv">profile</span> <span class="o">=</span> <span class="k">try</span> <span class="kt">JSONDecoder</span><span class="p">()</span><span class="o">.</span><span class="nf">decode</span><span class="p">(</span><span class="kt">GithubProfile</span><span class="o">.</span><span class="k">self</span><span class="p">,</span> <span class="nv">from</span><span class="p">:</span> <span class="n">data</span><span class="p">)</span>
                <span class="c1">//콜백함수로 데이터 전달</span>
                <span class="nf">completionHandler</span><span class="p">(</span><span class="o">.</span><span class="nf">success</span><span class="p">(</span><span class="n">profile</span><span class="p">))</span>
            <span class="p">}</span> <span class="k">catch</span> <span class="p">{</span>
                <span class="nf">completionHandler</span><span class="p">(</span><span class="o">.</span><span class="nf">failure</span><span class="p">(</span><span class="n">error</span><span class="p">))</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="c1">//4. 작업시작</span>
        <span class="n">task</span><span class="o">.</span><span class="nf">resume</span><span class="p">()</span>
    <span class="p">}</span>
    
    <span class="c1">// MARK: - 알라모파이어로 리포지토리 정보 가져오기</span>
    <span class="kd">func</span> <span class="nf">fetchUserRepositories</span><span class="p">(</span><span class="nv">userName</span><span class="p">:</span> <span class="kt">String</span><span class="p">,</span> <span class="nv">page</span><span class="p">:</span> <span class="kt">Int</span><span class="p">,</span> <span class="nv">completionHandler</span><span class="p">:</span> <span class="kd">@escaping</span> <span class="p">(</span><span class="kt">Result</span><span class="o">&lt;</span><span class="p">[</span><span class="kt">GithubRepositories</span><span class="p">],</span> <span class="kt">Error</span><span class="o">&gt;</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Void</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">url</span> <span class="o">=</span> <span class="s">"</span><span class="se">\(</span><span class="k">self</span><span class="o">.</span><span class="n">url</span><span class="se">)\(</span><span class="n">userName</span><span class="se">)</span><span class="s">/repos?page=</span><span class="se">\(</span><span class="n">page</span><span class="se">)</span><span class="s">"</span>
        
        <span class="kt">AF</span><span class="o">.</span><span class="nf">request</span><span class="p">(</span><span class="n">url</span><span class="p">)</span><span class="o">.</span><span class="nf">responseDecodable</span><span class="p">(</span><span class="nv">of</span><span class="p">:</span> <span class="p">[</span><span class="kt">GithubRepositories</span><span class="p">]</span><span class="o">.</span><span class="k">self</span><span class="p">)</span> <span class="p">{</span> <span class="n">response</span> <span class="k">in</span>
            <span class="k">switch</span> <span class="n">response</span><span class="o">.</span><span class="n">result</span> <span class="p">{</span>
            <span class="k">case</span> <span class="o">.</span><span class="nf">success</span><span class="p">(</span><span class="k">let</span> <span class="nv">repositories</span><span class="p">):</span>
                <span class="nf">completionHandler</span><span class="p">(</span><span class="o">.</span><span class="nf">success</span><span class="p">(</span><span class="n">repositories</span><span class="p">))</span>
            <span class="k">case</span> <span class="o">.</span><span class="nf">failure</span><span class="p">(</span><span class="k">let</span> <span class="nv">error</span><span class="p">):</span>
                <span class="nf">completionHandler</span><span class="p">(</span><span class="o">.</span><span class="nf">failure</span><span class="p">(</span><span class="n">error</span><span class="p">))</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<h4 id="깃허브에서-프로필-및-리포지토리-정보-가져오기">깃허브에서 프로필 및 리포지토리 정보 가져오기</h4>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// MARK: - 깃허브 프로필 가져오기, 강한 순환 참조를 피하기 위해서 [weak self] 사용</span>
<span class="n">networkManager</span><span class="o">.</span><span class="nf">fetchUserProfile</span><span class="p">(</span><span class="nv">userName</span><span class="p">:</span> <span class="n">userName</span><span class="p">)</span> <span class="p">{</span> <span class="p">[</span><span class="k">weak</span> <span class="k">self</span><span class="p">]</span> <span class="n">result</span> <span class="k">in</span>
    <span class="k">switch</span> <span class="n">result</span> <span class="p">{</span>
    <span class="k">case</span> <span class="o">.</span><span class="nf">success</span><span class="p">(</span><span class="k">let</span> <span class="nv">githubProfile</span><span class="p">):</span>
        <span class="k">self</span><span class="p">?</span><span class="o">.</span><span class="n">profile</span> <span class="o">=</span> <span class="n">githubProfile</span>
        
        <span class="kt">DispatchQueue</span><span class="o">.</span><span class="n">main</span><span class="o">.</span><span class="k">async</span> <span class="p">{</span>
            <span class="k">self</span><span class="p">?</span><span class="o">.</span><span class="n">profileName</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">githubProfile</span><span class="o">.</span><span class="n">name</span>                             <span class="c1">//이름</span>
            <span class="k">self</span><span class="p">?</span><span class="o">.</span><span class="n">profileLogin</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">githubProfile</span><span class="o">.</span><span class="n">login</span>                           <span class="c1">//ID</span>
            <span class="k">self</span><span class="p">?</span><span class="o">.</span><span class="n">profileBio</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">githubProfile</span><span class="o">.</span><span class="n">bio</span>                               <span class="c1">//BIO</span>
            <span class="k">self</span><span class="p">?</span><span class="o">.</span><span class="n">profileFollowers</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">"followers: </span><span class="se">\(</span><span class="n">githubProfile</span><span class="o">.</span><span class="n">followers</span><span class="se">)</span><span class="s">"</span>   <span class="c1">//follwers</span>
            <span class="k">self</span><span class="p">?</span><span class="o">.</span><span class="n">profileFollowing</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">"following: </span><span class="se">\(</span><span class="n">githubProfile</span><span class="o">.</span><span class="n">following</span><span class="se">)</span><span class="s">"</span>   <span class="c1">//follwing</span>
            <span class="k">self</span><span class="p">?</span><span class="o">.</span><span class="n">profileImageView</span><span class="o">.</span><span class="n">kf</span><span class="o">.</span><span class="nf">setImage</span><span class="p">(</span><span class="nv">with</span><span class="p">:</span> <span class="n">githubProfile</span><span class="o">.</span><span class="n">avatarUrl</span><span class="p">)</span>       <span class="c1">//프로필사진</span>
            
            <span class="k">self</span><span class="p">?</span><span class="o">.</span><span class="n">view</span><span class="o">.</span><span class="nf">setNeedsDisplay</span><span class="p">()</span>
        <span class="p">}</span>
    <span class="k">case</span> <span class="o">.</span><span class="nf">failure</span><span class="p">(</span><span class="k">let</span> <span class="nv">error</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">error</span><span class="o">.</span><span class="n">localizedDescription</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// MARK: - 깃허브 리포지토리 가져오기, 강한 순환 참조를 피하기 위해서 [weak self] 사용</span>
<span class="n">networkManager</span><span class="o">.</span><span class="nf">fetchUserRepositories</span><span class="p">(</span><span class="nv">userName</span><span class="p">:</span> <span class="n">userName</span><span class="p">,</span> <span class="nv">page</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">page</span><span class="p">)</span> <span class="p">{</span> <span class="p">[</span><span class="k">weak</span> <span class="k">self</span><span class="p">]</span> <span class="n">result</span> <span class="k">in</span>
    <span class="k">switch</span> <span class="n">result</span> <span class="p">{</span>
    <span class="k">case</span> <span class="o">.</span><span class="nf">success</span><span class="p">(</span><span class="k">let</span> <span class="nv">repositories</span><span class="p">):</span>
        <span class="k">self</span><span class="p">?</span><span class="o">.</span><span class="n">repositories</span> <span class="o">=</span> <span class="n">repositories</span>
        <span class="kt">DispatchQueue</span><span class="o">.</span><span class="n">main</span><span class="o">.</span><span class="k">async</span> <span class="p">{</span>
            <span class="k">self</span><span class="p">?</span><span class="o">.</span><span class="n">repositoriesTableView</span><span class="o">.</span><span class="n">refreshControl</span><span class="p">?</span><span class="o">.</span><span class="nf">endRefreshing</span><span class="p">()</span> <span class="c1">//새로고침 끝내기</span>
            <span class="k">self</span><span class="p">?</span><span class="o">.</span><span class="n">repositoriesTableView</span><span class="o">.</span><span class="nf">reloadData</span><span class="p">()</span>
        <span class="p">}</span>
    <span class="k">case</span> <span class="o">.</span><span class="nf">failure</span><span class="p">(</span><span class="k">let</span> <span class="nv">error</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">error</span><span class="o">.</span><span class="n">localizedDescription</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><br /></p>

<h2 id="4-pull-to-refresh는-모든-데이터를-다시-받아와서-테이블뷰를-그려주세요">4. Pull to refresh는 모든 데이터를 다시 받아와서 테이블뷰를 그려주세요.</h2>
<h3 id="수정-전-2">수정 전</h3>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="c1">// MARK: - viewDidLoad()</span>
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>

        <span class="c1">// 다른 코드 생략 </span>

        <span class="c1">//Pull to refresh 추가</span>
        <span class="nf">tableViewRefresh</span><span class="p">()</span>
    <span class="p">}</span>
    
    <span class="c1">// MARK: - Pull to refresh 컨트롤 추가</span>
    <span class="kd">func</span> <span class="nf">tableViewRefresh</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">refreshControl</span> <span class="o">=</span> <span class="kt">UIRefreshControl</span><span class="p">()</span>
        <span class="n">refreshControl</span><span class="o">.</span><span class="n">attributedTitle</span> <span class="o">=</span> <span class="kt">NSAttributedString</span><span class="p">(</span><span class="nv">string</span><span class="p">:</span> <span class="s">"새로고침"</span><span class="p">)</span>
        <span class="n">refreshControl</span><span class="o">.</span><span class="nf">addTarget</span><span class="p">(</span><span class="k">self</span><span class="p">,</span> <span class="nv">action</span><span class="p">:</span> <span class="k">#selector</span><span class="p">(</span><span class="n">refreshData</span><span class="p">),</span> <span class="nv">for</span><span class="p">:</span> <span class="o">.</span><span class="n">valueChanged</span><span class="p">)</span>
        <span class="n">repositoriesTableView</span><span class="o">.</span><span class="n">refreshControl</span> <span class="o">=</span> <span class="n">refreshControl</span>
    <span class="p">}</span>
    
    <span class="c1">// MARK: - pull to refresh 메서드</span>
    <span class="kd">@objc</span> <span class="kd">func</span> <span class="nf">refreshData</span><span class="p">()</span> <span class="p">{</span>
        <span class="kt">DispatchQueue</span><span class="o">.</span><span class="n">main</span><span class="o">.</span><span class="nf">asyncAfter</span><span class="p">(</span><span class="nv">deadline</span><span class="p">:</span> <span class="o">.</span><span class="nf">now</span><span class="p">()</span> <span class="o">+</span> <span class="mf">1.0</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// 테이블 뷰 리로드</span>
            <span class="k">self</span><span class="o">.</span><span class="n">repositoriesTableView</span><span class="o">.</span><span class="nf">reloadData</span><span class="p">()</span>
            <span class="c1">// UIRefreshControl 종료</span>
            <span class="k">self</span><span class="o">.</span><span class="n">repositoriesTableView</span><span class="o">.</span><span class="n">refreshControl</span><span class="p">?</span><span class="o">.</span><span class="nf">endRefreshing</span><span class="p">()</span>
        <span class="p">}</span>
    <span class="p">}</span>
</code></pre></div></div>

<h3 id="수정-후-2">수정 후</h3>
<ul>
  <li>기존 테이블 뷰 리로드에서 네트워크를 통해 새로 받아오도록 수정
    <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// MARK: - 테이블뷰 설정</span>
  <span class="kd">func</span> <span class="nf">configureTableView</span><span class="p">()</span> <span class="p">{</span>
      <span class="c1">//다른 코드 생략 </span>

      <span class="k">let</span> <span class="nv">refreshControl</span> <span class="o">=</span> <span class="kt">UIRefreshControl</span><span class="p">()</span>
      <span class="n">refreshControl</span><span class="o">.</span><span class="n">attributedTitle</span> <span class="o">=</span> <span class="kt">NSAttributedString</span><span class="p">(</span><span class="nv">string</span><span class="p">:</span> <span class="s">"새로고침"</span><span class="p">)</span>
      <span class="n">refreshControl</span><span class="o">.</span><span class="nf">addTarget</span><span class="p">(</span><span class="k">self</span><span class="p">,</span> <span class="nv">action</span><span class="p">:</span> <span class="k">#selector</span><span class="p">(</span><span class="n">refreshData</span><span class="p">),</span> <span class="nv">for</span><span class="p">:</span> <span class="o">.</span><span class="n">valueChanged</span><span class="p">)</span>
      <span class="n">repositoriesTableView</span><span class="o">.</span><span class="n">refreshControl</span> <span class="o">=</span> <span class="n">refreshControl</span>
  <span class="p">}</span>
    
  <span class="c1">// MARK: - pull to refresh 메서드</span>
  <span class="kd">@objc</span> <span class="kd">func</span> <span class="nf">refreshData</span><span class="p">()</span> <span class="p">{</span>
      <span class="nf">configureData</span><span class="p">()</span> <span class="c1">// 2,3 번 부분을 함수로 만들어 불러오기 </span>
  <span class="p">}</span>
</code></pre></div>    </div>
  </li>
</ul>

<h2 id="5-페이징처리를-해주세요">5. 페이징처리를 해주세요.</h2>
<ul>
  <li>1차 제출때는 구현하지 못한 부분입니다.</li>
</ul>

<h3 id="tableviewdelegate에-willdisplay-함수-추가">TableViewDelegate에 willDisplay 함수 추가</h3>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">extension</span> <span class="kt">ViewController</span><span class="p">:</span> <span class="kt">UITableViewDelegate</span> <span class="p">{</span>
    <span class="c1">//특정 셀이 화면에 나타나기 전에 실행 (셀이 화면에 나타나기 전에 수행되어야 하는 작업이 필요할때)</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">willDisplay</span> <span class="nv">cell</span><span class="p">:</span> <span class="kt">UITableViewCell</span><span class="p">,</span> <span class="n">forRowAt</span> <span class="nv">indexPath</span><span class="p">:</span> <span class="kt">IndexPath</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">//셀의 마지막에 도착했을때 데이터 다시 로드</span>
        <span class="k">if</span> <span class="n">indexPath</span><span class="o">.</span><span class="n">row</span> <span class="o">==</span> <span class="n">repositories</span><span class="o">.</span><span class="n">count</span> <span class="o">-</span> <span class="mi">1</span> <span class="p">{</span>
            <span class="nf">loadMore</span><span class="p">()</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="leadmore-함수-추가">leadMore 함수 추가</h3>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// MARK: - 페이징 처리</span>
<span class="kd">func</span> <span class="nf">loadMore</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">if</span> <span class="n">isLoadingLast</span> <span class="o">==</span> <span class="kc">true</span> <span class="p">{</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">"마지막 페이지까지 불러왔어요."</span><span class="p">)</span>
        <span class="k">return</span>
    <span class="p">}</span>
    <span class="n">page</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="n">networkManager</span><span class="o">.</span><span class="nf">fetchUserRepositories</span><span class="p">(</span><span class="nv">userName</span><span class="p">:</span> <span class="n">userName</span><span class="p">,</span> <span class="nv">page</span><span class="p">:</span> <span class="n">page</span><span class="p">)</span> <span class="p">{</span> <span class="p">[</span><span class="k">weak</span> <span class="k">self</span><span class="p">]</span> <span class="n">result</span> <span class="k">in</span>
        <span class="c1">// self에 대한 약한 참조를 만들어 strong reference cycle을 방지합니다.</span>
        <span class="k">guard</span> <span class="k">let</span> <span class="nv">self</span> <span class="o">=</span> <span class="k">self</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span> <span class="c1">// self가 nil이라면 함수를 종료합니다.</span>
        
        <span class="k">switch</span> <span class="n">result</span> <span class="p">{</span>
        <span class="k">case</span> <span class="o">.</span><span class="nf">success</span><span class="p">(</span><span class="k">let</span> <span class="nv">repositories</span><span class="p">):</span>
            
            <span class="c1">//api 호출결과가 비어있으면 마지막으로 인식</span>
            <span class="k">if</span> <span class="n">repositories</span><span class="o">.</span><span class="n">isEmpty</span> <span class="o">==</span> <span class="kc">true</span> <span class="p">{</span>
                <span class="k">self</span><span class="o">.</span><span class="n">isLoadingLast</span> <span class="o">=</span> <span class="kc">true</span>   <span class="c1">//마지막 저장소 로딩</span>
                <span class="k">return</span>
            <span class="p">}</span>
            
            <span class="k">self</span><span class="o">.</span><span class="n">repositories</span> <span class="o">=</span> <span class="k">self</span><span class="o">.</span><span class="n">repositories</span> <span class="o">+</span> <span class="n">repositories</span>    <span class="c1">//기존 배열에 새로 불러온 데이터 추가하기</span>
            <span class="c1">//UI 다시 그리기는 메인큐</span>
            <span class="kt">DispatchQueue</span><span class="o">.</span><span class="n">main</span><span class="o">.</span><span class="k">async</span> <span class="p">{</span>
                <span class="k">self</span><span class="o">.</span><span class="n">repositoriesTableView</span><span class="o">.</span><span class="nf">reloadData</span><span class="p">()</span>
            <span class="p">}</span>
        <span class="k">case</span> <span class="o">.</span><span class="nf">failure</span><span class="p">(</span><span class="k">let</span> <span class="nv">error</span><span class="p">):</span>
            <span class="nf">print</span><span class="p">(</span><span class="n">error</span><span class="o">.</span><span class="n">localizedDescription</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="6-as-tableviewcell-대신-옵셔널-바인딩을-사용해주세요">6. as! TableViewCell 대신 옵셔널 바인딩을 사용해주세요.</h2>
<h3 id="수정-전-3">수정 전</h3>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">cellForRowAt</span> <span class="nv">indexPath</span><span class="p">:</span> <span class="kt">IndexPath</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">UITableViewCell</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">cell</span> <span class="o">=</span> <span class="n">tableView</span><span class="o">.</span><span class="nf">dequeueReusableCell</span><span class="p">(</span><span class="nv">withIdentifier</span><span class="p">:</span> <span class="s">"CellId"</span><span class="p">,</span> <span class="nv">for</span><span class="p">:</span> <span class="n">indexPath</span><span class="p">)</span> <span class="k">as!</span> <span class="kt">TableViewCell</span>
    
    <span class="c1">//깃허브에서 데이터를 불러오기도 전에 cellForRowAt이 실행되어 추가</span>
    <span class="k">if</span> <span class="n">repoArr</span><span class="o">.</span><span class="n">count</span> <span class="o">!=</span> <span class="mi">0</span> <span class="p">{</span>
        <span class="n">cell</span><span class="o">.</span><span class="n">nameLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">repoArr</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="p">]</span><span class="o">.</span><span class="n">name</span>
        <span class="n">cell</span><span class="o">.</span><span class="n">descriptionLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">repoArr</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="p">]</span><span class="o">.</span><span class="n">description</span>
        <span class="n">cell</span><span class="o">.</span><span class="n">languageLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">repoArr</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="p">]</span><span class="o">.</span><span class="n">language</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="n">repositoriesTableView</span><span class="o">.</span><span class="nf">reloadData</span><span class="p">()</span>
    <span class="p">}</span>
    
    <span class="k">return</span> <span class="n">cell</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="수정-후-3">수정 후</h3>
<ul>
  <li>guard let 사용
    <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">cellForRowAt</span> <span class="nv">indexPath</span><span class="p">:</span> <span class="kt">IndexPath</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">UITableViewCell</span> <span class="p">{</span>
  <span class="k">guard</span> <span class="k">let</span> <span class="nv">cell</span> <span class="o">=</span> <span class="n">tableView</span><span class="o">.</span><span class="nf">dequeueReusableCell</span><span class="p">(</span><span class="nv">withIdentifier</span><span class="p">:</span> <span class="s">"CellId"</span><span class="p">,</span> <span class="nv">for</span><span class="p">:</span> <span class="n">indexPath</span><span class="p">)</span> <span class="k">as?</span> <span class="kt">TableViewCell</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="kt">UITableViewCell</span><span class="p">()</span> <span class="p">}</span>
    
  <span class="k">let</span> <span class="nv">repositories</span> <span class="o">=</span> <span class="n">repositories</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="p">]</span>
  <span class="n">cell</span><span class="o">.</span><span class="nf">bind</span><span class="p">(</span><span class="n">repositories</span><span class="p">)</span>
    
  <span class="k">return</span> <span class="n">cell</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
</ul>

<h1 id="실행화면">실행화면</h1>
<p><img src="../../assets/images/categories/sparta/2024-04-21-챌린지반과제1-2.png" alt="실행화면" /></p>

<p><br /></p>

<h1 id="마무리">마무리</h1>
<ul>
  <li>구글에서 검색해서 구현한 이전 1차 제출보다 네트워크 작업 관련해서 한번 공부하고 다시 풀어보니 공부한 내용을 적용하면서 풀어볼 수 있었습니다.</li>
</ul>]]></content><author><name>HyeongSub Lim</name></author><category term="sparta" /><category term="챌린지" /><category term="과제" /><category term="깃허브앱" /><summary type="html"><![CDATA[챌린지반 과제 2차 제출 - GitHub App 만들기]]></summary></entry><entry><title type="html">[내배캠] iOS 앱 개발 숙련 개인 과제 - WishList 앱 만들기 2</title><link href="http://localhost:4000/sparta/wishList2/" rel="alternate" type="text/html" title="[내배캠] iOS 앱 개발 숙련 개인 과제 - WishList 앱 만들기 2" /><published>2024-04-19T00:00:00+09:00</published><updated>2024-04-19T00:00:00+09:00</updated><id>http://localhost:4000/sparta/wishList2</id><content type="html" xml:base="http://localhost:4000/sparta/wishList2/"><![CDATA[<h1 id="wishlist-앱-만들기">WishList 앱 만들기</h1>
<ul>
  <li>지난 포스팅
    <ul>
      <li><a href="https://limlogging.github.io/sparta/wishList1/" target="_blank">WishList 앱 만들기 - 1</a></li>
    </ul>
  </li>
  <li>지난번 4,5번 선택 구현 과제가 있지만 네트워크 관련 복습이 더 중요하다고 생각하여 복습하면서 네트워크 작업 로직을 수정하였습니다. 
<br /></li>
</ul>

<h1 id="네트워크-작업-수정">네트워크 작업 수정</h1>
<h2 id="1-data-가져오기">1. Data 가져오기</h2>
<ul>
  <li>속성감시자를 제거하고 getData 부분을 수정하였습니다.</li>
</ul>

<h3 id="속성감시자-설정-삭제">속성감시자 설정 삭제</h3>
<ul>
  <li>지난번에 추가했던 아래 코드는 모두 삭제했습니다.</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">private</span> <span class="k">var</span> <span class="nv">currentProduct</span><span class="p">:</span> <span class="kt">ProductsManager</span><span class="p">?</span> <span class="o">=</span> <span class="kc">nil</span> <span class="p">{</span>
    <span class="k">didSet</span> <span class="p">{</span>
        <span class="c1">//currentProduct가 nil이 아닌지 확인하고 종료하기 </span>
        <span class="k">guard</span> <span class="k">let</span> <span class="nv">currentProduct</span> <span class="o">=</span> <span class="k">self</span><span class="o">.</span><span class="n">currentProduct</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
        
        <span class="c1">//메인 스레드에서 UI 업데이트를 수행</span>
        <span class="kt">DispatchQueue</span><span class="o">.</span><span class="n">main</span><span class="o">.</span><span class="k">async</span> <span class="p">{</span>
            <span class="k">self</span><span class="o">.</span><span class="n">productImageView</span><span class="o">.</span><span class="n">image</span> <span class="o">=</span> <span class="kc">nil</span>
            <span class="k">self</span><span class="o">.</span><span class="n">productTitleLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">currentProduct</span><span class="o">.</span><span class="n">title</span>
            <span class="k">self</span><span class="o">.</span><span class="n">productDescriptionLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">currentProduct</span><span class="o">.</span><span class="n">description</span>
            <span class="k">self</span><span class="o">.</span><span class="n">productPriceLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">"</span><span class="se">\(</span><span class="n">currentProduct</span><span class="o">.</span><span class="n">price</span><span class="se">)</span><span class="s">$"</span>
        <span class="p">}</span>
        
        <span class="c1">// 백그라운드 스레드에서 제품의 섬네일 이미지를 비동기적으로 가져오기 </span>
        <span class="kt">DispatchQueue</span><span class="o">.</span><span class="nf">global</span><span class="p">()</span><span class="o">.</span><span class="k">async</span> <span class="p">{</span> <span class="p">[</span><span class="k">weak</span> <span class="k">self</span><span class="p">]</span> <span class="k">in</span>
            <span class="c1">// 제품의 섬네일 이미지 데이터를 가져와 UIImage로 변환</span>
            <span class="k">if</span> <span class="k">let</span> <span class="nv">data</span> <span class="o">=</span> <span class="k">try</span><span class="p">?</span> <span class="kt">Data</span><span class="p">(</span><span class="nv">contentsOf</span><span class="p">:</span> <span class="n">currentProduct</span><span class="o">.</span><span class="n">thumbnail</span><span class="p">),</span> <span class="k">let</span> <span class="nv">image</span> <span class="o">=</span> <span class="kt">UIImage</span><span class="p">(</span><span class="nv">data</span><span class="p">:</span> <span class="n">data</span><span class="p">)</span> <span class="p">{</span>
                <span class="c1">// 가져온 이미지를 메인 스레드에서 productImageView에 설정하여 이미지 출력 </span>
                <span class="kt">DispatchQueue</span><span class="o">.</span><span class="n">main</span><span class="o">.</span><span class="k">async</span> <span class="p">{</span> <span class="k">self</span><span class="p">?</span><span class="o">.</span><span class="n">productImageView</span><span class="o">.</span><span class="n">image</span> <span class="o">=</span> <span class="n">image</span> <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="getdata-수정">getData() 수정</h3>
<h4 id="수정-전">수정 전</h4>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">getData</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">productID</span><span class="p">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="kt">Int</span><span class="o">.</span><span class="nf">random</span><span class="p">(</span><span class="nv">in</span><span class="p">:</span> <span class="mi">1</span><span class="o">...</span><span class="mi">100</span><span class="p">)</span>

    <span class="k">if</span> <span class="k">let</span> <span class="nv">url</span> <span class="o">=</span> <span class="kt">URL</span><span class="p">(</span><span class="nv">string</span><span class="p">:</span> <span class="s">"https://dummyjson.com/products/</span><span class="se">\(</span><span class="n">productID</span><span class="se">)</span><span class="s">"</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">"url: </span><span class="se">\(</span><span class="n">url</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
        <span class="c1">//URLSessionDataTask를 사용하여 비동기적으로 데이터 요청</span>
        <span class="k">let</span> <span class="nv">task</span> <span class="o">=</span> <span class="kt">URLSession</span><span class="o">.</span><span class="n">shared</span><span class="o">.</span><span class="nf">dataTask</span><span class="p">(</span><span class="nv">with</span><span class="p">:</span> <span class="n">url</span><span class="p">)</span> <span class="p">{</span> <span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">response</span><span class="p">,</span> <span class="n">error</span><span class="p">)</span> <span class="k">in</span>
            <span class="k">if</span> <span class="k">let</span> <span class="nv">error</span> <span class="o">=</span> <span class="n">error</span> <span class="p">{</span>
                <span class="nf">print</span><span class="p">(</span><span class="s">"Error: </span><span class="se">\(</span><span class="n">error</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
            <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="k">let</span> <span class="nv">data</span> <span class="o">=</span> <span class="n">data</span> <span class="p">{</span>
                <span class="k">do</span> <span class="p">{</span>
                    <span class="k">let</span> <span class="nv">product</span> <span class="o">=</span> <span class="k">try</span> <span class="kt">JSONDecoder</span><span class="p">()</span><span class="o">.</span><span class="nf">decode</span><span class="p">(</span><span class="kt">ProductsManager</span><span class="o">.</span><span class="k">self</span><span class="p">,</span> <span class="nv">from</span><span class="p">:</span> <span class="n">data</span><span class="p">)</span>
                    <span class="k">self</span><span class="o">.</span><span class="n">currentProduct</span> <span class="o">=</span> <span class="n">product</span>   <span class="c1">//데이터 설정 </span>
                <span class="p">}</span> <span class="k">catch</span> <span class="p">{</span>
                    <span class="nf">print</span><span class="p">(</span><span class="s">"Decode Error: </span><span class="se">\(</span><span class="n">error</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="n">task</span><span class="o">.</span><span class="nf">resume</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><br /></p>

<h4 id="수정-후">수정 후</h4>
<ul>
  <li>화면을 다시그리는 작업을 할때 디스패치 큐에 전달해야하는 것을 공부하여 코드를 수정하였습니다.</li>
  <li>didSet이 아닌 콜백 함수를 사용하면 데이터를 저장할 수 있어 콜백함수를 사용했습니다.</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="c1">//비동기적으로 실행되는 urlsession이 끝나면 데이터를 저장하기 위한 콜백함수 사용</span>
    <span class="kd">func</span> <span class="nf">getData</span><span class="p">(</span><span class="nv">completionHandler</span><span class="p">:</span> <span class="kd">@escaping</span> <span class="p">(</span><span class="kt">Product</span><span class="p">?)</span> <span class="o">-&gt;</span> <span class="kt">Void</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">productID</span><span class="p">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="kt">Int</span><span class="o">.</span><span class="nf">random</span><span class="p">(</span><span class="nv">in</span><span class="p">:</span> <span class="mi">1</span><span class="o">...</span><span class="mi">100</span><span class="p">)</span>
        
        <span class="c1">//1. url 구조체 만들어주기</span>
        <span class="k">guard</span> <span class="k">let</span> <span class="nv">url</span> <span class="o">=</span> <span class="kt">URL</span><span class="p">(</span><span class="nv">string</span><span class="p">:</span> <span class="s">"https://dummyjson.com/products/</span><span class="se">\(</span><span class="n">productID</span><span class="se">)</span><span class="s">"</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span>
            <span class="nf">print</span><span class="p">(</span><span class="s">"URL 주소를 불러오는데 실패했습니다."</span><span class="p">)</span>
            <span class="nf">completionHandler</span><span class="p">(</span><span class="kc">nil</span><span class="p">)</span>
            <span class="k">return</span>
        <span class="p">}</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">"url: </span><span class="se">\(</span><span class="n">url</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
        
        <span class="c1">//2. session 만들기</span>
        <span class="k">let</span> <span class="nv">session</span> <span class="o">=</span> <span class="kt">URLSession</span><span class="o">.</span><span class="n">shared</span>
        
        <span class="c1">//3. 비동기적으로 데이터 요청 테스크 생성</span>
        <span class="k">let</span> <span class="nv">task</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="nf">dataTask</span><span class="p">(</span><span class="nv">with</span><span class="p">:</span> <span class="n">url</span><span class="p">)</span> <span class="p">{</span> <span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">response</span><span class="p">,</span> <span class="n">error</span><span class="p">)</span> <span class="k">in</span>
            <span class="k">guard</span> <span class="n">error</span> <span class="o">==</span> <span class="kc">nil</span> <span class="k">else</span> <span class="p">{</span>
                <span class="nf">print</span><span class="p">(</span><span class="s">"Error: </span><span class="se">\(</span><span class="n">error</span><span class="o">!</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
                <span class="nf">completionHandler</span><span class="p">(</span><span class="kc">nil</span><span class="p">)</span>
                <span class="k">return</span>
            <span class="p">}</span>
            <span class="k">guard</span> <span class="k">let</span> <span class="nv">data</span> <span class="o">=</span> <span class="n">data</span> <span class="k">else</span> <span class="p">{</span>
                <span class="nf">completionHandler</span><span class="p">(</span><span class="kc">nil</span><span class="p">)</span>
                <span class="k">return</span>
            <span class="p">}</span>
            <span class="k">do</span> <span class="p">{</span>
                <span class="k">let</span> <span class="nv">product</span> <span class="o">=</span> <span class="k">try</span> <span class="kt">JSONDecoder</span><span class="p">()</span><span class="o">.</span><span class="nf">decode</span><span class="p">(</span><span class="kt">Product</span><span class="o">.</span><span class="k">self</span><span class="p">,</span> <span class="nv">from</span><span class="p">:</span> <span class="n">data</span><span class="p">)</span>
                <span class="nf">completionHandler</span><span class="p">(</span><span class="n">product</span><span class="p">)</span>
                
                <span class="k">if</span> <span class="k">let</span> <span class="nv">thumbnailURL</span> <span class="o">=</span> <span class="kt">URL</span><span class="p">(</span><span class="nv">string</span><span class="p">:</span> <span class="n">product</span><span class="o">.</span><span class="n">thumbnail</span><span class="p">),</span>
                   <span class="k">let</span> <span class="nv">imageData</span> <span class="o">=</span> <span class="k">try</span><span class="p">?</span> <span class="kt">Data</span><span class="p">(</span><span class="nv">contentsOf</span><span class="p">:</span> <span class="n">thumbnailURL</span><span class="p">)</span> <span class="p">{</span>
                    <span class="c1">//화면을 다시그릴때는 메인큐에서 작업 </span>
                    <span class="kt">DispatchQueue</span><span class="o">.</span><span class="n">main</span><span class="o">.</span><span class="k">async</span> <span class="p">{</span>
                        <span class="k">self</span><span class="o">.</span><span class="n">productPriceLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="kt">String</span><span class="p">(</span><span class="n">product</span><span class="o">.</span><span class="n">price</span><span class="p">)</span>
                        <span class="k">self</span><span class="o">.</span><span class="n">productTitleLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">product</span><span class="o">.</span><span class="n">title</span>
                        <span class="k">self</span><span class="o">.</span><span class="n">productDescriptionLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">product</span><span class="o">.</span><span class="n">description</span>
                        <span class="k">self</span><span class="o">.</span><span class="n">productImageView</span><span class="o">.</span><span class="n">image</span> <span class="o">=</span> <span class="kt">UIImage</span><span class="p">(</span><span class="nv">data</span><span class="p">:</span> <span class="n">imageData</span><span class="p">)</span>
                    <span class="p">}</span>
                <span class="p">}</span>
            <span class="p">}</span> <span class="k">catch</span> <span class="p">{</span>
                <span class="nf">print</span><span class="p">(</span><span class="s">"Decode Error: </span><span class="se">\(</span><span class="n">error</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="c1">//4. 작업 시작</span>
        <span class="n">task</span><span class="o">.</span><span class="nf">resume</span><span class="p">()</span>
    <span class="p">}</span>
</code></pre></div></div>

<p><br /></p>

<h2 id="2-getdata-사용하기">2. getData 사용하기</h2>
<ul>
  <li>콜백함수를 통하여 currentProduct에 데이터를 저장하고 위시리스트 담기 버튼을 선택하면 currentProduct에 저장된 데이터로 코어데이터에 저장을 합니다.</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">var</span> <span class="nv">currentProduct</span><span class="p">:</span> <span class="kt">Product</span><span class="p">?</span>    <span class="c1">//현재 상품이 저장되는 변수</span>

    <span class="c1">// MARK: - 위시리스트 보기</span>
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>
        
        <span class="k">self</span><span class="o">.</span><span class="nf">getData</span><span class="p">(</span><span class="nv">completionHandler</span><span class="p">:</span> <span class="p">{</span> <span class="n">product</span> <span class="k">in</span>
            <span class="k">self</span><span class="o">.</span><span class="n">currentProduct</span> <span class="o">=</span> <span class="n">product</span>
        <span class="p">})</span>
    <span class="p">}</span>
    
    <span class="c1">// MARK: - 다른 상품 보기 버튼 선택</span>
    <span class="kd">@IBAction</span> <span class="kd">func</span> <span class="nf">otherProductButtonTapped</span><span class="p">(</span><span class="n">_</span> <span class="nv">sender</span><span class="p">:</span> <span class="kt">UIButton</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="nf">getData</span><span class="p">(</span><span class="nv">completionHandler</span><span class="p">:</span> <span class="p">{</span> <span class="n">product</span> <span class="k">in</span>
            <span class="k">self</span><span class="o">.</span><span class="n">currentProduct</span> <span class="o">=</span> <span class="n">product</span>
        <span class="p">})</span>
    <span class="p">}</span>

    <span class="c1">// MARK: - 위시 리스트 담기 버튼 선택</span>
    <span class="kd">@IBAction</span> <span class="kd">func</span> <span class="nf">addToWishListButtonTapped</span><span class="p">(</span><span class="n">_</span> <span class="nv">sender</span><span class="p">:</span> <span class="kt">UIButton</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">guard</span> <span class="k">let</span> <span class="nv">product</span> <span class="o">=</span> <span class="k">self</span><span class="o">.</span><span class="n">currentProduct</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
        <span class="c1">//나머지 코드 생략 </span>
    <span class="p">}</span>
</code></pre></div></div>

<p><br /></p>

<h1 id="마무리">마무리</h1>
<ul>
  <li>선택 과제를 찾아서 하려고 했으나 기존에 데이터 가져오는 방식에 대해서 공부가 필요할 것 같아 기존 로직을 수정하였습니다.</li>
  <li>이번 과제를 통해서 URLSession, 동기, 비동기, 직렬, 동시성, GCD, 메인 큐, 글로벌 큐 등 다양한 키워드를 공부해볼 수 있었습니다.</li>
</ul>]]></content><author><name>HyeongSub Lim</name></author><category term="sparta" /><category term="sparta" /><category term="앱 개발 숙련" /><category term="WishList" /><category term="ios" /><category term="uikit" /><category term="swift" /><summary type="html"><![CDATA[iOS 앱 개발 숙련 개인 과제 - WishList 앱 만들기 2]]></summary></entry></feed>