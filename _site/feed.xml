<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-03-21T09:13:16+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">limlogging Devlog</title><author><name>HyeongSub Lim</name></author><entry><title type="html">[프로그래머스/Swift] 가장 가까운 같은 글자</title><link href="http://localhost:4000/algorithm/%EA%B0%80%EC%9E%A5%EA%B0%80%EA%B9%8C%EC%9A%B4%EA%B0%99%EC%9D%80%EA%B8%80%EC%9E%90/" rel="alternate" type="text/html" title="[프로그래머스/Swift] 가장 가까운 같은 글자" /><published>2024-03-21T00:00:00+09:00</published><updated>2024-03-21T00:00:00+09:00</updated><id>http://localhost:4000/algorithm/%EA%B0%80%EC%9E%A5%EA%B0%80%EA%B9%8C%EC%9A%B4%EA%B0%99%EC%9D%80%EA%B8%80%EC%9E%90</id><content type="html" xml:base="http://localhost:4000/algorithm/%EA%B0%80%EC%9E%A5%EA%B0%80%EA%B9%8C%EC%9A%B4%EA%B0%99%EC%9D%80%EA%B8%80%EC%9E%90/"><![CDATA[<h1 id="문제-설명">문제 설명</h1>
<ul>
  <li>문자열 s가 주어졌을 때, s의 각 위치마다 자신보다 앞에 나왔으면서, 자신과 가장 가까운 곳에 있는 같은 글자가 어디 있는지 알고 싶습니다.
예를 들어, s=”banana”라고 할 때,  각 글자들을 왼쪽부터 오른쪽으로 읽어 나가면서 다음과 같이 진행할 수 있습니다.
    <ul>
      <li>b는 처음 나왔기 때문에 자신의 앞에 같은 글자가 없습니다. 이는 -1로 표현합니다.</li>
      <li>a는 처음 나왔기 때문에 자신의 앞에 같은 글자가 없습니다. 이는 -1로 표현합니다.</li>
      <li>n은 처음 나왔기 때문에 자신의 앞에 같은 글자가 없습니다. 이는 -1로 표현합니다.</li>
      <li>a는 자신보다 두 칸 앞에 a가 있습니다. 이는 2로 표현합니다.</li>
      <li>n도 자신보다 두 칸 앞에 n이 있습니다. 이는 2로 표현합니다.</li>
      <li>a는 자신보다 두 칸, 네 칸 앞에 a가 있습니다. 이 중 가까운 것은 두 칸 앞이고, 이는 2로 표현합니다.</li>
    </ul>
  </li>
  <li>따라서 최종 결과물은 [-1, -1, -1, 2, 2, 2]가 됩니다.</li>
  <li>
    <p>문자열 s이 주어질 때, 위와 같이 정의된 연산을 수행하는 함수 solution을 완성해주세요.</p>
  </li>
  <li><a href="https://school.programmers.co.kr/learn/courses/30/lessons/142086" target="_blank">문제 풀기</a></li>
</ul>

<h1 id="제한사항">제한사항</h1>
<ul>
  <li>1 ≤ s의 길이 ≤ 10,000
    <ul>
      <li>s은 영어 소문자로만 이루어져 있습니다.</li>
    </ul>
  </li>
</ul>

<h1 id="입출력-예">입출력 예</h1>
<p>|s|result|
|”banana”|[-1, -1, -1, 2, 2, 2]|
|”foobar”|[-1, -1, 1, -1, -1, -1]|</p>

<h2 id="입출력-예-설명">입출력 예 설명</h2>
<h3 id="입출력-예-1">입출력 예 #1</h3>
<ul>
  <li>지문과 같습니다.</li>
</ul>

<h3 id="입출력-예-2">입출력 예 #2</h3>
<ul>
  <li>설명 생략</li>
</ul>

<h1 id="나의-풀이">나의 풀이</h1>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">Foundation</span>

<span class="kd">func</span> <span class="nf">solution</span><span class="p">(</span><span class="n">_</span> <span class="nv">s</span><span class="p">:</span><span class="kt">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">chArr</span><span class="p">:</span> <span class="p">[</span><span class="kt">Character</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">var</span> <span class="nv">numArr</span><span class="p">:</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">var</span> <span class="nv">chIndex</span><span class="p">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="o">-</span><span class="mi">100</span> <span class="c1">//초기값 0으로 하면 0번째 문자가 중복되면 계산 못해서 임의로 -100</span>
    
    <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">ch</span><span class="p">)</span> <span class="k">in</span> <span class="n">s</span><span class="o">.</span><span class="nf">enumerated</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">//처음에는 무조건 배열 추가</span>
        <span class="k">if</span> <span class="n">chArr</span><span class="o">.</span><span class="n">count</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
            <span class="n">chArr</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="n">ch</span><span class="p">)</span>
            <span class="c1">//print("-1")</span>
            <span class="n">numArr</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="c1">//따로 저장한 배열 확인</span>
            <span class="k">for</span> <span class="p">(</span><span class="n">j</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span> <span class="k">in</span> <span class="n">chArr</span><span class="o">.</span><span class="nf">enumerated</span><span class="p">()</span> <span class="p">{</span>
                <span class="c1">//같은 값 있으면 마지막 index 확인</span>
                <span class="k">if</span> <span class="n">ch</span> <span class="o">==</span> <span class="n">value</span> <span class="p">{</span>
                    <span class="n">chIndex</span> <span class="o">=</span> <span class="n">j</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="c1">//없으면 추가.</span>
            <span class="k">if</span> <span class="n">chIndex</span> <span class="o">==</span> <span class="o">-</span><span class="mi">100</span> <span class="p">{</span>
                <span class="n">chArr</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="n">ch</span><span class="p">)</span>
                <span class="c1">//print("-1")</span>
                <span class="n">numArr</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
            <span class="c1">//있으면 전체 수 - 인덱스 위치</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="n">numArr</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="n">chArr</span><span class="o">.</span><span class="n">count</span> <span class="o">-</span> <span class="n">chIndex</span><span class="p">)</span>
                <span class="n">chArr</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="n">ch</span><span class="p">)</span>
                                
                <span class="n">chIndex</span> <span class="o">=</span> <span class="o">-</span><span class="mi">100</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>    
    <span class="c1">//print("chArr: \(chArr)")</span>
    <span class="k">return</span> <span class="n">numArr</span>
<span class="p">}</span>
</code></pre></div></div>
<h1 id="다른-사람-풀이">다른 사람 풀이</h1>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">Foundation</span>

<span class="kd">func</span> <span class="nf">solution</span><span class="p">(</span><span class="n">_</span> <span class="nv">s</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">word</span><span class="p">:</span> <span class="p">[</span><span class="kt">String</span><span class="p">:</span> <span class="kt">Int</span><span class="p">]</span> <span class="o">=</span> <span class="p">[:]</span>
    <span class="k">var</span> <span class="nv">result</span><span class="p">:</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="k">for</span> <span class="p">(</span><span class="n">index</span><span class="p">,</span> <span class="n">val</span><span class="p">)</span> <span class="k">in</span> <span class="kt">Array</span><span class="p">(</span><span class="n">s</span><span class="p">)</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="kt">String</span><span class="p">(</span><span class="nv">$0</span><span class="p">)</span> <span class="p">}</span><span class="o">.</span><span class="nf">enumerated</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">if</span> <span class="k">let</span> <span class="nv">beforeIndex</span> <span class="o">=</span> <span class="n">word</span><span class="p">[</span><span class="n">val</span><span class="p">]</span> <span class="p">{</span>
            <span class="n">result</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="n">index</span> <span class="o">-</span> <span class="n">beforeIndex</span><span class="p">)</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="n">result</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
        <span class="p">}</span>

        <span class="n">word</span><span class="p">[</span><span class="n">val</span><span class="p">]</span> <span class="o">=</span> <span class="n">index</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="n">result</span>
<span class="p">}</span>
</code></pre></div></div>

<h1 id="의견">의견</h1>
<ul>
  <li>난 문자가 존재하는지 찾기 위해서 반복문을 한번 더 썼는데 딕셔너리로 푼 사람들이 많은 것 같다.</li>
  <li>반복문 줄이는 연습을 해보자 …</li>
</ul>]]></content><author><name>HyeongSub Lim</name></author><category term="Algorithm" /><category term="Algorithm" /><category term="coding test" /><category term="가장 가까운 같은 글자" /><summary type="html"><![CDATA[[프로그래머스/Swift] 가장 가까운 같은 글자]]></summary></entry><entry><title type="html">[프로그래머스/Swift] K번째수</title><link href="http://localhost:4000/algorithm/K%EB%B2%88%EC%A7%B8%EC%88%98/" rel="alternate" type="text/html" title="[프로그래머스/Swift] K번째수" /><published>2024-03-20T00:00:00+09:00</published><updated>2024-03-20T00:00:00+09:00</updated><id>http://localhost:4000/algorithm/K%EB%B2%88%EC%A7%B8%EC%88%98</id><content type="html" xml:base="http://localhost:4000/algorithm/K%EB%B2%88%EC%A7%B8%EC%88%98/"><![CDATA[<h1 id="문제-설명">문제 설명</h1>
<ul>
  <li>배열 array의 i번째 숫자부터 j번째 숫자까지 자르고 정렬했을 때, k번째에 있는 수를 구하려 합니다.</li>
  <li>예를 들어 array가 [1, 5, 2, 6, 3, 7, 4], i = 2, j = 5, k = 3이라면
    <ol>
      <li>array의 2번째부터 5번째까지 자르면 [5, 2, 6, 3]입니다.</li>
      <li>1에서 나온 배열을 정렬하면 [2, 3, 5, 6]입니다.</li>
      <li>2에서 나온 배열의 3번째 숫자는 5입니다.</li>
    </ol>
  </li>
  <li>
    <p>배열 array, [i, j, k]를 원소로 가진 2차원 배열 commands가 매개변수로 주어질 때, commands의 모든 원소에 대해 앞서 설명한 연산을 적용했을 때 나온 결과를 배열에 담아 return 하도록 solution 함수를 작성해주세요.</p>
  </li>
  <li><a href="https://school.programmers.co.kr/learn/courses/30/lessons/42748" target="_blank">문제 풀기</a></li>
</ul>

<h1 id="제한사항">제한사항</h1>
<ul>
  <li>array의 길이는 1 이상 100 이하입니다.</li>
  <li>array의 각 원소는 1 이상 100 이하입니다.</li>
  <li>commands의 길이는 1 이상 50 이하입니다.</li>
  <li>commands의 각 원소는 길이가 3입니다.</li>
</ul>

<h1 id="입출력-예">입출력 예</h1>

<table>
  <tbody>
    <tr>
      <td>array</td>
      <td>commands</td>
      <td>return</td>
    </tr>
    <tr>
      <td>[1, 5, 2, 6, 3, 7, 4]</td>
      <td>[[2, 5, 3], [4, 4, 1], [1, 7, 3]]</td>
      <td>[5, 6, 3]</td>
    </tr>
  </tbody>
</table>

<h2 id="입출력-예-설명">입출력 예 설명</h2>
<ul>
  <li>[1, 5, 2, 6, 3, 7, 4]를 2번째부터 5번째까지 자른 후 정렬합니다. [2, 3, 5, 6]의 세 번째 숫자는 5입니다.</li>
  <li>[1, 5, 2, 6, 3, 7, 4]를 4번째부터 4번째까지 자른 후 정렬합니다. [6]의 첫 번째 숫자는 6입니다.</li>
  <li>[1, 5, 2, 6, 3, 7, 4]를 1번째부터 7번째까지 자릅니다. [1, 2, 3, 4, 5, 6, 7]의 세 번째 숫자는 3입니다.</li>
</ul>

<h1 id="나의-풀이">나의 풀이</h1>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">Foundation</span>

<span class="kd">func</span> <span class="nf">solution</span><span class="p">(</span><span class="n">_</span> <span class="nv">array</span><span class="p">:[</span><span class="kt">Int</span><span class="p">],</span> <span class="n">_</span> <span class="nv">commands</span><span class="p">:[[</span><span class="kt">Int</span><span class="p">]])</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">arr</span><span class="p">:</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
        
    <span class="k">for</span> <span class="n">arrCom</span> <span class="k">in</span> <span class="n">commands</span> <span class="p">{</span>
        <span class="c1">//배열 자르고 정렬</span>
        <span class="k">let</span> <span class="nv">tempArr</span> <span class="o">=</span> <span class="n">array</span><span class="p">[</span><span class="n">arrCom</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span><span class="o">...</span><span class="n">arrCom</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="nf">sorted</span><span class="p">()</span>
        <span class="n">arr</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="n">tempArr</span><span class="p">[</span><span class="n">arrCom</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span><span class="p">])</span>
    <span class="p">}</span>
    
    <span class="k">return</span> <span class="n">arr</span>
<span class="p">}</span>
</code></pre></div></div>
<h1 id="다른-사람-풀이">다른 사람 풀이</h1>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">Foundation</span>

<span class="kd">func</span> <span class="nf">solution</span><span class="p">(</span><span class="n">_</span> <span class="nv">array</span><span class="p">:[</span><span class="kt">Int</span><span class="p">],</span> <span class="n">_</span> <span class="nv">commands</span><span class="p">:[[</span><span class="kt">Int</span><span class="p">]])</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">commands</span><span class="o">.</span><span class="nf">map</span><span class="p">({(</span><span class="n">key</span><span class="p">)</span> <span class="k">in</span>
        <span class="k">return</span> <span class="n">array</span><span class="p">[(</span><span class="n">key</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">...</span><span class="p">(</span><span class="n">key</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">-</span><span class="mi">1</span><span class="p">)]</span><span class="o">.</span><span class="nf">sorted</span><span class="p">()[</span><span class="n">key</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
    <span class="p">})</span>
<span class="p">}</span>
</code></pre></div></div>

<h1 id="의견">의견</h1>
<ul>
  <li>어제 문자열 고민을 해서 금방 풀었다. sorted뒤에 arrCom[2] - 1 부분을 붙였는데 에러가 발생해서 따로 상수를 만들었는데 다른사람의 풀이를 보니 내가 작성했던 코드 중에서 에러가 발생한 것 같다. 다시 해보니까 잘되더라
    <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">arr</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="n">array</span><span class="p">[</span><span class="n">arrCom</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span><span class="o">...</span><span class="n">arrCom</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="nf">sorted</span><span class="p">()[</span><span class="n">arrCom</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span><span class="p">])</span>
</code></pre></div>    </div>
    <p>그치만 배열 따로 만들어서 추가 해야겠다고 생각했는데 array에서 바로 return은 생각도 못했는데 저렇게도 되는구나 ..</p>
  </li>
</ul>]]></content><author><name>HyeongSub Lim</name></author><category term="Algorithm" /><category term="Algorithm" /><category term="coding test" /><category term="K번째수" /><summary type="html"><![CDATA[[프로그래머스/Swift] K번째수]]></summary></entry><entry><title type="html">[TIL] 내배캠 iOS앱 개발 공부 17일차</title><link href="http://localhost:4000/TIL/til17/" rel="alternate" type="text/html" title="[TIL] 내배캠 iOS앱 개발 공부 17일차" /><published>2024-03-20T00:00:00+09:00</published><updated>2024-03-20T00:00:00+09:00</updated><id>http://localhost:4000/TIL/til17</id><content type="html" xml:base="http://localhost:4000/TIL/til17/"><![CDATA[<h3 id="데일리-스크럼">데일리 스크럼</h3>
<p><img src="/assets/images/categories/til/2024-03-20-til17.png" alt="" /></p>

<h3 id="알고리즘">알고리즘</h3>
<ul>
  <li>어제 문자열 관련해서 고민을 많이 했어서 그런지 한문제를 금방 풀어 두 문제를 풀었다.</li>
  <li>풀이 보기
    <ul>
      <li><a href="https://limlogging.github.io/algorithm/K%EB%B2%88%EC%A7%B8%EC%88%98/" target="_blank">K번째수</a></li>
      <li><a href="https://limlogging.github.io/algorithm/%EB%91%90%EA%B0%9C%EB%BD%91%EC%95%84%EC%84%9C%EB%8D%94%ED%95%98%EA%B8%B0/" target="_blank">두 개 뽑아서 더하기</a></li>
    </ul>
  </li>
</ul>

<h3 id="개인-과제-공부">개인 과제 공부</h3>
<ul>
  <li>델리게이트 패턴에 대해서 알게 되었다.</li>
  <li>뷰와 오브젝트간의 의사소통을 위한 패턴
    <ul>
      <li><a href="https://limlogging.github.io/UIKit/Delegate/" target="_blank">델리게이트 패턴</a></li>
    </ul>
  </li>
</ul>

<h3 id="내일-목표">내일 목표</h3>
<ul>
  <li>알고리즘 문제 풀기</li>
  <li>키워드 하나씩 실습 하기</li>
  <li>과제 풀기</li>
</ul>]]></content><author><name>HyeongSub Lim</name></author><category term="TIL" /><category term="TIL" /><summary type="html"><![CDATA[내배캠 iOS앱 개발 공부 17일차 이야기]]></summary></entry><entry><title type="html">[프로그래머스/Swift] 두 개 뽑아서 더하기</title><link href="http://localhost:4000/algorithm/%EB%91%90%EA%B0%9C%EB%BD%91%EC%95%84%EC%84%9C%EB%8D%94%ED%95%98%EA%B8%B0/" rel="alternate" type="text/html" title="[프로그래머스/Swift] 두 개 뽑아서 더하기" /><published>2024-03-20T00:00:00+09:00</published><updated>2024-03-20T00:00:00+09:00</updated><id>http://localhost:4000/algorithm/%EB%91%90%EA%B0%9C%EB%BD%91%EC%95%84%EC%84%9C%EB%8D%94%ED%95%98%EA%B8%B0</id><content type="html" xml:base="http://localhost:4000/algorithm/%EB%91%90%EA%B0%9C%EB%BD%91%EC%95%84%EC%84%9C%EB%8D%94%ED%95%98%EA%B8%B0/"><![CDATA[<h1 id="문제-설명">문제 설명</h1>
<ul>
  <li>
    <p>정수 배열 numbers가 주어집니다. numbers에서 서로 다른 인덱스에 있는 두 개의 수를 뽑아 더해서 만들 수 있는 모든 수를 배열에 오름차순으로 담아 return 하도록 solution 함수를 완성해주세요.</p>
  </li>
  <li>
    <p><a href="https://school.programmers.co.kr/learn/courses/30/lessons/68644" target="_blank">문제 풀기</a></p>
  </li>
</ul>

<h1 id="제한사항">제한사항</h1>
<ul>
  <li>numbers의 길이는 2 이상 100 이하입니다.
    <ul>
      <li>numbers의 모든 수는 0 이상 100 이하입니다.</li>
    </ul>
  </li>
</ul>

<h1 id="입출력-예">입출력 예</h1>

<table>
  <tbody>
    <tr>
      <td>numbers</td>
      <td>result</td>
    </tr>
    <tr>
      <td>[2,1,3,4,1]</td>
      <td>[2,3,4,5,6,7]</td>
    </tr>
    <tr>
      <td>[5,0,2,7]</td>
      <td>[2,5,7,9,12]</td>
    </tr>
  </tbody>
</table>

<h2 id="입출력-예-1">입출력 예 #1</h2>
<ul>
  <li>2 = 1 + 1 입니다. (1이 numbers에 두 개 있습니다.)</li>
  <li>3 = 2 + 1 입니다.</li>
  <li>4 = 1 + 3 입니다.</li>
  <li>5 = 1 + 4 = 2 + 3 입니다.</li>
  <li>6 = 2 + 4 입니다.</li>
  <li>7 = 3 + 4 입니다.</li>
  <li>따라서 [2,3,4,5,6,7] 을 return 해야 합니다.</li>
</ul>

<h2 id="입출력-예-2">입출력 예 #2</h2>
<ul>
  <li>2 = 0 + 2 입니다.</li>
  <li>5 = 5 + 0 입니다.</li>
  <li>7 = 0 + 7 = 5 + 2 입니다.</li>
  <li>9 = 2 + 7 입니다.</li>
  <li>12 = 5 + 7 입니다.</li>
  <li>따라서 [2,5,7,9,12] 를 return 해야 합니다.</li>
</ul>

<h1 id="나의-풀이">나의 풀이</h1>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">Foundation</span>

<span class="kd">func</span> <span class="nf">solution</span><span class="p">(</span><span class="n">_</span> <span class="nv">numbers</span><span class="p">:[</span><span class="kt">Int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">arr</span><span class="p">:</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
    
    <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span><span class="o">...</span><span class="n">numbers</span><span class="o">.</span><span class="n">count</span> <span class="o">-</span> <span class="mi">2</span> <span class="p">{</span>
        <span class="k">for</span> <span class="n">j</span> <span class="k">in</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">...</span><span class="n">numbers</span><span class="o">.</span><span class="n">count</span> <span class="o">-</span> <span class="mi">1</span><span class="p">{</span>
            <span class="n">arr</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="n">numbers</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">numbers</span><span class="p">[</span><span class="n">j</span><span class="p">])</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="c1">//중복제거 후 정렬 값 리턴</span>
    <span class="k">return</span> <span class="kt">Set</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span><span class="o">.</span><span class="nf">sorted</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div></div>
<h1 id="다른-사람-풀이">다른 사람 풀이</h1>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">Foundation</span>

<span class="kd">func</span> <span class="nf">solution</span><span class="p">(</span><span class="n">_</span> <span class="nv">numbers</span><span class="p">:[</span><span class="kt">Int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">result</span> <span class="o">=</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]()</span>

    <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span> <span class="o">..&lt;</span> <span class="n">numbers</span><span class="o">.</span><span class="n">count</span> <span class="p">{</span>
        <span class="k">for</span> <span class="n">j</span> <span class="k">in</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">..&lt;</span> <span class="n">numbers</span><span class="o">.</span><span class="n">count</span> <span class="p">{</span>
            <span class="k">let</span> <span class="nv">num</span> <span class="o">=</span> <span class="n">numbers</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">numbers</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>
            <span class="k">if</span> <span class="o">!</span><span class="n">result</span><span class="o">.</span><span class="nf">contains</span><span class="p">(</span><span class="n">num</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">result</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">result</span><span class="o">.</span><span class="nf">sorted</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div></div>

<h1 id="의견">의견</h1>
<ul>
  <li>개인과제로 야구게임할때 중복체크하는 부분에 Set을 썼는데 이번에 잊지않고 사용했다!</li>
  <li>다른 사람 풀이도 비슷</li>
</ul>]]></content><author><name>HyeongSub Lim</name></author><category term="Algorithm" /><category term="Algorithm" /><category term="coding test" /><category term="두 개 뽑아서 더하기" /><summary type="html"><![CDATA[[프로그래머스/Swift] 두 개 뽑아서 더하기]]></summary></entry><entry><title type="html">[UIKit] 델리게이트(Delegate) 패턴</title><link href="http://localhost:4000/UIKit/Delegate/" rel="alternate" type="text/html" title="[UIKit] 델리게이트(Delegate) 패턴" /><published>2024-03-20T00:00:00+09:00</published><updated>2024-03-20T00:00:00+09:00</updated><id>http://localhost:4000/UIKit/Delegate</id><content type="html" xml:base="http://localhost:4000/UIKit/Delegate/"><![CDATA[<h1 id="델리게이트delegate-패턴--위임-패턴">델리게이트(Delegate) 패턴 / 위임 패턴</h1>
<ul>
  <li>객체 지향 프로그래밍에서 자주 사용되는 디자인 패턴 중 하나입니다.</li>
  <li>객체 사이의 행동을 분리하고, 특정 객체가 다른 객체의 대리자(delegate) 역할을 수행하여 해당 객체의 동작을 확장하거나 커스터마이징할 수 있도록 합니다.</li>
  <li>델리게이트 패턴은 소프트웨어의 모듈성을 높이고 객체 간의 결합도를 줄여 유지보수와 확장성을 향상시킬 수 있습니다.</li>
  <li>
    <p><strong>애플의 프레임워크에 사용하는 델리게이트 패턴을 위해 다양한 프로토콜이 XXXXDelegate라는 식의 이름으로 정의되어 있습니다.</strong></p>
  </li>
  <li>객체와 객체간의 의사소통을 위함</li>
</ul>

<h1 id="예제-코드">예제 코드</h1>
<ul>
  <li>ViewController와 TextField는 서로 다른 객체입니다.</li>
  <li>TextField를 ViewController위에 올려 놓습니다.
    <ul>
      <li>Object를 View에 올려놓는 행위와 같은 말
        <ul>
          <li>인터페이스 빌더(Interface Builder)에서 UI 요소를 배치한다.</li>
          <li>인터페이스 빌더(Interface Builder)에서 UI를 구성한다.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>View에 올려놓은 TextField의 동작을 View에게 전달하기 위해서는 델리게이트 패턴을 적용해야합니다.</li>
  <li>View 와 TextField(Object)간의 의사소통을 위해서 델리게이트 패턴 사용합니다.</li>
</ul>

<table>
  <thead>
    <tr>
      <th style="text-align: center">ViewController</th>
      <th style="text-align: center">TextFieldObject</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center"><img src="/assets/images/categories/uikit/2024-03-20-DelegateViewController.png" alt="" /></td>
      <td style="text-align: center"><img src="/assets/images/categories/uikit/2024-03-20-DelegateTextFieldObject.png" alt="" /></td>
    </tr>
  </tbody>
</table>

<h2 id="1-인터페이스-구성-요소의-연결">1. 인터페이스 구성 요소의 연결</h2>
<ul>
  <li>textField를 control을 누른 상태로 드래그하여 속성을 연결합니다. 
<img src="/assets/images/categories/uikit/2024-03-20-Delegate1.png" alt="" /></li>
</ul>

<h2 id="2-인터페이스의-델리게이트-설정">2. 인터페이스의 델리게이트 설정</h2>
<ul>
  <li>textField의 대리자를 ViewController로 설정합니다.</li>
  <li>myTextField.delegate = self 추가
    <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span> <span class="c1">//화면 로드</span>
      <span class="n">myTextField</span><span class="o">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="k">self</span> <span class="c1">//추가! TextField의 대리자는 ViewController</span>
  <span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>TextField의 대리자는 self(ViewController)로 설정합니다.</li>
  <li>TextField와 ViewController가 소통이 가능해졌습니다.
    <ul>
      <li>textField의 입력, 수정, 포커스 등 이벤트를 ViewController에서 수신하고 처리할 수 있습니다.</li>
    </ul>
  </li>
  <li>ViewController가 화면이 로드된 후에 텍스트 필드의 델리게이트를 설정하기 위해서 super.viewDidLoad() 아래에 코드를 적습니다.</li>
</ul>

<h2 id="3-델리게이트-프로토콜-채택">3. 델리게이트 프로토콜 채택</h2>
<h3 id="프로토콜-채택-전">프로토콜 채택 전</h3>
<ul>
  <li>코드 입력 창에 text라고 입력하면 textField에 관한 메서드가 보이지 않습니다. 
<img src="/assets/images/categories/uikit/2024-03-20-Delegate2.png" alt="" /></li>
</ul>

<h3 id="프로토콜-채택">프로토콜 채택</h3>
<ul>
  <li>Class 선언 부분의 마지막에 UITextFieldDelegate를 추가합니다.
    <ul>
      <li><strong>델리게이트 패턴을 위해 다양한 프로토콜이 XXXXDelegate라는 식의 이름으로 정의되어 있습니다.</strong></li>
    </ul>
  </li>
  <li><img src="/assets/images/categories/uikit/2024-03-20-Delegate4.png" alt="" /></li>
</ul>

<h3 id="프로토콜-채택-후">프로토콜 채택 후</h3>
<ul>
  <li>코드 입력 창에 text를 입력하면 textField에 관한 메서드가 보입니다.<br />
<img src="/assets/images/categories/uikit/2024-03-20-Delegate3.png" alt="" /></li>
</ul>

<h2 id="4-필요한-프로토콜-메서드를-구현">4. 필요한 프로토콜 메서드를 구현</h2>
<ul>
  <li>필요한 메서드를 추가하여 사용할 수 있습니다.</li>
  <li>원하는 프로토콜 메서드의 기능은 검색 / 실습을 통해 확인해야합니다.</li>
  <li>어떤 글자를 입력 받았는지 확인하는 메서드를 추가하여 테스트하였습니다. 
<img src="/assets/images/categories/uikit/2024-03-20-Delegate5.png" alt="" /></li>
</ul>

<h1 id="마무리">마무리</h1>
<ul>
  <li>델리게이트 패턴은 view와 object간의 데이터를 주고 받는 등 소통을 위해 사용!</li>
</ul>]]></content><author><name>HyeongSub Lim</name></author><category term="UIKit" /><category term="swift" /><category term="iOS" /><category term="Delegate" /><summary type="html"><![CDATA[Delegate - 객체의 대리자 역할]]></summary></entry><entry><title type="html">[내배캠] iOS 앱 개발 입문 - 간단한 카운터 앱 만들기</title><link href="http://localhost:4000/sparta/%EA%B0%84%EB%8B%A8%ED%95%9C%EC%B9%B4%EC%9A%B4%ED%84%B0%EC%95%B1/" rel="alternate" type="text/html" title="[내배캠] iOS 앱 개발 입문 - 간단한 카운터 앱 만들기" /><published>2024-03-19T00:00:00+09:00</published><updated>2024-03-19T00:00:00+09:00</updated><id>http://localhost:4000/sparta/%EA%B0%84%EB%8B%A8%ED%95%9C%EC%B9%B4%EC%9A%B4%ED%84%B0%EC%95%B1</id><content type="html" xml:base="http://localhost:4000/sparta/%EA%B0%84%EB%8B%A8%ED%95%9C%EC%B9%B4%EC%9A%B4%ED%84%B0%EC%95%B1/"><![CDATA[<h1 id="간단한-카운터-앱-만들기">간단한 카운터 앱 만들기</h1>
<ul>
  <li>swift 문법 강의 주차가 끝나고 ios 앱 개발 입문 강의를 들으며 강의에 포함된 간단한 카운터 앱 만들기 과제를 만들었습니다.</li>
</ul>

<h1 id="요구사항">요구사항</h1>
<h2 id="화면">화면</h2>
<p><img src="/assets/images/categories/sparta/2024-03-19-카운터앱.png" alt="카운터앱" /></p>

<h2 id="레이아웃-요구사항">레이아웃 요구사항</h2>
<ul>
  <li>UILabel이 가운데 위치하게 해 주세요.</li>
  <li>UILabel을 기준으로 상단에는 감소 버튼, 아래에는 증가 버튼을 위치시켜 주세요.</li>
  <li>UILabel과 UIButton사이의 간격은 16px로 설정해 주세요.</li>
  <li>AutoLayout을 사용해 주세요.</li>
</ul>

<h2 id="로직-요구사항">로직 요구사항</h2>
<ul>
  <li>count의 시작은 0으로 시작해 주세요.</li>
  <li>감소버튼을 눌렀을 때, -1씩 감소시켜 UILabel에 표시해 주세요.</li>
  <li>증가버튼을 눌렀을 때, +1씩 증가시켜 UILabel에 표시해 주세요.</li>
</ul>

<h1 id="과제-완성">과제 완성</h1>
<h2 id="나의-화면">나의 화면</h2>
<p><img src="/assets/images/categories/sparta/2024-03-19-카운터앱과제완성.png" alt="카운터앱과제완성" /></p>

<h2 id="제약-조건">제약 조건</h2>
<p><img src="/assets/images/categories/sparta/2024-03-19-카운터앱과제제약조건.png" alt="카운터앱과제제약조건" /></p>

<h2 id="나의-코드">나의 코드</h2>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//</span>
<span class="c1">//  ViewController.swift</span>
<span class="c1">//  SimpleCounter</span>
<span class="c1">//</span>
<span class="c1">//  Created by imhs on 3/18/24.</span>
<span class="c1">//</span>

<span class="kd">import</span> <span class="kt">UIKit</span>

<span class="kd">class</span> <span class="kt">ViewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>
    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">counterLabel</span><span class="p">:</span> <span class="kt">UILabel</span><span class="o">!</span>
    
    <span class="k">var</span> <span class="nv">count</span><span class="p">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">0</span>
    
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>
        <span class="n">counterLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="kt">String</span><span class="p">(</span><span class="n">count</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="c1">//감소</span>
    <span class="kd">@IBAction</span> <span class="kd">func</span> <span class="nf">decreaseButtonTapped</span><span class="p">(</span><span class="n">_</span> <span class="nv">sender</span><span class="p">:</span> <span class="kt">Any</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">count</span> <span class="o">-=</span> <span class="mi">1</span>
        <span class="n">counterLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="kt">String</span><span class="p">(</span><span class="n">count</span><span class="p">)</span>
    <span class="p">}</span>
    
    <span class="c1">//증가</span>
    <span class="kd">@IBAction</span> <span class="kd">func</span> <span class="nf">increaseButtonTapped</span><span class="p">(</span><span class="n">_</span> <span class="nv">sender</span><span class="p">:</span> <span class="kt">Any</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="n">counterLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="kt">String</span><span class="p">(</span><span class="n">count</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h1 id="강의-구현-코드">강의 구현 코드</h1>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">UIKit</span>

<span class="kd">class</span> <span class="kt">ViewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>
    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">textLabel</span><span class="p">:</span> <span class="kt">UILabel</span><span class="o">!</span>
    <span class="kd">private</span> <span class="k">var</span> <span class="nv">count</span><span class="p">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">0</span> 

    <span class="c1">// 감소 버튼이 클릭된 경우 </span>
    <span class="kd">@IBAction</span> <span class="kd">func</span> <span class="nf">tappedDecreaseButton</span><span class="p">(</span><span class="n">_</span> <span class="nv">sender</span><span class="p">:</span> <span class="kt">UIButton</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="n">count</span> <span class="o">-=</span> <span class="mi">1</span> <span class="c1">// count를 -1 합니다. </span>
        <span class="k">self</span><span class="o">.</span><span class="nf">refreshTextLabel</span><span class="p">()</span> <span class="c1">// textLabel을 새로고침 합니다. </span>
    <span class="p">}</span>
    
    <span class="c1">// 증가 버튼이 클릭된 경우  </span>
    <span class="kd">@IBAction</span> <span class="kd">func</span> <span class="nf">tappedIncreaseButton</span><span class="p">(</span><span class="n">_</span> <span class="nv">sender</span><span class="p">:</span> <span class="kt">UIButton</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span> <span class="c1">// count를 +1 합니다. </span>
        <span class="k">self</span><span class="o">.</span><span class="nf">refreshTextLabel</span><span class="p">()</span> <span class="c1">// textLabel을 새로고침 합니다. </span>
    <span class="p">}</span>

    <span class="c1">// count값을 self.textLabel의 text에 반영합니다. </span>
    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">refreshTextLabel</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="n">textLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="kt">String</span><span class="p">(</span><span class="k">self</span><span class="o">.</span><span class="n">count</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="c1">// viewDidLoad 생명주기 활용 </span>
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>
        <span class="k">self</span><span class="o">.</span><span class="nf">refreshTextLabel</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="생명주기-활용-">생명주기 활용 ?</h2>
<ul>
  <li>강의 코드에서 생명주기 활용은 ViewController의 생명주기 메서드 중 하나인 viewDidLoad() 메서드를 활용하는 것을 의미</li>
  <li>viewDidLoad() 메서드는 ViewController의 view가 메모리에 로드된 직후 호출, ViewController가 생성된 직후 초기화 작업을 수행할 때 유용</li>
  <li>iewDidLoad() 메서드를 활용하여 textLabel의 초기 값을 설정하는 refreshTextLabel() 메서드를 호출</li>
  <li>생명주기 활용은 ViewController의 뷰가 로드되는 시점에 필요한 초기화 작업을 수행하여 화면을 적절히 설정하는 것을 의미합니다.</li>
</ul>

<p>필요한 작업이 적절하게 배치가 됐는지 생각해보자!</p>]]></content><author><name>HyeongSub Lim</name></author><category term="sparta" /><category term="간단한카운터앱" /><summary type="html"><![CDATA[iOS 앱 개발 입문 - 간단한 카운터 앱 만들기]]></summary></entry><entry><title type="html">Xcode 프로젝트 깃허브(GitHub)에 추가하기</title><link href="http://localhost:4000/git/gitProjectAdd/" rel="alternate" type="text/html" title="Xcode 프로젝트 깃허브(GitHub)에 추가하기" /><published>2024-03-19T00:00:00+09:00</published><updated>2024-03-19T00:00:00+09:00</updated><id>http://localhost:4000/git/gitProjectAdd</id><content type="html" xml:base="http://localhost:4000/git/gitProjectAdd/"><![CDATA[<h1 id="1-원격-저장소-추가">1. 원격 저장소 추가</h1>
<ul>
  <li>GitHub에 새로운 원격 저장소를 생성하고 로컬 저장소에 해당 원격 저장소를 추가합니다.
<img src="/assets/images/categories/git/2024-03-19-gitProjectAdd1.png" alt="" /></li>
</ul>

<h1 id="2-xcode-프로젝트-생성">2. XCode 프로젝트 생성</h1>
<ul>
  <li>Xcode 프로젝트의 이름과 GitHub 레포지토리의 이름이 반드시 같을 필요는 없습니다. 
<img src="/assets/images/categories/git/2024-03-19-gitProjectAdd2.png" alt="" /></li>
</ul>

<h1 id="3-터미널-오픈">3. 터미널 오픈</h1>
<ul>
  <li>프로젝트 폴더에서 우클릭 후 터미널 오픈합니다. 
<img src="/assets/images/categories/git/2024-03-19-gitProjectAdd3.png" alt="" /></li>
</ul>

<h1 id="4-git-init---저장소-초기화">4. git init - 저장소 초기화</h1>
<ul>
  <li>명령어는 새로운 Git 저장소를 초기화하는 데 사용됩니다.</li>
  <li>git init
    <ul>
      <li>해당 명령어로 현재 디렉토리에 새로운 Git 저장소를 만듭니다. 이 저장소에는 프로젝트의 모든 변경 내역을 추적하고 관리할 수 있는 .git 디렉토리가 생성됩니다.
        <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">imhs@imhsui-MacBookPro MyTodoList % git init
</span></code></pre></div>        </div>
        <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">힌트 = : Using 'master' as the name for the initial branch. This default branch name
힌트: is subject to change. To configure the initial branch name to use in all
힌트 : of your new repositories, which will suppress this warning, call:
힌트 :
</span><span class="gp">힌트 : git config -global init.defaultBranch ‹name&gt;</span><span class="w">
</span><span class="go">힌트 : 
힌트 : Names commonly chosen instead of 'master' are 'main', 'trunk' and
힌트 : 'development'. The just-created branch can be renamed via this command:
힌트 :
</span><span class="gp">힌트 : git branch -m &lt;name&gt;</span><span class="w">
</span><span class="go">/users/imhs/Desktop/내배캠 스파르타/실습과제/MyTodoList/.git/ 안의 빈 깃 저 장소를 다시 초기화했습니다 
</span></code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ul>

<h1 id="5-git-add----스테이징-영역에-추가">5. git add . - 스테이징 영역에 추가</h1>
<ul>
  <li>명령어는 Git에서 변경된 모든 파일을 스테이징 영역에 추가하는 역할을 합니다.</li>
  <li>git add .
    <ul>
      <li>현재 디렉토리 및 하위 디렉토리에서 변경된 모든 파일을 찾습니다.</li>
      <li>변경된 파일을 스테이징 영역에 추가합니다. 이는 Git이 해당 파일의 변경 내용을 추적하고, 다음 커밋에 포함시키기 위한 준비 단계입니다.
        <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">imhs@imhsui-MacBookPro MyTodoList % git add . 
</span></code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ul>

<h1 id="6-git-commit--m-커밋메시지---저장소에-기록">6. git commit -m “커밋메시지” - 저장소에 기록</h1>
<ul>
  <li>스테이징 영역에 추가된 파일은 git commit 명령어를 사용하여 커밋할 수 있습니다. 스테이징 영역에 추가된 파일은 이후 커밋에 반영되며, 커밋을 통해 변경 내용이 저장소에 영구적으로 기록됩니다.</li>
  <li>git commit -m “MyTodoList 추가”
    <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">imhs@imhsui-MacBookPro MyTodoList % git commit -m "MyTodoList 추가" 
</span></code></pre></div>    </div>
  </li>
</ul>

<h1 id="7-git-branch--m-main---기본-브랜치-이름-변경">7. git branch -M main - 기본 브랜치 이름 변경</h1>
<ul>
  <li>기본적으로 Git 저장소를 초기화하면 “master”라는 이름의 기본 브랜치가 생성됩니다. 그러나 최근의 표준화 노력과 함께 이를 “main”으로 변경하는 추세가 있습니다.</li>
  <li>git branch -M main 명령어는 현재 작업 중인 브랜치를 “main”으로 변경합니다.</li>
  <li>git branch -M main
    <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">imhs@imhsui-MacBookPro MyTodoList % git commit -m "MyTodoList 추가" 
</span></code></pre></div>    </div>
  </li>
</ul>

<h1 id="8-git-remote-add-origin-저장소url---git-저장소에-원격-저장소-추가">8. git remote add origin 저장소URL - git 저장소에 원격 저장소 추가</h1>
<ul>
  <li>현재 Git 저장소에 origin이라는 이름으로 URL의 원격 저장소를 추가</li>
  <li>git remote add origin https://github.com/limlogging/MyTodoList.git
    <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">imhs@imhsui-MacBookPro MyTodoList % git remote add origin https://github.com/limlogging/MyTodoList.git
</span></code></pre></div>    </div>
  </li>
</ul>

<h1 id="9-git-push--u-origin-main---작업-중인-브랜치를-원격-저장소에-푸시">9. git push -u origin main - 작업 중인 브랜치를 원격 저장소에 푸시</h1>
<ul>
  <li>현재 작업 중인 브랜치를 원격 저장소에 푸시하는 역할을 합니다.</li>
  <li>-u 옵션은 해당 브랜치를 원격 저장소의 기본 브랜치로 설정하는 역할을 합니다.
    <ul>
      <li>이 옵션을 사용하면 이후에는 git push 명령어를 실행할 때 -u 옵션 없이도 동일한 원격 저장소 및 브랜치로 푸시할 수 있습니다.</li>
    </ul>
  </li>
  <li>git push -u origin main
    <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">imhs@imhsui-MacBookPro MyTodoList % git push -u origin main
</span></code></pre></div>    </div>
  </li>
</ul>

<h1 id="10-깃허브-확인">10. 깃허브 확인</h1>
<ul>
  <li>main 브랜치가 default로 생기고 commit 메시지도 확인할 수 있습니다. 
<img src="/assets/images/categories/git/2024-03-19-gitProjectAdd4.png" alt="" /></li>
</ul>

<h1 id="11-브랜치-새로-만들어서-작업">11. 브랜치 새로 만들어서 작업</h1>
<ul>
  <li>git branch로 현재 브랜치를 확인합니다.</li>
</ul>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">imhs@imhsui-MacBookPro MyTodoList % git branch
* main
</span></code></pre></div></div>

<ul>
  <li>dev 브랜치를 만들고 생성된 브랜치로 이동합니다.</li>
</ul>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">imhs@imhsui-MacBookPro MyTodoList % git checkout -b dev 
</span></code></pre></div></div>

<ul>
  <li>브랜치를 확인합니다.</li>
</ul>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">imhs@imhsui-MacBookPro MyTodoList % git branch 
* dev
  main
</span></code></pre></div></div>

<ul>
  <li>작업 후 커밋합니다.</li>
</ul>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">imhs@imhsui-MacBookPro MyTodoList % git add .
imhs@imhsui-MacBookPro MyTodoList % git commit -m "기능추가" 
imhs@imhsui-MacBookPro MyTodoList % git push origin dev
</span></code></pre></div></div>]]></content><author><name>HyeongSub Lim</name></author><category term="git" /><category term="git" /><category term="github" /><category term="xcode" /><category term="add" /><category term="commit" /><category term="push" /><summary type="html"><![CDATA[Xcode 프로젝트 깃허브(GitHub)에 추가하기]]></summary></entry><entry><title type="html">[프로그래머스/Swift] 문자열 내 마음대로 정렬하기</title><link href="http://localhost:4000/algorithm/%EB%AC%B8%EC%9E%90%EC%97%B4%EB%82%B4%EB%A7%88%EC%9D%8C%EB%8C%80%EB%A1%9C%EC%A0%95%EB%A0%AC%ED%95%98%EA%B8%B0/" rel="alternate" type="text/html" title="[프로그래머스/Swift] 문자열 내 마음대로 정렬하기" /><published>2024-03-19T00:00:00+09:00</published><updated>2024-03-19T00:00:00+09:00</updated><id>http://localhost:4000/algorithm/%EB%AC%B8%EC%9E%90%EC%97%B4%EB%82%B4%EB%A7%88%EC%9D%8C%EB%8C%80%EB%A1%9C%EC%A0%95%EB%A0%AC%ED%95%98%EA%B8%B0</id><content type="html" xml:base="http://localhost:4000/algorithm/%EB%AC%B8%EC%9E%90%EC%97%B4%EB%82%B4%EB%A7%88%EC%9D%8C%EB%8C%80%EB%A1%9C%EC%A0%95%EB%A0%AC%ED%95%98%EA%B8%B0/"><![CDATA[<h1 id="문제-설명">문제 설명</h1>
<ul>
  <li>
    <p>문자열로 구성된 리스트 strings와, 정수 n이 주어졌을 때, 각 문자열의 인덱스 n번째 글자를 기준으로 오름차순 정렬하려 합니다. 예를 들어 strings가 [“sun”, “bed”, “car”]이고 n이 1이면 각 단어의 인덱스 1의 문자 “u”, “e”, “a”로 strings를 정렬합니다.</p>
  </li>
  <li>
    <p><a href="https://school.programmers.co.kr/learn/courses/30/lessons/12915" target="_blank">문제 풀기</a></p>
  </li>
</ul>

<h1 id="제한사항">제한사항</h1>
<ul>
  <li>strings는 길이 1 이상, 50이하인 배열입니다.</li>
  <li>strings의 원소는 소문자 알파벳으로 이루어져 있습니다.</li>
  <li>strings의 원소는 길이 1 이상, 100이하인 문자열입니다.</li>
  <li>모든 strings의 원소의 길이는 n보다 큽니다.</li>
  <li>인덱스 1의 문자가 같은 문자열이 여럿 일 경우, 사전순으로 앞선 문자열이 앞쪽에 위치합니다.</li>
</ul>

<h1 id="입출력-예">입출력 예</h1>

<table>
  <tbody>
    <tr>
      <td>strings</td>
      <td>n</td>
      <td>return</td>
    </tr>
    <tr>
      <td>[“sun”, “bed”, “car”]</td>
      <td>1</td>
      <td>[“car”, “bed”, “sun”]</td>
    </tr>
    <tr>
      <td>[“abce”, “abcd”, “cdx”]</td>
      <td>2</td>
      <td>[“abcd”, “abce”, “cdx”]</td>
    </tr>
  </tbody>
</table>

<h2 id="입출력-예-1">입출력 예 #1</h2>
<ul>
  <li>“sun”, “bed”, “car”의 1번째 인덱스 값은 각각 “u”, “e”, “a” 입니다. 이를 기준으로 strings를 정렬하면 [“car”, “bed”, “sun”] 입니다.</li>
</ul>

<h2 id="입출력-예-2">입출력 예 #2</h2>
<ul>
  <li>“abce”와 “abcd”, “cdx”의 2번째 인덱스 값은 “c”, “c”, “x”입니다. 따라서 정렬 후에는 “cdx”가 가장 뒤에 위치합니다. “abce”와 “abcd”는 사전순으로 정렬하면 “abcd”가 우선하므로, 답은 [“abcd”, “abce”, “cdx”] 입니다.</li>
</ul>

<h1 id="나의-풀이">나의 풀이</h1>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">solution</span><span class="p">(</span><span class="n">_</span> <span class="nv">strings</span><span class="p">:[</span><span class="kt">String</span><span class="p">],</span> <span class="n">_</span> <span class="nv">n</span><span class="p">:</span><span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">String</span><span class="p">]</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">arr</span> <span class="o">=</span> <span class="n">strings</span><span class="o">.</span><span class="n">sorted</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">ch1</span> <span class="o">=</span> <span class="nv">$0</span><span class="p">[</span><span class="nv">$0</span><span class="o">.</span><span class="nf">index</span><span class="p">(</span><span class="nv">$0</span><span class="o">.</span><span class="n">startIndex</span><span class="p">,</span> <span class="nv">offsetBy</span><span class="p">:</span> <span class="n">n</span><span class="p">)]</span>
        <span class="k">let</span> <span class="nv">ch2</span> <span class="o">=</span> <span class="nv">$1</span><span class="p">[</span><span class="nv">$1</span><span class="o">.</span><span class="nf">index</span><span class="p">(</span><span class="nv">$1</span><span class="o">.</span><span class="n">startIndex</span><span class="p">,</span> <span class="nv">offsetBy</span><span class="p">:</span> <span class="n">n</span><span class="p">)]</span>
        
        <span class="c1">//문자가 같으면 문자열비교</span>
        <span class="k">if</span> <span class="n">ch1</span> <span class="o">==</span> <span class="n">ch2</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nv">$0</span> <span class="o">&lt;</span> <span class="nv">$1</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">return</span> <span class="n">ch1</span> <span class="o">&lt;</span> <span class="n">ch2</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="k">return</span> <span class="n">arr</span>
<span class="p">}</span>
</code></pre></div></div>
<h1 id="다른-사람-풀이">다른 사람 풀이</h1>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">solution</span><span class="p">(</span><span class="n">_</span> <span class="nv">strings</span><span class="p">:[</span><span class="kt">String</span><span class="p">],</span> <span class="n">_</span> <span class="nv">n</span><span class="p">:</span><span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">String</span><span class="p">]</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">strings</span><span class="o">.</span><span class="n">sorted</span><span class="p">{</span>  <span class="kt">Array</span><span class="p">(</span><span class="nv">$0</span><span class="p">)[</span><span class="n">n</span><span class="p">]</span> <span class="o">==</span> <span class="kt">Array</span><span class="p">(</span><span class="nv">$1</span><span class="p">)[</span><span class="n">n</span><span class="p">]</span> <span class="p">?</span> <span class="nv">$0</span> <span class="o">&lt;</span> <span class="nv">$1</span> <span class="p">:</span>  <span class="kt">Array</span><span class="p">(</span><span class="nv">$0</span><span class="p">)[</span><span class="n">n</span><span class="p">]</span> <span class="o">&lt;</span> <span class="kt">Array</span><span class="p">(</span><span class="nv">$1</span><span class="p">)[</span><span class="n">n</span><span class="p">]</span> <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h1 id="의견">의견</h1>
<ul>
  <li>알고리즘 풀면서 가장 오래걸린 문제였고 어려웠다.
    <ol>
      <li>문제를 확인하고 입력받은 인덱스부터 마지막까지의 문자를 배열에 만들고 기존배열에서 contains를 통해 원래 문자열을 찾아서 다시 배열에 저장하고 그 배열을 리턴하는 것으로 생각했다.</li>
      <li>딕셔너리를 만들어 key에 원래 문자열, value에 잘려진 문자열을 저장하고 value값으로 정렬 후 key값을 새로 배열에 담아 출력했다. 일부 테스트는 통과했는데 문자가 중복되는 경우 문자열 sort를 해줘야하는데 거기서 매끄럽지 못했다.</li>
      <li>sort를 계속 하다가 sorted 클로저에서 직접 조건을 추가하고 리턴해보기로 했다. index의 문자를 구하고 테스트 했는데 또 일부는 맞고 일부는 틀린 실패가 떴다.
        <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//수정 전 </span>
<span class="k">let</span> <span class="nv">ch1</span> <span class="o">=</span> <span class="nv">$0</span><span class="o">.</span><span class="nf">index</span><span class="p">(</span><span class="nv">$0</span><span class="o">.</span><span class="n">startIndex</span><span class="p">,</span> <span class="nv">offsetBy</span><span class="p">:</span> <span class="n">n</span><span class="p">)</span>
<span class="k">let</span> <span class="nv">ch2</span> <span class="o">=</span> <span class="nv">$1</span><span class="o">.</span><span class="nf">index</span><span class="p">(</span><span class="nv">$1</span><span class="o">.</span><span class="n">startIndex</span><span class="p">,</span> <span class="nv">offsetBy</span><span class="p">:</span> <span class="n">n</span><span class="p">)</span>
<span class="c1">// 수정 후</span>
<span class="k">let</span> <span class="nv">ch1</span> <span class="o">=</span> <span class="nv">$0</span><span class="p">[</span><span class="nv">$0</span><span class="o">.</span><span class="nf">index</span><span class="p">(</span><span class="nv">$0</span><span class="o">.</span><span class="n">startIndex</span><span class="p">,</span> <span class="nv">offsetBy</span><span class="p">:</span> <span class="n">n</span><span class="p">)]</span>
<span class="k">let</span> <span class="nv">ch2</span> <span class="o">=</span> <span class="nv">$1</span><span class="p">[</span><span class="nv">$1</span><span class="o">.</span><span class="nf">index</span><span class="p">(</span><span class="nv">$1</span><span class="o">.</span><span class="n">startIndex</span><span class="p">,</span> <span class="nv">offsetBy</span><span class="p">:</span> <span class="n">n</span><span class="p">)]</span>
</code></pre></div>        </div>
        <p>다시 확인했는데 수정 전 코드로하면 문자가 출력되는게 아니라 Index(_rawBits: 65799) 이런식으로 String.index타입으로 출력이 되었다. 
스위프트에서 문자열에 정수 인덱스 사용이 불가능 하다는 것을 알게되었다 !</p>
      </li>
    </ol>
  </li>
  <li><strong>쉽게 쉽게 푸는 다른 사람들의 풀이를 보면서 오늘도 존경심을 가진다.</strong></li>
</ul>]]></content><author><name>HyeongSub Lim</name></author><category term="Algorithm" /><category term="Algorithm" /><category term="coding test" /><category term="문자열 내 마음대로 정렬하기" /><summary type="html"><![CDATA[[프로그래머스/Swift] 문자열 내 마음대로 정렬하기]]></summary></entry><entry><title type="html">[TIL] 내배캠 iOS앱 개발 공부 16일차</title><link href="http://localhost:4000/TIL/til16/" rel="alternate" type="text/html" title="[TIL] 내배캠 iOS앱 개발 공부 16일차" /><published>2024-03-19T00:00:00+09:00</published><updated>2024-03-19T00:00:00+09:00</updated><id>http://localhost:4000/TIL/til16</id><content type="html" xml:base="http://localhost:4000/TIL/til16/"><![CDATA[<h3 id="데일리-스크럼">데일리 스크럼</h3>
<p><img src="/assets/images/categories/til/2024-03-19-til16.png" alt="" /></p>

<h3 id="알고리즘">알고리즘</h3>
<ul>
  <li>오늘 47번 문제를 푸는데 가장 오래 걸렸다. 문자열 관련 처리, swift에서 제공하는 함수에 아직도 익숙하지 못한 것 같다.</li>
  <li>문자열 자르고 배열 만들어 추가하고… 갖은 방법을 동원하다가 sorted 클로저로 풀 수 있었다.</li>
  <li>풀이 보기
    <ul>
      <li><a href="https://limlogging.github.io/algorithm/%EB%AC%B8%EC%9E%90%EC%97%B4%EB%82%B4%EB%A7%88%EC%9D%8C%EB%8C%80%EB%A1%9C%EC%A0%95%EB%A0%AC%ED%95%98%EA%B8%B0/" target="_blank">문자열 내 마음대로 정렬하기</a></li>
    </ul>
  </li>
</ul>

<h3 id="앱-개발-입문-강의">앱 개발 입문 강의</h3>
<ul>
  <li>앱 개발 입문강의를 완강하고 간단한 카운터 앱 만들기를 완성했다.</li>
  <li>아직 생명 주기를 활용한 코딩은 어려운 것 같다.</li>
  <li>과제 확인
    <ul>
      <li><a href="https://limlogging.github.io/sparta/%EA%B0%84%EB%8B%A8%ED%95%9C%EC%B9%B4%EC%9A%B4%ED%84%B0%EC%95%B1/" target="_blank">간단한 카운터 앱 만들기</a></li>
    </ul>
  </li>
</ul>

<h3 id="개인-과제">개인 과제</h3>
<ul>
  <li>개인 과제에서 필요한 기능을 확인했다.</li>
  <li>버튼을 누르면 text 입력이 가능하고 table View에도 추가가 되었다.</li>
  <li>라이브러리에서 버튼, 테이블 뷰를 가져와 스토리보드 올려놓았는데 이후 로직이 조금 막막했다. 온보딩에서 한 화면 이동 등의 내용이랑은 달랐다.</li>
  <li>과제에서 제시한 키워드를 바탕으로 내일은 하나씩 실습해봐야겠다.</li>
</ul>

<h3 id="내일-목표">내일 목표</h3>
<ul>
  <li>알고리즘 문제 풀기</li>
  <li>키워드 하나씩 실습 하기</li>
  <li>과제 풀기</li>
</ul>]]></content><author><name>HyeongSub Lim</name></author><category term="TIL" /><category term="TIL" /><summary type="html"><![CDATA[내배캠 iOS앱 개발 공부 16일차 이야기]]></summary></entry><entry><title type="html">[UIKit] UIView - 가장 기본적인 뷰</title><link href="http://localhost:4000/UIKit/UIView/" rel="alternate" type="text/html" title="[UIKit] UIView - 가장 기본적인 뷰" /><published>2024-03-18T00:00:00+09:00</published><updated>2024-03-18T00:00:00+09:00</updated><id>http://localhost:4000/UIKit/UIView</id><content type="html" xml:base="http://localhost:4000/UIKit/UIView/"><![CDATA[<h1 id="uiview">UIView</h1>
<ul>
  <li>iOS 및 macOS 애플리케이션에서 사용자 인터페이스를 구성하는 데 사용되는 기본적인 뷰(위젯)입니다.</li>
  <li>UIView는 화면에 무엇인가를 그리는 데 사용되며, 많은 UI 요소들이 UIView의 하위 클래스로 구현됩니다.</li>
</ul>

<h2 id="특징">특징</h2>
<ul>
  <li>컨테이너 역할
    <ul>
      <li>다른 뷰 및 UI 요소들을 포함하고 배치하는 데 사용됩니다. 즉, 여러 개의 서브뷰를 가질 수 있으며, 이를 통해 복잡한 사용자 인터페이스를 구성할 수 있습니다.</li>
    </ul>
  </li>
  <li>그리기 및 렌더링
    <ul>
      <li>UIView는 그리기와 렌더링을 담당합니다. 이를 통해 배경색, 텍스트, 이미지 등을 그리고 사용자의 입력에 따라 화면에 업데이트할 수 있습니다.</li>
    </ul>
  </li>
  <li>사용자 상호 작용
    <ul>
      <li>UIView는 사용자의 터치 이벤트를 감지하고 이에 대한 응답을 처리할 수 있습니다. 이를 통해 사용자와의 상호 작용을 구현할 수 있습니다.</li>
    </ul>
  </li>
  <li>애니메이션
    <ul>
      <li>UIView는 애니메이션을 사용하여 요소들을 부드럽게 이동하거나 변경할 수 있습니다. 이를 통해 인터페이스의 시각적 효과를 개선할 수 있습니다.</li>
    </ul>
  </li>
  <li>레이아웃 및 제약조건
    <ul>
      <li>UIView는 자신과 서브뷰의 레이아웃을 관리하고, 제약조건(Constraints)을 사용하여 인터페이스의 크기 및 위치를 지정할 수 있습니다.</li>
    </ul>
  </li>
  <li>안내 역할
    <ul>
      <li>사용자에게 정보를 표시하고 안내하는 데 사용될 수 있습니다. 예를 들어, UILabel, UIButton 등의 요소들이 UIView의 하위 클래스입니다.</li>
    </ul>
  </li>
</ul>

<h2 id="사용">사용</h2>
<ul>
  <li>iOS 및 macOS 애플리케이션에서 사용되는 가장 기본적인 뷰 요소이며, 모든 사용자 인터페이스 요소들은 UIView의 하위 클래스로 구현됩니다.</li>
</ul>]]></content><author><name>HyeongSub Lim</name></author><category term="UIKit" /><category term="swift" /><category term="iOS" /><category term="UIView" /><summary type="html"><![CDATA[UIView - 모든 사용자 인터페이스 요소들은 UIView의 하위 클래스로 구현]]></summary></entry></feed>