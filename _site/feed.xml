<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-03-02T05:47:25+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">limlogging Devlog</title><author><name>HyeongSub Lim</name></author><entry><title type="html">Mac에서 github blog 만들기 - 2</title><link href="http://localhost:4000/GitHubBlog/start2/" rel="alternate" type="text/html" title="Mac에서 github blog 만들기 - 2" /><published>2024-03-02T00:00:00+09:00</published><updated>2024-03-02T00:00:00+09:00</updated><id>http://localhost:4000/GitHubBlog/blogstart2</id><content type="html" xml:base="http://localhost:4000/GitHubBlog/start2/"><![CDATA[<p>1편에 이어 Ruby, Jekyll, bundler 설치, 테마를 다운로드 받아 로컬환경에서 실행하는 방법입니다.</p>

<h1 id="1-homebrew-설치">1. Homebrew 설치</h1>
<p>Homebrew는 macOS 및 Linux 운영 체제를 위한 오픈 소스 패키지 관리자입니다. 이를 통해 사용자는 명령줄 인터페이스를 통해 손쉽게 소프트웨어를 설치, 업데이트, 관리할 수 있습니다.
일반적으로 Homebrew를 사용하면 다음과 같은 작업을 수행할 수 있습니다. 
<br /><a href="https://brew.sh/" target="_blank">Homebrew Homepage 바로가기</a></p>

<h1 id="2-homebrew-update">2. Homebrew Update</h1>
<p>brew update 명령어를 통해 Homebrew 패키지 관리자의 패키지 목록을 최신 상태로 업데이트합니다.</p>
<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">imhs@imhsui-MacBookPro ~ % brew update
</span></code></pre></div></div>
<p>Homebrew를 사용하여 패키지를 설치하기 전에 항상 이 명령을 실행하여 최신 버전의 패키지 목록을 가져와야 합니다. 이를 통해 최신 버전의 패키지를 사용할 수 있고, 패키지 관련 문제를 방지할 수 있습니다.</p>

<h1 id="3-ruby-버전관리도구-및-build-설치">3. Ruby 버전관리도구 및 build 설치</h1>
<p>brew install rbenv ruby-build 명령으로 rbenv와 ruby-build라는 두 가지 패키지를 Homebrew를 통해 설치합니다.</p>
<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">imhs@imhsui-MacBookPro ~ % brew install rbenv ruby-build
</span></code></pre></div></div>
<ul>
  <li>rbenv는 Ruby 버전 관리 도구로, 여러 버전의 Ruby를 시스템에 설치하고 각 프로젝트에 필요한 버전을 선택할 수 있게 해줍니다. 이를 통해 서로 다른 프로젝트에서 다른 Ruby 버전을 사용할 수 있습니다.</li>
  <li>ruby-build는 Ruby 버전을 컴파일하고 설치하는 데 사용되는 스크립트입니다. rbenv와 함께 사용되어 rbenv로 관리되는 Ruby 버전을 설치할 수 있도록 돕습니다.
이 명령을 사용하여 rbenv와 ruby-build를 설치하면 Ruby 개발 환경을 설정하는 데 필요한 도구를 간편하게 설치할 수 있습니다.</li>
</ul>

<h1 id="4-rbenv-설치-및-환경-설정">4. rbenv 설치 및 환경 설정</h1>
<p>rbenv versions 명령어로 설치된 버전을 확인합니다.</p>
<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">imhs@imhsui-MacBookPro ~ % rbenv versions
system
</span></code></pre></div></div>
<p>system이라고 표시되는 경우, 이는 현재 시스템에 기본적으로 설치된 Ruby 버전을 나타냅니다.</p>

<p>rbenv install -l 명령어를 통하여 설치할 수 있는 Ruby 버전 목록을 확인합니다.</p>
<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">imhs@imhsui-MacBookPro ~ % rbenv install -l
3.0.6
3.1.4
3.2.3
3.3.0
jruby-9.4.6.0
mruby-3.3.0
picoruby-3.0.0
truffleruby-23.1.2
truffleruby+graalvm-23.1.2

Only latest stable releases for each Ruby implementation are shown.
Use 'rbenv install --list-all' to show all local versions.
</span></code></pre></div></div>
<p>저는 최신버전인 3.3.0 버전을 설치하였습니다.</p>
<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">imhs@imhsui-MacBookPro ~ % rbenv install 3.3.0
</span></code></pre></div></div>
<p>다시 rbenv version을 확인해봅니다.</p>
<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">imhs@imhsui-MacBookPro ~ % rbenv versions
* system
  3.3.0
</span></code></pre></div></div>
<p>* 표시는 현재 활성화(선택된) Ruby 버전을 나타냅니다. 
설치된 버전으로 변경하기 위해 아래 명령어를 입력합니다.</p>
<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">imhs@imhsui-MacBookPro ~ % rbenv global 3.3.0
imhs@imhsui-MacBookPro ~ % rbenv versions
  system
* 3.3.0 (set by /Users/imhs/. rbenv/version)
</span></code></pre></div></div>
<p>terminal 콘솔 창 상단에 zsh 셸을 확인하고 zsh 셸 환경을 설정합니다.</p>
<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">imhs@imhsui-MacBookPro ~ % vim ~/.zshrc
</span></code></pre></div></div>
<p>파일에 아래 내용을 추가합니다.</p>
<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">[[ -d ~/.rbenv  ]] &amp;&amp; \
</span><span class="gp">  export PATH=$</span><span class="o">{</span>HOME<span class="o">}</span>/.rbenv/bin:<span class="k">${</span><span class="nv">PATH</span><span class="k">}</span> <span class="o">&amp;&amp;</span> <span class="se">\</span>
<span class="gp">  eval "$</span><span class="o">(</span>rbenv init -<span class="o">)</span><span class="s2">"
</span></code></pre></div></div>

<p>수정된 내용을 적용하기 위하여 아래 명령어를 입력합니다.</p>
<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">imhs@imhsui-MacBookPro ~ % source ~/.zshrc
</span></code></pre></div></div>

<p>아래 명령어를 통하여 시스템에 Bundler를 설치하여 Ruby 프로젝트의 의존성을 관리할 수 있도록 합니다.</p>
<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">imhs@imhsui-MacBookPro ~ % gem install bundler
</span></code></pre></div></div>
<ul>
  <li>gem: RubyGems는 Ruby 패키지 관리자입니다. RubyGems를 사용하면 Ruby 프로그래밍 언어로 작성된 소프트웨어 패키지를 설치, 관리 및 배포할 수 있습니다. gem 명령어는 RubyGems의 명령줄 인터페이스를 제공하며, 패키지의 설치, 업데이트, 삭제 등 다양한 작업을 수행할 수 있습니다.</li>
  <li>install: gem install은 RubyGems를 사용하여 패키지를 시스템에 설치하는 명령어입니다. 이를 통해 지정된 패키지를 로컬 시스템에 다운로드하고 설치할 수 있습니다.</li>
  <li>bundler: Bundler는 Ruby 프로젝트의 의존성을 관리하는 도구입니다. Bundler를 사용하면 프로젝트에 필요한 라이브러리 및 gem을 쉽게 관리할 수 있습니다.</li>
</ul>

<h1 id="5-jekyll과-bundler를-시스템에-설치">5. Jekyll과 Bundler를 시스템에 설치</h1>
<p>아래 명령어를 사용하여 Jekyll과 Bundler를 시스템에 설치합니다.</p>
<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">imhs@imhsui-MacBookPro ~ % gem install jekyll bundler
</span></code></pre></div></div>
<p>jekyll 버전을 확인합니다.</p>
<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">imhs@imhsui-MacBookPro ~ % jekyll -v
jekyll 4.3.3
</span></code></pre></div></div>

<h1 id="6-jekyll-테마-다운로드-및-github-repository에-반영">6. jekyll 테마 다운로드 및 github repository에 반영</h1>
<p>GitHub Pages에서 지원하는 인기있는 jekyll 테마 중 Minimal Mistakes를 다운로드 합니다. 
<br /><a href="https://github.com/mmistakes/minimal-mistakes/" target="_blank">minimal-mistakes Download 바로가기</a>
<img src="/assets/images/categories/githubblog/%202024-03-02-minimal-mistakes-download.png" alt="" /></p>

<p>다운로드 받은 파일을 git clone을 통하여 복사한 README.md 파일이 있는 폴더에 덮어씁니다. 
<img src="/assets/images/categories/githubblog/%202024-03-02-minimal-mistakes-copy.png" alt="" /></p>

<p>복사한 폴더에서 터미널 창을 열어 깃허브 저장소로 업로드 합니다.</p>
<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">imhs@imhsui-MacBookPro limlogging.github.io % git add.
imhs@imhsui-MacBookPro limlogging.github.io % git commit -m "테마 업로드"
imhs@imhsui-MacBookPro limlogging.github.io % git push
</span></code></pre></div></div>

<h1 id="7-blog에-접속해-확인합니다">7. blog에 접속해 확인합니다.</h1>
<p>https://깃허브ID.github.io에 접속하면, 테마가 적용된 블로그를 확인할 수 있습니다.</p>]]></content><author><name>HyeongSub Lim</name></author><category term="GitHubBlog" /><category term="GitHub" /><category term="blog" /><category term="GitHub blog" /><summary type="html"><![CDATA[github blog 만들기]]></summary></entry><entry><title type="html">Mac에서 github blog 만들기 - 1</title><link href="http://localhost:4000/GitHubBlog/start1/" rel="alternate" type="text/html" title="Mac에서 github blog 만들기 - 1" /><published>2024-03-01T00:00:00+09:00</published><updated>2024-03-01T00:00:00+09:00</updated><id>http://localhost:4000/GitHubBlog/blogstart</id><content type="html" xml:base="http://localhost:4000/GitHubBlog/start1/"><![CDATA[<h1 id="개발자-블로그-">개발자 블로그 ???</h1>

<p>요즘 개발자들은 취업, 포트폴리오, TIL(Today I Learned) 등 각자의 이유로 블로그를 운영하고 있습니다. 저도 부트캠프를 계기로 개발자 블로그를 운영해보기로 하였습니다.</p>

<p>네이버 블로그, 티스토리, 벨로그, 깃허브 블로그 등 다양한 플랫폼 중 깃허브 블로그를 선택하였습니다. <font style="text-decoration:line-through">(벨로그에 테스트로 글 두번 썼는데 제 마음에 들지 않았습니다.)</font></p>

<h1 id="github-블로그-선택-이유">GitHub 블로그 선택 이유</h1>
<p>GitHub 블로그 장점은 찾아보니 3가지 정도로 구분할 수 있는 것 같습니다.</p>
<ol>
  <li>
    <p>마음대로 꾸밀 수 있다. 
<br />블로그의 테마나 레이아웃부터 폰트, 컬러 등 본인의 취향껏 변경할 수 있습니다. 뿐만 아니라 다양한 기능도 추가할 수 있습니다.</p>
  </li>
  <li>
    <p>GitHub 연동
<br />GitHub 블로그를 잘 가꾸는 것도 하나의 좋은 포트폴리오가 될 수 있습니다.</p>
  </li>
  <li>
    <p>광고 추가
<br />블로그에 <strong><a href="https://www.google.com/adsense/start/" target="_blank">Google AdSense</a></strong>를 링크하여 광고 수익을 기대할 수 있습니다.</p>
  </li>
</ol>

<p>저는 GitHub 사용 경험이 없어 Git, GitHub와 친해지기 위해 GitHub 블로그를 선택하였습니다.</p>

<h1 id="github-블로그-만들기-시작">GitHub 블로그 만들기 시작</h1>
<h2 id="1-깃-설치하기">1. 깃 설치하기</h2>
<p>블로그를 작성하게될 줄 모르고 설치 방법은 준비하지 못했으나 구글 검색을 통하여 충분히 설치하실 수 있으실겁니다. 
<br /><a href="https://git-scm.com/downloads" target="_blank">Git Download 바로가기</a></p>

<h2 id="2-깃허브-회원가입">2. 깃허브 회원가입</h2>
<p><a href="https://github.com/" target="_blank">GitHub Homepage 바로가기</a></p>

<h2 id="3-깃허브-repository-생성">3. 깃허브 Repository 생성</h2>
<p>왼쪽 Top Repositories에서 New 버튼을 선택합니다. 
Repositories name은 꼭 “GitHub계정명.github.io”로 지정해야 합니다. GitHub Pages의 규칙 중 하나이며, 이 형식을 따르지 않으면 GitHub가 해당 저장소를 정적 사이트로 호스팅하지 않습니다.
<img src="/assets/images/categories/githubblog/GitHubBlogNewRepository.png" alt="" /></p>

<h2 id="4-git-clone-하기">4. Git clone 하기</h2>
<p>만들어진 Repository는 블로그를 만드는데 필요한 코드가 관리되는 곳입니다. Repository 생성 시 README.md 파일만 생성하여 저장소에 README.md 파일만 있습니다.</p>

<p>로컬PC에서 블로그를 작성하고 GitHub 저장소에 등록하여 블로그를 작성하게 됩니다.</p>

<p>그전에 저장소에 있는 README.md 파일을 로컬PC로 복사하도록 하겠습니다. 깃허브 Repository에 있는 파일을 내 로컬PC로 복사하는 작업을 clone이라고 합니다.</p>

<p>로컬PC에서 GitHub 블로그를 작성할 폴더를 만듭니다. 
저는 바탕화면에 githubBlog 폴더를 만들었습니다.<br />
<img src="/assets/images/categories/githubblog/desktopGitHubBlogDirectoryCreate.png" alt="" /></p>

<p>만들어진 폴더를 우클릭하여 폴더에서 새로운 터미널 열기를 실행합니다.
<img src="/assets/images/categories/githubblog/GitHubBlogDirectoryTerminalOpen.png" alt="" /></p>

<p>명령어로 git 폴더를 만들고 git 경로로 이동합니다. git 경로에서 repository에 있는 파일을 내PC로 복사하기 위해 git clone 깃주소를 입력합니다. 깃 주소는 아래 사진에서 확인하실 수 있습니다. 
<img src="/assets/images/categories/githubblog/GitHubBlogGitClone.png" alt="" />
<a href="/assets/images/categories/githubblog/GitHubBlogGitCloneUrl.png"></a></p>

<p>git clone 명령어를 통하여 README.md 파일이 로컬PC에 복사된 것을 확인할 수 있습니다. 
<img src="/assets/images/categories/githubblog/GitHubBlogGitCloneSuccess.png" alt="" /></p>

<h2 id="5-로컬pc에-새로운-파일-만들고-git-repository에-등록해보기">5. 로컬PC에 새로운 파일 만들고 Git Repository에 등록해보기</h2>
<p>Visual Studio Code 프로그램으로 GitHub.io 폴더를 열고 index.html 파일을 생성합니다. 
캡쳐는 HelloWorld.html로 만들었지만 index.html로 만드시면 저장소에 등록 후 페이지를 확인 할 수 있습니다. (https://깃허브ID.github.io/index.html)
<img src="/assets/images/categories/githubblog/GitHubBlogCreateFile.png" alt="" /></p>

<ol>
  <li>변경사항 저장 
새로 만든 html 파일을 저장하고 변경된 모든 내용을 저장하기위해 git add . 명령어를 입력합니다.
    <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">imhs@imhsui-MacBookPro limlogging.github.io % git add . 
</span></code></pre></div>    </div>
  </li>
  <li>변경사항 확정 
git commit -m “변경사항 입력”
<code class="language-plaintext highlighter-rouge">commit</code>은 변경사항을 확정하는 것으로 변경사항에 대한 커멘트를 남겨(<code class="language-plaintext highlighter-rouge">-m "메시지"</code>) 나중에 무엇때문에 변경사항이 발생했는지 보기 쉽게 해줍니다.
    <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">imhs@imhsui-MacBookPro limlogging.github.io % git commit -m "파일 추가" 
</span></code></pre></div>    </div>
  </li>
  <li>GitHub 저장소에 업로드 
git push 명령어를 통해 저장소에 업로드 합니다.
    <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">imhs@imhsui-MacBookPro limlogging.github.io % git push 
</span></code></pre></div>    </div>
  </li>
</ol>

<h1 id="commit-push-시-에러-관련">commit, push 시 에러 관련</h1>
<p class="notice--warning"><strong>Warning</strong> 저는 git을 꽤 오래전에 설치하여 방치된 상태였습니다. 때문에 이메일 설정을 변경해야했고 깃허브 key 에러가 발생하였습니다. 
같은 에러가 발생하신다면 제가 본 블로그를 공유드릴테니 참고해보시기 바랍니다. 
<br /><a href="https://codedosa.com/1856" target="_blank">git commit 후 author, email을 수정하는 방법</a>
<br /><a href="https://medium.com/@su_bak/git-github-com-permission-denied-publickey-%EC%97%90%EB%9F%AC-%ED%95%B4%EA%B2%B0-%EB%B0%A9%EB%B2%95-76b0ab741c62" target="_blank">git@github.com: Permission denied (publickey) 에러 해결 방법</a></p>

<h1 id="github-repository-파일-업로드-확인">GitHub Repository 파일 업로드 확인</h1>
<p>GitHub 저장소에도 html 파일이 추가된 것을 확인 할 수 있습니다.</p>

<p>이후 Ruby, Jekyll, bundler 설치, 테마를 다운로드 받아 로컬환경에서 실행하고 Repository에 등록이 필요한데 다음 포스팅에 작성해보도록 하겠습니다.</p>]]></content><author><name>HyeongSub Lim</name></author><category term="GitHubBlog" /><category term="GitHub" /><category term="blog" /><category term="GitHub blog" /><summary type="html"><![CDATA[github blog 만들기]]></summary></entry><entry><title type="html">[내배캠] 온보딩 주차 프로젝트 만들기</title><link href="http://localhost:4000/sparta/firstProject/" rel="alternate" type="text/html" title="[내배캠] 온보딩 주차 프로젝트 만들기" /><published>2024-03-01T00:00:00+09:00</published><updated>2024-03-01T00:00:00+09:00</updated><id>http://localhost:4000/sparta/firstProject</id><content type="html" xml:base="http://localhost:4000/sparta/firstProject/"><![CDATA[<h1 id="프로젝트">프로젝트</h1>
<ol>
  <li>프로젝트 주제: 팀 소개 앱 만들기</li>
  <li>프로젝트 기간: 2/26(월) ~ 2/29(목)</li>
  <li>인원: 4명 (팀장: 김건응 / 팀원: 박중권, 서수영, 임형섭)</li>
  <li>주요 기능: 팀원명 선택 시 해당 팀원 정보 확인 가능</li>
</ol>

<p><br /></p>

<h1 id="프로젝트-진행-프로세스">프로젝트 진행 프로세스</h1>
<ol>
  <li>사다리 타기를 통해 팀장 선정 
<br />네이버 사다리를 통해 김건응님 팀장 선정</li>
  <li>개발 전 프로그램 디자인 하기
<br />종이에 그리기, figma 웹, 스토리보드에 그리기 등</li>
  <li>다수결에 의한 디자인 선정<br />
figma로 작성하신 김건응 팀장님 디자인으로 진행하기로 하였습니다. 
<img src="/assets/images/categories/sparta/firstProjectDesign.png" alt="" /></li>
  <li>선출된 디자인을 각자 구현 (매일 저녁 진행 단계 확인)</li>
  <li>다수결에 의한 결과물 선정</li>
</ol>

<p><br /></p>

<h1 id="역할-분담">역할 분담</h1>
<h2 id="김건응">김건응</h2>
<ol>
  <li>스토리보드 기반 컬렉션뷰를 사용한 하단 바를 구현하려 했고, 각 팀원의 이름과 사진을 버튼으로 만들어 클릭 시 해당 프로필과 소개가 나오는 기능을 구현하려 하였습니다.
<img src="/assets/images/categories/sparta/firstProjectKim1.png" alt="" /></li>
</ol>

<h2 id="박중권">박중권</h2>
<ol>
  <li>Button (홈, 김건응, 임형섭, 서수영, 박중권, More)
Button을 눌렀을 때, 홈은 홈 화면으로, 맴버들 이름을 눌렀을 땐 각 맴버의 소개 페이지로 이동할 수 있는 버튼을 만들었습니다.
<img src="/assets/images/categories/sparta/firstProjectPark1.png" alt="" /></li>
  <li>UIView 음영
기본 UIView가 View와 배경색이 같은 경우, 경계를 알 수 있게 음영을 추가해서 이펙트를 넣었습니다.
<img src="/assets/images/categories/sparta/firstProjectPark2.png" alt="" /></li>
  <li>원형 Button 
스토리보드를 통해서 Button의 모양을 바꾸는데 있어서 제한적인 부분이 많아, 구글링을 한 후 Button의 모양을 코드를 사용해 변경했습니다.
<img src="/assets/images/categories/sparta/firstProjectPark3_1.png" alt="" />
버튼을 둥글게 하기 위해
    <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">self</span><span class="o">.</span><span class="kt">RoundButton1</span><span class="o">.</span><span class="n">layer</span><span class="o">.</span><span class="n">masksToBounds</span> <span class="o">=</span> <span class="kc">true</span> 
<span class="k">self</span><span class="o">.</span><span class="kt">RoundButton1</span><span class="o">.</span><span class="n">layer</span><span class="o">.</span><span class="n">masksToBounds</span> <span class="o">=</span> <span class="k">self</span><span class="o">.</span><span class="kt">RoundButton1</span><span class="o">.</span><span class="n">frame</span><span class="o">.</span><span class="n">size</span><span class="o">.</span><span class="n">width</span> <span class="o">/</span> <span class="mi">2</span> 
</code></pre></div>    </div>
    <p>코드를 사용하여 아래와 같이 구현하였습니다. 
<img src="/assets/images/categories/sparta/firstProjectPark3_2.png" alt="" /></p>
  </li>
  <li>Image 추가
Asset에 Image를 추가 후, 삽입.</li>
</ol>

<h2 id="서수영">서수영</h2>
<ol>
  <li>코드베이스로 컬렉션 뷰 구현, 스택 뷰 레이아웃 설정, 컬렉션 뷰 터치 이벤트를 구현하려고 하였습니다. 
<img src="/assets/images/categories/sparta/firstProjectSeo11.png" alt="" /></li>
</ol>

<h2 id="임형섭">임형섭</h2>
<ol>
  <li>xcode에 포함된 스포이드를 사용하여 선정된 디자인과 동일한 색상 및 디자인을 구현하였습니다. 
<img src="/assets/images/categories/sparta/firstProjectLim2.png" alt="" /></li>
  <li>팀원들의 제안을 받아 Scroll View, Table View를 추가하였습니다. 
<img src="/assets/images/categories/sparta/firstProject5.png" alt="" /></li>
  <li>다양한 기능보다 우선 완성할 수 있도록 진행하였습니다.</li>
</ol>

<p><br /></p>

<h1 id="어려웠던-점">어려웠던 점</h1>
<ul>
  <li>실제로 그린 디자인을 구현하려면 어떤 button, controller 등을 사용해야하는지 몰라 어려웠습니다.</li>
</ul>

<p><br /></p>

<h1 id="해결한-내용">해결한 내용</h1>
<ol>
  <li>Scroll View에서 inspectors에서 추가적인 설정을 통한 Scroll 기능 구현</li>
  <li>button 5개의 이벤트를 1개의 함수로 구현하였습니다.</li>
  <li>구조체를 사용하여 팀원 정보 인스턴스를 생성하였습니다.</li>
  <li>Table View, Table View Cell 사용 시 필수로 사용해야하는 함수를 확인하여 구현하였습니다.</li>
</ol>

<p><br /></p>

<h1 id="해결하지-못한-내용">해결하지 못한 내용</h1>
<p>TableView에서 데이터를 표출하고 다음 view로 이동하는것에 어려움이 있었습니다.<br />
Tab Bar, Navigation Controller는 사용하지 못했습니다.</p>

<p><br /></p>

<h1 id="최종-결과물">최종 결과물</h1>
<p><img src="/assets/images/categories/sparta/firstProject1.png" alt="" />
<img src="/assets/images/categories/sparta/firstProject2.png" alt="" />
<img src="/assets/images/categories/sparta/firstProject3.png" alt="" />
<img src="/assets/images/categories/sparta/firstProject4.png" alt="" />
<img src="/assets/images/categories/sparta/firstProject5.png" alt="" /></p>

<p><br /></p>

<h1 id="느낀-점">느낀 점</h1>
<p>짧은 기간이지만 기본적인 Button, Lable 사용, 사진 넣기, 단축키 등 조금 익숙해 질 수 있었습니다.<br />
또한 실제 디자인과 구현은 차이가 있다는 걸 알았습니다.</p>]]></content><author><name>HyeongSub Lim</name></author><category term="sparta" /><category term="mini Project" /><summary type="html"><![CDATA[짧은 기간(4일)에 간단한 앱 만들기 프로젝트 진행하였습니다. (진짜 간단)]]></summary></entry><entry><title type="html">[내배캠] 글쓰기 테스트 입니다.</title><link href="http://localhost:4000/sparta/test/" rel="alternate" type="text/html" title="[내배캠] 글쓰기 테스트 입니다." /><published>2024-03-01T00:00:00+09:00</published><updated>2024-03-01T00:00:00+09:00</updated><id>http://localhost:4000/sparta/test</id><content type="html" xml:base="http://localhost:4000/sparta/test/"><![CDATA[<h3 id="test">TEST</h3>

<ul>
  <li>As Is</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="nv">a</span><span class="p">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">1</span>
<span class="k">let</span> <span class="nv">b</span><span class="p">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">2</span>
</code></pre></div></div>

<blockquote>
  <p>TEST</p>
</blockquote>

<h3 id="test2">TEST2</h3>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="n">test</span><span class="p">)</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">print(test)</code> : test</p>

<h3 id="test3">TEST3</h3>

<p><code class="language-plaintext highlighter-rouge">var a: Int = 1 </code></p>

<p>TEST입니다.</p>

<ul>
  <li><a href="https://limlogging.github.io">TEST</a></li>
</ul>

<h3 id="test4">TEST4</h3>
<ul>
  <li>TEST
    <ul>
      <li><a href="https://limlogging.github.io">TEST</a></li>
    </ul>
  </li>
</ul>]]></content><author><name>HyeongSub Lim</name></author><category term="sparta" /><category term="bootcamp" /><summary type="html"><![CDATA[글 작성 테스트]]></summary></entry></feed>