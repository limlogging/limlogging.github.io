<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-04-12T18:56:30+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">limlogging Devlog</title><author><name>HyeongSub Lim</name></author><entry><title type="html">[내배캠] 챌린지반 과제 1차 제출</title><link href="http://localhost:4000/sparta/%EC%B1%8C%EB%A6%B0%EC%A7%80%EB%B0%98%EA%B3%BC%EC%A0%9C1-1/" rel="alternate" type="text/html" title="[내배캠] 챌린지반 과제 1차 제출" /><published>2024-04-12T00:00:00+09:00</published><updated>2024-04-12T00:00:00+09:00</updated><id>http://localhost:4000/sparta/%EC%B1%8C%EB%A6%B0%EC%A7%80%EB%B0%98%EA%B3%BC%EC%A0%9C1-1</id><content type="html" xml:base="http://localhost:4000/sparta/%EC%B1%8C%EB%A6%B0%EC%A7%80%EB%B0%98%EA%B3%BC%EC%A0%9C1-1/"><![CDATA[<h1 id="챌린지반-과제-목표">챌린지반 과제 목표</h1>
<ul>
  <li>본인의 깃허브 프로필 페이지를 만들어주세요.</li>
  <li>화면 상단에는 프로필 상세 정보가 출력되고 아래는 Repository 목록이 출력되는 앱을 만들어주세요.</li>
  <li>Repository 목록은 페이징 처리를 위하여 본인 Repository를 가져온 후 apple의 Repository를 붙여주세요.</li>
</ul>

<p><br /></p>

<h1 id="요구사항">요구사항</h1>
<ul>
  <li>iOS 15 이상</li>
  <li>Swift 5 이상</li>
  <li>git을 사용해주세요.</li>
  <li>README를 작성해주세요.</li>
  <li>가능하다면 MVC 아키텍처를 사용해주세요.
    <ul>
      <li>기본 iOS에서 제공하는 ViewController를 사용하면 됩니다.</li>
    </ul>
  </li>
  <li>오픈소스 라이브러리는 아래의 룰을 따라주세요.
    <ul>
      <li>필수 사용
        <ul>
          <li>Alamofire</li>
          <li>KingFisher or SDWebImage</li>
        </ul>
      </li>
      <li>아래의 라이브러리는 사용하지 마세요.
        <ul>
          <li>RxSwift, RxCocoa, Rx…..</li>
          <li>Moya</li>
          <li>SnapKit</li>
        </ul>
      </li>
      <li>그 외의 라이브러리는 사용하셔도 됩니다. 단 사용하시면 나중에 이유를 설명할 수 있어야 합니다.</li>
    </ul>
  </li>
  <li>Pull To Refresh 기능 구현해주세요.</li>
  <li>다음 페이지 스크롤링 가능하게 해주세요.(페이징처리)</li>
  <li>디자인은 Code, Storyboard 편하신 방법으로 하시면 됩니다.
    <ul>
      <li>단 Code 작성할 때 Frame 기반은 지양해주세요.</li>
    </ul>
  </li>
  <li>TableView나 CollectionView를 사용해주세요.
    <ul>
      <li>Delegate, DataSource를 사용해주세요.</li>
    </ul>
  </li>
  <li>디자인은 과제채점에 영향을 주지 않습니다.</li>
</ul>

<p><br /></p>

<h1 id="라이브러리-설치">라이브러리 설치</h1>
<ul>
  <li><a href="https://limlogging.github.io/UIKit/cocoapods/" target="_blank">코코아팟(cocoapods) 설치하기</a></li>
  <li><a href="https://limlogging.github.io/UIKit/alamofire/" target="_blank">알라모파이어(alamofire) 설치하기</a></li>
  <li><a href="https://limlogging.github.io/UIKit/SDWebImage/" target="_blank">SDWebImage 설치하기</a></li>
</ul>

<p><br /></p>

<h1 id="새로고침-기능">새로고침 기능</h1>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// MARK: - viewDidLoad()</span>
<span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>
    <span class="c1">//Pull to refresh 추가</span>
    <span class="nf">tableViewRefresh</span><span class="p">()</span>
<span class="p">}</span>

<span class="c1">// MARK: - Pull to refresh 컨트롤 추가</span>
<span class="kd">func</span> <span class="nf">tableViewRefresh</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">refreshControl</span> <span class="o">=</span> <span class="kt">UIRefreshControl</span><span class="p">()</span>
    <span class="n">refreshControl</span><span class="o">.</span><span class="n">attributedTitle</span> <span class="o">=</span> <span class="kt">NSAttributedString</span><span class="p">(</span><span class="nv">string</span><span class="p">:</span> <span class="s">"새로고침"</span><span class="p">)</span>
    <span class="n">refreshControl</span><span class="o">.</span><span class="nf">addTarget</span><span class="p">(</span><span class="k">self</span><span class="p">,</span> <span class="nv">action</span><span class="p">:</span> <span class="k">#selector</span><span class="p">(</span><span class="n">refreshData</span><span class="p">),</span> <span class="nv">for</span><span class="p">:</span> <span class="o">.</span><span class="n">valueChanged</span><span class="p">)</span>
    <span class="n">repositoriesTableView</span><span class="o">.</span><span class="n">refreshControl</span> <span class="o">=</span> <span class="n">refreshControl</span>
<span class="p">}</span>

<span class="c1">// MARK: - pull to refresh 메서드</span>
<span class="kd">@objc</span> <span class="kd">func</span> <span class="nf">refreshData</span><span class="p">()</span> <span class="p">{</span>
    <span class="kt">DispatchQueue</span><span class="o">.</span><span class="n">main</span><span class="o">.</span><span class="nf">asyncAfter</span><span class="p">(</span><span class="nv">deadline</span><span class="p">:</span> <span class="o">.</span><span class="nf">now</span><span class="p">()</span> <span class="o">+</span> <span class="mf">1.0</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// 테이블 뷰 리로드</span>
        <span class="k">self</span><span class="o">.</span><span class="n">repositoriesTableView</span><span class="o">.</span><span class="nf">reloadData</span><span class="p">()</span>
        <span class="c1">// UIRefreshControl 종료</span>
        <span class="k">self</span><span class="o">.</span><span class="n">repositoriesTableView</span><span class="o">.</span><span class="n">refreshControl</span><span class="p">?</span><span class="o">.</span><span class="nf">endRefreshing</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><br /></p>

<h1 id="깃허브에서-정보-가져오기">깃허브에서 정보 가져오기</h1>
<h2 id="프로필">프로필</h2>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// MARK: - 깃허브에서 프로필 정보 가져오기</span>
<span class="kd">func</span> <span class="nf">getGithubProfile</span><span class="p">()</span> <span class="p">{</span>
    <span class="kt">AF</span><span class="o">.</span><span class="nf">request</span><span class="p">(</span><span class="n">profileUrl</span><span class="p">)</span><span class="o">.</span><span class="n">responseJSON</span> <span class="p">{</span> <span class="n">response</span> <span class="k">in</span>
        <span class="k">switch</span> <span class="n">response</span><span class="o">.</span><span class="n">result</span> <span class="p">{</span>
        <span class="k">case</span><span class="o">.</span><span class="nf">success</span><span class="p">(</span><span class="k">let</span> <span class="nv">value</span><span class="p">):</span>
            <span class="k">if</span> <span class="k">let</span> <span class="nv">json</span> <span class="o">=</span> <span class="n">value</span> <span class="k">as?</span> <span class="p">[</span><span class="kt">String</span><span class="p">:</span> <span class="kt">Any</span><span class="p">],</span>
                <span class="k">let</span> <span class="nv">name</span> <span class="o">=</span> <span class="n">json</span><span class="p">[</span><span class="s">"name"</span><span class="p">]</span> <span class="k">as?</span> <span class="kt">String</span><span class="p">,</span>
                <span class="k">let</span> <span class="nv">login</span> <span class="o">=</span> <span class="n">json</span><span class="p">[</span><span class="s">"login"</span><span class="p">]</span> <span class="k">as?</span> <span class="kt">String</span><span class="p">,</span>
                <span class="k">let</span> <span class="nv">followers</span> <span class="o">=</span> <span class="n">json</span><span class="p">[</span><span class="s">"followers"</span><span class="p">]</span> <span class="k">as?</span> <span class="kt">Int</span><span class="p">,</span>
                <span class="k">let</span> <span class="nv">following</span> <span class="o">=</span> <span class="n">json</span><span class="p">[</span><span class="s">"following"</span><span class="p">]</span> <span class="k">as?</span> <span class="kt">Int</span><span class="p">,</span>
                <span class="k">let</span> <span class="nv">repoCnt</span> <span class="o">=</span> <span class="n">json</span><span class="p">[</span><span class="s">"public_repos"</span><span class="p">]</span> <span class="k">as?</span> <span class="kt">Int</span><span class="p">,</span>
                <span class="k">let</span> <span class="nv">avatarURLString</span> <span class="o">=</span> <span class="n">json</span><span class="p">[</span><span class="s">"avatar_url"</span><span class="p">]</span> <span class="k">as?</span> <span class="kt">String</span><span class="p">,</span>
                <span class="k">let</span> <span class="nv">avatarURL</span> <span class="o">=</span> <span class="kt">URL</span><span class="p">(</span><span class="nv">string</span><span class="p">:</span> <span class="n">avatarURLString</span><span class="p">)</span> <span class="p">{</span>
                
                <span class="k">let</span> <span class="nv">profile</span> <span class="o">=</span> <span class="kt">GithubProfile</span><span class="p">(</span><span class="nv">myImage</span><span class="p">:</span> <span class="n">avatarURL</span><span class="p">,</span> <span class="nv">name</span><span class="p">:</span> <span class="n">name</span><span class="p">,</span> <span class="nv">login</span><span class="p">:</span> <span class="n">login</span><span class="p">,</span> <span class="nv">followers</span><span class="p">:</span> <span class="n">followers</span><span class="p">,</span> <span class="nv">following</span><span class="p">:</span> <span class="n">following</span><span class="p">,</span> <span class="nv">repoCnt</span><span class="p">:</span> <span class="n">repoCnt</span><span class="p">)</span>
                
                <span class="k">self</span><span class="o">.</span><span class="nf">showProfileInfo</span><span class="p">(</span><span class="n">profile</span><span class="p">)</span>                    
            <span class="p">}</span>
        <span class="k">case</span> <span class="o">.</span><span class="nf">failure</span><span class="p">(</span><span class="k">let</span> <span class="nv">error</span><span class="p">):</span>
            <span class="nf">print</span><span class="p">(</span><span class="s">"error: </span><span class="se">\(</span><span class="n">error</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// 구조체에서 데이터를 가져와 label 및 imageView에 보여주는 함수</span>
<span class="kd">func</span> <span class="nf">showProfileInfo</span><span class="p">(</span><span class="n">_</span> <span class="nv">profile</span><span class="p">:</span> <span class="kt">GithubProfile</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">//SDWebImage를 사용하여 프로필 이미지 다운로드 및 출력</span>
    <span class="n">profileImageView</span><span class="o">.</span><span class="nf">sd_setImage</span><span class="p">(</span><span class="nv">with</span><span class="p">:</span> <span class="n">profile</span><span class="o">.</span><span class="n">myImage</span><span class="p">,</span> <span class="nv">placeholderImage</span><span class="p">:</span> <span class="kc">nil</span><span class="p">,</span> <span class="nv">options</span><span class="p">:</span> <span class="p">[],</span> <span class="nv">completed</span><span class="p">:</span> <span class="kc">nil</span><span class="p">)</span>
    
    <span class="n">profileName</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">profile</span><span class="o">.</span><span class="n">name</span>     <span class="c1">// 이름 출력</span>
    <span class="n">profileLogin</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">profile</span><span class="o">.</span><span class="n">login</span>   <span class="c1">// 로그인 출력</span>
    <span class="n">profileFollowers</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">"Followers: </span><span class="se">\(</span><span class="kt">String</span><span class="p">(</span><span class="n">profile</span><span class="o">.</span><span class="n">followers</span><span class="p">)</span><span class="se">)</span><span class="s">"</span>   <span class="c1">//followers</span>
    <span class="n">profileFollowing</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">"Following: </span><span class="se">\(</span><span class="kt">String</span><span class="p">(</span><span class="n">profile</span><span class="o">.</span><span class="n">following</span><span class="p">)</span><span class="se">)</span><span class="s">"</span>   <span class="c1">//following</span>
    
    <span class="k">self</span><span class="o">.</span><span class="n">repoCnt</span> <span class="o">=</span> <span class="n">profile</span><span class="o">.</span><span class="n">repoCnt</span>
    <span class="n">repositoriesTableView</span><span class="o">.</span><span class="nf">reloadData</span><span class="p">()</span>  <span class="c1">//최초 실행하면 numberOfRowsInSection를 먼저 실행하고 깃허브 데이터를 받아와서 row 수가 0임, row수를 깃허브 repo수 만큼 보이도록 새로고침 추가</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="레포지토리">레포지토리</h2>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// MARK: - 깃허브에서 리포지토리 정보 가져오기</span>
<span class="kd">func</span> <span class="nf">getGithubRepositories</span><span class="p">()</span> <span class="p">{</span>
    <span class="kt">AF</span><span class="o">.</span><span class="nf">request</span><span class="p">(</span><span class="n">repositoriesUrl</span><span class="p">)</span><span class="o">.</span><span class="n">responseJSON</span> <span class="p">{</span> <span class="n">response</span> <span class="k">in</span>
        <span class="k">switch</span> <span class="n">response</span><span class="o">.</span><span class="n">result</span> <span class="p">{</span>
        <span class="k">case</span><span class="o">.</span><span class="nf">success</span><span class="p">(</span><span class="k">let</span> <span class="nv">value</span><span class="p">):</span>
            <span class="k">if</span> <span class="k">let</span> <span class="nv">repositories</span> <span class="o">=</span> <span class="n">value</span> <span class="k">as?</span> <span class="p">[[</span><span class="kt">String</span><span class="p">:</span> <span class="kt">Any</span><span class="p">]]</span> <span class="p">{</span>
                <span class="k">for</span> <span class="n">repo</span> <span class="k">in</span> <span class="n">repositories</span> <span class="p">{</span>
                    <span class="k">if</span> <span class="k">let</span> <span class="nv">name</span> <span class="o">=</span> <span class="n">repo</span><span class="p">[</span><span class="s">"name"</span><span class="p">]</span> <span class="k">as?</span> <span class="kt">String</span><span class="p">,</span>
                        <span class="k">let</span> <span class="nv">htmlUrl</span> <span class="o">=</span> <span class="n">repo</span><span class="p">[</span><span class="s">"html_url"</span><span class="p">]</span> <span class="k">as?</span> <span class="kt">String</span> <span class="p">{</span>
                            <span class="c1">//description, language는 없거나 Null 값이 있어서 닐 코얼레싱 추가</span>
                            <span class="k">let</span> <span class="nv">description</span> <span class="o">=</span> <span class="n">repo</span><span class="p">[</span><span class="s">"description"</span><span class="p">]</span> <span class="k">as?</span> <span class="kt">String</span> <span class="p">??</span> <span class="s">""</span>
                            <span class="k">let</span> <span class="nv">language</span> <span class="o">=</span> <span class="n">repo</span><span class="p">[</span><span class="s">"language"</span><span class="p">]</span> <span class="k">as?</span> <span class="kt">String</span> <span class="p">??</span> <span class="s">""</span>
                            
                            <span class="c1">//배열에 저장</span>
                            <span class="k">self</span><span class="o">.</span><span class="n">repoArr</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="kt">GithubRepositories</span><span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="n">name</span><span class="p">,</span> <span class="nv">htmlUrl</span><span class="p">:</span> <span class="n">htmlUrl</span><span class="p">,</span> <span class="nv">description</span><span class="p">:</span> <span class="n">description</span><span class="p">,</span> <span class="nv">language</span><span class="p">:</span> <span class="n">language</span><span class="p">))</span>
                    <span class="p">}</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="k">case</span> <span class="o">.</span><span class="nf">failure</span><span class="p">(</span><span class="k">let</span> <span class="nv">error</span><span class="p">):</span>
            <span class="nf">print</span><span class="p">(</span><span class="s">"에러: </span><span class="se">\(</span><span class="n">error</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><br /></p>

<h1 id="실행화면">실행화면</h1>
<p><img src="../../assets/images/categories/sparta/2024-04-12-챌린지반과제1-1.png" alt="실행화면" /></p>

<p><br /></p>

<h1 id="실행영상">실행영상</h1>
<video width="640" height="360" controls="">
    <source src="../../assets/video/categories/sparta/2024-04-12-챌린지반과제1-1.mov" type="video/mp4" />
</video>

<p><br /></p>

<h1 id="마무리">마무리</h1>
<ul>
  <li>테이블뷰 row를 선택할때 배열의 row로 해야하는데 로딩하자마자 tableview에 데이터를 보여주기위해서 프로필에서 repoCnt를 구했다.</li>
  <li>로딩때 데이터를 보여주기위해 reload를 많이 사용했는데 다른 방법이 있을 것 같다.</li>
  <li>api를 사용할 때 아래 경고문이 떴는데 개선할 방법을 찾지 못했다. 다른 방법을 고민해야할 것 같다.
    <ul>
      <li>‘responseJSON(queue:dataPreprocessor:emptyResponseCodes:emptyRequestMethods:options:completionHandler:)’ is deprecated: responseJSON deprecated and will be removed in Alamofire 6. Use responseDecodable instead.</li>
    </ul>
  </li>
  <li>새로고침할때 배열을 다시 가져오는건데 배열을 초기화 하고 다시 불러야하나 고민했는데 우선 그냥 진행했다.</li>
  <li>페이징처리를 못해서 찾아보고 추가해야겠다.</li>
  <li>배운내용을 활용해서 구현하였고 라이브러리 설치와 api 사용을 경험해볼 수 있었다.</li>
  <li>튜터님 피드백 받고 다시 수정 해봐야겠다. 우선 제출! 🔥🔥🔥</li>
</ul>]]></content><author><name>HyeongSub Lim</name></author><category term="sparta" /><category term="챌린지" /><category term="과제" /><category term="깃허브앱" /><summary type="html"><![CDATA[챌린지반 과제 1차 제출 - GitHub App 만들기]]></summary></entry><entry><title type="html">[UIKit] prepare 코드로 화면 이동 (스토리보드에서 버튼과 view를 세그웨이로 연결, 추가 정보 전달)</title><link href="http://localhost:4000/uikit/%EC%BD%94%EB%93%9C%EB%A1%9C%ED%99%94%EB%A9%B4%EC%9D%B4%EB%8F%994/" rel="alternate" type="text/html" title="[UIKit] prepare 코드로 화면 이동 (스토리보드에서 버튼과 view를 세그웨이로 연결, 추가 정보 전달)" /><published>2024-04-11T00:00:00+09:00</published><updated>2024-04-11T00:00:00+09:00</updated><id>http://localhost:4000/uikit/%EC%BD%94%EB%93%9C%EB%A1%9C%ED%99%94%EB%A9%B4%EC%9D%B4%EB%8F%994</id><content type="html" xml:base="http://localhost:4000/uikit/%EC%BD%94%EB%93%9C%EB%A1%9C%ED%99%94%EB%A9%B4%EC%9D%B4%EB%8F%994/"><![CDATA[<h1 id="스토리보드-버튼과-view를-세그웨이로-연결하고-코드로-화면-이동">스토리보드 버튼과 View를 세그웨이로 연결하고 코드로 화면 이동</h1>
<ul>
  <li>세그웨이를 통해 연결됐지만 추가적인 정보를 전달 가능</li>
</ul>

<h1 id="1-view-controller에-버튼-추가-및-액션함수-생성">1. View Controller에 버튼 추가 및 액션함수 생성</h1>
<ul>
  <li>버튼을 추가하고 액션함수는 생성하지 않습니다.</li>
</ul>

<p><img src="../../assets/images/categories/uikit/2024-04-11-NextVC4-1.png" width="200" /></p>

<h1 id="2-view-controller-생성-하고-버튼과-연결">2. View Controller 생성 하고 버튼과 연결</h1>
<ul>
  <li>뷰 컨트롤러에서 버튼을 마우스 우클릭으로 드래그 후 옆에 새로 만든 뷰컨트롤러로 드래그하고 마우스를 떼면 Action Segue 창이 뜹니다.</li>
  <li>Show를 선택합니다.</li>
  <li>버튼을 누르면 View Controller로 바로 이동합니다.</li>
</ul>

<p><img src="../../assets/images/categories/uikit/2024-04-11-NextVC4-2.png" alt="" /></p>

<h1 id="3-세그웨이-식별자id를-추가">3. 세그웨이 식별자ID를 추가</h1>
<ul>
  <li>세그웨이는 화면 이동을 담당하는 객체입니다.</li>
  <li>세그웨이를 선택하고 식별자ID를 추가합니다. 
<img src="../../assets/images/categories/uikit/2024-04-11-NextVC4-3.png" alt="" /></li>
</ul>

<h1 id="4-이동하는-뷰컨트롤러에-label-추가">4. 이동하는 뷰컨트롤러에 Label 추가</h1>
<ul>
  <li>버튼으로 화면이동 시 Label의 text값을 변경하기 위함입니다. 
<img src="../../assets/images/categories/uikit/2024-04-11-NextVC4-4.png" alt="" /></li>
</ul>

<h1 id="5-next-view-controller-수정">5. Next View Controller 수정</h1>
<ul>
  <li>Label을 변경하기 위한 코드 수정</li>
  <li>전체코드</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">UIKit</span>

<span class="kd">class</span> <span class="kt">NextViewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>
    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">textLabel</span><span class="p">:</span> <span class="kt">UILabel</span><span class="o">!</span>
    <span class="k">var</span> <span class="nv">tempLabel</span><span class="p">:</span> <span class="kt">String</span><span class="p">?</span>
    
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>
        
        <span class="n">textLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">tempLabel</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h1 id="6-view-controller-prepare-함수-추가">6. View Controller prepare 함수 추가</h1>
<ul>
  <li>버튼으로 다음화면으로 이동하면서 Label의 값을 변경하기 위해 prepare 함수를 추가하고 코드를 작성합니다.</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">UIKit</span>

<span class="kd">class</span> <span class="kt">ViewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>
    <span class="p">}</span>
    
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">prepare</span><span class="p">(</span><span class="k">for</span> <span class="nv">segue</span><span class="p">:</span> <span class="kt">UIStoryboardSegue</span><span class="p">,</span> <span class="nv">sender</span><span class="p">:</span> <span class="kt">Any</span><span class="p">?)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="n">segue</span><span class="o">.</span><span class="n">identifier</span> <span class="o">==</span> <span class="s">"NextVCSegue"</span> <span class="p">{</span>
            <span class="nf">print</span><span class="p">(</span><span class="s">"prepare 함수 실행"</span><span class="p">)</span>
            <span class="k">let</span> <span class="nv">nextVC</span> <span class="o">=</span> <span class="n">segue</span><span class="o">.</span><span class="n">destination</span> <span class="k">as?</span> <span class="kt">NextViewController</span>
            <span class="n">nextVC</span><span class="p">?</span><span class="o">.</span><span class="n">tempLabel</span> <span class="o">=</span> <span class="s">"안녕하세요~~"</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h1 id="7-실행-화면">7. 실행 화면</h1>

<video width="640" height="360" controls="">
    <source src="../../assets/video/categories/uikit/2024-04-11-NextVC4.mov" type="video/mp4" />
</video>

<h1 id="마무리">마무리</h1>
<ul>
  <li>세그웨이를 통해 버튼과 뷰가 자동으로 연결되었으나 데이터 전달등 추가적인 작업을 위해 prepare 함수 추가</li>
</ul>]]></content><author><name>HyeongSub Lim</name></author><category term="UIKit" /><category term="swift" /><category term="iOS" /><category term="prepare" /><summary type="html"><![CDATA[스토리보드에서 버튼과 view를 세그웨이로 연결하고 코드로 추가 정보 전달]]></summary></entry><entry><title type="html">[UIKit] instantiateViewController 코드로 화면 이동 (다음 화면이 스토리보드에 있지만 세그웨이 연결이 아닌 경우)</title><link href="http://localhost:4000/uikit/%EC%BD%94%EB%93%9C%EB%A1%9C%ED%99%94%EB%A9%B4%EC%9D%B4%EB%8F%992/" rel="alternate" type="text/html" title="[UIKit] instantiateViewController 코드로 화면 이동 (다음 화면이 스토리보드에 있지만 세그웨이 연결이 아닌 경우)" /><published>2024-04-11T00:00:00+09:00</published><updated>2024-04-11T00:00:00+09:00</updated><id>http://localhost:4000/uikit/%EC%BD%94%EB%93%9C%EB%A1%9C%ED%99%94%EB%A9%B4%EC%9D%B4%EB%8F%992</id><content type="html" xml:base="http://localhost:4000/uikit/%EC%BD%94%EB%93%9C%EB%A1%9C%ED%99%94%EB%A9%B4%EC%9D%B4%EB%8F%992/"><![CDATA[<h1 id="세그웨이-없이-코드로-화면-이동">세그웨이 없이 코드로 화면 이동</h1>
<ul>
  <li>코드로 스토리보드 객체를 생성해서 화면을 이동하는 방법입니다.</li>
</ul>

<h1 id="1-view-controller에-버튼-추가-및-액션함수-생성">1. View Controller에 버튼 추가 및 액션함수 생성</h1>
<ul>
  <li>버튼 추가</li>
</ul>

<p><img src="../../assets/images/categories/uikit/2024-04-11-NextVC2-1.png" width="200" /></p>

<ul>
  <li>버튼 액션함수 생성</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// MARK: - 다음 화면으로 이동하는 버튼</span>
<span class="kd">@IBAction</span> <span class="kd">func</span> <span class="nf">nextButtonTapped</span><span class="p">(</span><span class="n">_</span> <span class="nv">sender</span><span class="p">:</span> <span class="kt">UIButton</span><span class="p">)</span> <span class="p">{</span>
<span class="p">}</span>
</code></pre></div></div>

<h1 id="2-viewcontroller-파일-생성">2. ViewController 파일 생성</h1>
<ul>
  <li>UIViewController를 상속받는 NextViewController 생성 
<img src="../../assets/images/categories/uikit/2024-04-11-NextVC2-2.png" alt="" /></li>
</ul>

<h1 id="3-스토리보드에-view-controller-추가-및-class파일-등록-스토리보드-id-등록">3. 스토리보드에 View Controller 추가 및 class파일 등록, 스토리보드 ID 등록</h1>
<p><img src="../../assets/images/categories/uikit/2024-04-11-NextVC2-3.png" alt="" /></p>

<h1 id="4-버튼-액션-함수-수정">4. 버튼 액션 함수 수정</h1>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// MARK: - 다음 화면으로 이동하는 버튼</span>
<span class="kd">@IBAction</span> <span class="kd">func</span> <span class="nf">nextButtonTapped</span><span class="p">(</span><span class="n">_</span> <span class="nv">sender</span><span class="p">:</span> <span class="kt">UIButton</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">//현재 스토리보드에서 "NextVC"라는 식별자로 뷰 컨트롤러를 인스턴스화를 시도</span>
    <span class="k">guard</span> <span class="k">let</span> <span class="nv">nextVC</span> <span class="o">=</span> <span class="n">storyboard</span><span class="p">?</span><span class="o">.</span><span class="nf">instantiateViewController</span><span class="p">(</span><span class="nv">identifier</span><span class="p">:</span> <span class="s">"NextVC"</span><span class="p">)</span> <span class="k">as?</span> <span class="kt">NextViewController</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
    <span class="c1">//인스턴스화가 성공하면 새로 생성된 뷰 컨트롤러를 모달로 표시</span>
    <span class="k">self</span><span class="o">.</span><span class="nf">present</span><span class="p">(</span><span class="n">nextVC</span><span class="p">,</span> <span class="nv">animated</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="nv">completion</span><span class="p">:</span> <span class="kc">nil</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<h1 id="5-실행-화면">5. 실행 화면</h1>

<video width="640" height="360" controls="">
    <source src="../../assets/video/categories/uikit/2024-04-11-NextVC2.mov" type="video/mp4" />
</video>

<h1 id="마무리">마무리</h1>
<ul>
  <li>세그웨이 없이 ViewController에 스토리보드ID를 지정하고 연결하기</li>
</ul>]]></content><author><name>HyeongSub Lim</name></author><category term="UIKit" /><category term="swift" /><category term="iOS" /><category term="instantiateViewController" /><summary type="html"><![CDATA[스토리보드에 있지만 세그웨이 연결이 되어 있지 않을때 화면 이동]]></summary></entry><entry><title type="html">[TIL] 내배캠 iOS앱 개발 공부 32일차 - 2024.04.11</title><link href="http://localhost:4000/TIL/til32/" rel="alternate" type="text/html" title="[TIL] 내배캠 iOS앱 개발 공부 32일차 - 2024.04.11" /><published>2024-04-11T00:00:00+09:00</published><updated>2024-04-11T00:00:00+09:00</updated><id>http://localhost:4000/TIL/til32</id><content type="html" xml:base="http://localhost:4000/TIL/til32/"><![CDATA[<h3 id="알고리즘">알고리즘</h3>
<ul>
  <li>쉽게 풀었던 오늘의 알고리즘 문제</li>
  <li>풀이 보기
    <ul>
      <li><a href="https://limlogging.github.io/algorithm/%EB%A1%9C%EB%98%90%EC%9D%98%EC%B5%9C%EA%B3%A0%EC%88%9C%EC%9C%84%EC%99%80%EC%B5%9C%EC%A0%80%EC%88%9C%EC%9C%84/" target="_blank">로또의 최고 순위와 최저 순위</a></li>
    </ul>
  </li>
</ul>

<h3 id="챌린지반-과제">챌린지반 과제</h3>
<ul>
  <li>결국 마지막 페이징 처리는 못했지만 제출했다.</li>
  <li>내일 우선 포스팅 예정</li>
</ul>

<h3 id="화면이동">화면이동</h3>
<ul>
  <li>스토리보드로 화면 연결은 쉽지만 이후 코드로 연결하기, 자동연결이지만 데이터 전달하기등 화면이동의 다양한 방법에 대해서 공부했다.</li>
  <li><a href="https://limlogging.github.io/uikit/%EC%BD%94%EB%93%9C%EB%A1%9C%ED%99%94%EB%A9%B4%EC%9D%B4%EB%8F%991/" target="_blank">코드로 화면 이동1 - present</a></li>
  <li><a href="https://limlogging.github.io/uikit/%EC%BD%94%EB%93%9C%EB%A1%9C%ED%99%94%EB%A9%B4%EC%9D%B4%EB%8F%992/" target="_blank">코드로 화면 이동2 - instantiateViewController</a></li>
  <li><a href="https://limlogging.github.io/uikit/%EC%BD%94%EB%93%9C%EB%A1%9C%ED%99%94%EB%A9%B4%EC%9D%B4%EB%8F%993/" target="_blank">코드로 화면 이동3 - performSegue</a></li>
  <li><a href="https://limlogging.github.io/uikit/%EC%BD%94%EB%93%9C%EB%A1%9C%ED%99%94%EB%A9%B4%EC%9D%B4%EB%8F%994/" target="_blank">코드로 화면 이동4 - prepare</a></li>
</ul>

<h3 id="내일-목표">내일 목표</h3>
<ul>
  <li>팀 프로젝트, 선거 휴무를 지나면서 공부한 내용을 많이 정리하지 못했다 ㅠ 다시 조금씩… 작성해야겠다.</li>
  <li>개인 과제 시작하기 , 챌린지 과제 마저 수정</li>
</ul>]]></content><author><name>HyeongSub Lim</name></author><category term="TIL" /><category term="TIL" /><summary type="html"><![CDATA[내배캠 iOS앱 개발 공부 32일차 이야기 - 2024.04.11]]></summary></entry><entry><title type="html">[프로그래머스/Swift] 로또의 최고 순위와 최저 순위</title><link href="http://localhost:4000/algorithm/%EB%A1%9C%EB%98%90%EC%9D%98%EC%B5%9C%EA%B3%A0%EC%88%9C%EC%9C%84%EC%99%80%EC%B5%9C%EC%A0%80%EC%88%9C%EC%9C%84/" rel="alternate" type="text/html" title="[프로그래머스/Swift] 로또의 최고 순위와 최저 순위" /><published>2024-04-11T00:00:00+09:00</published><updated>2024-04-11T00:00:00+09:00</updated><id>http://localhost:4000/algorithm/%EB%A1%9C%EB%98%90%EC%9D%98%EC%B5%9C%EA%B3%A0%EC%88%9C%EC%9C%84%EC%99%80%EC%B5%9C%EC%A0%80%EC%88%9C%EC%9C%84</id><content type="html" xml:base="http://localhost:4000/algorithm/%EB%A1%9C%EB%98%90%EC%9D%98%EC%B5%9C%EA%B3%A0%EC%88%9C%EC%9C%84%EC%99%80%EC%B5%9C%EC%A0%80%EC%88%9C%EC%9C%84/"><![CDATA[<h1 id="문제-설명">문제 설명</h1>
<ul>
  <li>로또 6/45(이하 ‘로또’로 표기)는 1부터 45까지의 숫자 중 6개를 찍어서 맞히는 대표적인 복권입니다. 아래는 로또의 순위를 정하는 방식입니다.</li>
</ul>

<table>
  <thead>
    <tr>
      <th>순위</th>
      <th>당첨 내용</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1</td>
      <td>6개 번호가 모두 일치</td>
    </tr>
    <tr>
      <td>2</td>
      <td>5개 번호가 일치</td>
    </tr>
    <tr>
      <td>3</td>
      <td>4개 번호가 일치</td>
    </tr>
    <tr>
      <td>4</td>
      <td>3개 번호가 일치</td>
    </tr>
    <tr>
      <td>5</td>
      <td>2개 번호가 일치</td>
    </tr>
    <tr>
      <td>6(낙첨)</td>
      <td>그 외</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>로또를 구매한 민우는 당첨 번호 발표일을 학수고대하고 있었습니다. 하지만, 민우의 동생이 로또에 낙서를 하여, 일부 번호를 알아볼 수 없게 되었습니다. 당첨 번호 발표 후, 민우는 자신이 구매했던 로또로 당첨이 가능했던 최고 순위와 최저 순위를 알아보고 싶어 졌습니다.</li>
  <li>알아볼 수 없는 번호를 0으로 표기하기로 하고, 민우가 구매한 로또 번호 6개가 44, 1, 0, 0, 31 25라고 가정해보겠습니다. 당첨 번호 6개가 31, 10, 45, 1, 6, 19라면, 당첨 가능한 최고 순위와 최저 순위의 한 예는 아래와 같습니다.</li>
</ul>

<table>
  <thead>
    <tr>
      <th style="text-align: center">당첨 번호</th>
      <th style="text-align: center">31</th>
      <th style="text-align: center">10</th>
      <th style="text-align: center">45</th>
      <th style="text-align: center">1</th>
      <th style="text-align: center">6</th>
      <th style="text-align: center">19</th>
      <th style="text-align: center">결과</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">최고 순위 번호</td>
      <td style="text-align: center">31</td>
      <td style="text-align: center">0→10</td>
      <td style="text-align: center">44</td>
      <td style="text-align: center">1</td>
      <td style="text-align: center">0→6</td>
      <td style="text-align: center">25</td>
      <td style="text-align: center">4개 번호 일치, 3등</td>
    </tr>
    <tr>
      <td style="text-align: center">최저 순위 번호</td>
      <td style="text-align: center">31</td>
      <td style="text-align: center">0→11</td>
      <td style="text-align: center">44</td>
      <td style="text-align: center">1</td>
      <td style="text-align: center">0→7</td>
      <td style="text-align: center">25</td>
      <td style="text-align: center">2개 번호 일치, 5등</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>순서와 상관없이, 구매한 로또에 당첨 번호와 일치하는 번호가 있으면 맞힌 걸로 인정됩니다.</li>
  <li>알아볼 수 없는 두 개의 번호를 각각 10, 6이라고 가정하면 3등에 당첨될 수 있습니다.
    <ul>
      <li>3등을 만드는 다른 방법들도 존재합니다. 하지만, 2등 이상으로 만드는 것은 불가능합니다.</li>
    </ul>
  </li>
  <li>알아볼 수 없는 두 개의 번호를 각각 11, 7이라고 가정하면 5등에 당첨될 수 있습니다.
    <ul>
      <li>5등을 만드는 다른 방법들도 존재합니다. 하지만, 6등(낙첨)으로 만드는 것은 불가능합니다.</li>
    </ul>
  </li>
  <li>
    <p>민우가 구매한 로또 번호를 담은 배열 lottos, 당첨 번호를 담은 배열 win_nums가 매개변수로 주어집니다. 이때, 당첨 가능한 최고 순위와 최저 순위를 차례대로 배열에 담아서 return 하도록 solution 함수를 완성해주세요.</p>
  </li>
  <li><a href="https://school.programmers.co.kr/learn/courses/30/lessons/77484#fnref1" target="_blank">문제 풀기</a></li>
</ul>

<h1 id="제한사항">제한사항</h1>
<ul>
  <li>lottos는 길이 6인 정수 배열입니다.</li>
  <li>lottos의 모든 원소는 0 이상 45 이하인 정수입니다.
    <ul>
      <li>0은 알아볼 수 없는 숫자를 의미합니다.</li>
      <li>0을 제외한 다른 숫자들은 lottos에 2개 이상 담겨있지 않습니다.</li>
      <li>lottos의 원소들은 정렬되어 있지 않을 수도 있습니다.</li>
    </ul>
  </li>
  <li>win_nums은 길이 6인 정수 배열입니다.</li>
  <li>win_nums의 모든 원소는 1 이상 45 이하인 정수입니다.
    <ul>
      <li>win_nums에는 같은 숫자가 2개 이상 담겨있지 않습니다.</li>
      <li>win_nums의 원소들은 정렬되어 있지 않을 수도 있습니다.</li>
    </ul>
  </li>
</ul>

<h1 id="입출력-예">입출력 예</h1>

<table>
  <thead>
    <tr>
      <th>lottos</th>
      <th>win_nums</th>
      <th>result</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>[44, 1, 0, 0, 31, 25]</td>
      <td>[31, 10, 45, 1, 6, 19]</td>
      <td>[3, 5]</td>
    </tr>
    <tr>
      <td>[0, 0, 0, 0, 0, 0]</td>
      <td>[38, 19, 20, 40, 15, 25]</td>
      <td>[1, 6]</td>
    </tr>
    <tr>
      <td>[45, 4, 35, 20, 3, 9]</td>
      <td>[20, 9, 3, 45, 4, 35]</td>
      <td>[1, 1]</td>
    </tr>
  </tbody>
</table>

<h2 id="입출력-예-설명">입출력 예 설명</h2>
<h3 id="입출력-예-1">입출력 예 #1</h3>
<ul>
  <li>문제 예시와 같습니다.</li>
</ul>

<h3 id="입출력-예-2">입출력 예 #2</h3>
<ul>
  <li>알아볼 수 없는 번호들이 아래와 같았다면, 1등과 6등에 당첨될 수 있습니다.</li>
</ul>

<table>
  <thead>
    <tr>
      <th>당첨 번호</th>
      <th>38</th>
      <th>19</th>
      <th>20</th>
      <th>40</th>
      <th>15</th>
      <th>25</th>
      <th>결과</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>최고 순위 번호</td>
      <td>0→38</td>
      <td>0→19</td>
      <td>0→20</td>
      <td>0→40</td>
      <td>0→15</td>
      <td>0→25</td>
      <td>6개 번호 일치, 1등</td>
    </tr>
    <tr>
      <td>최저 순위 번호</td>
      <td>0→21</td>
      <td>0→22</td>
      <td>0→23</td>
      <td>0→24</td>
      <td>0→26</td>
      <td>0→27</td>
      <td>0개 번호 일치, 6등</td>
    </tr>
  </tbody>
</table>

<h3 id="입출력-예-3">입출력 예 #3</h3>
<ul>
  <li>
    <p>민우가 구매한 로또의 번호와 당첨 번호가 모두 일치하므로, 최고 순위와 최저 순위는 모두 1등입니다.</p>
  </li>
  <li>
    <p>실제로 사용되는 로또 순위의 결정 방식과는 약간 다르지만, 이 문제에서는 지문에 명시된 대로 로또 순위를 결정하도록 합니다.</p>
  </li>
</ul>

<h1 id="나의-풀이">나의 풀이</h1>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">Foundation</span>

<span class="kd">func</span> <span class="nf">solution</span><span class="p">(</span><span class="n">_</span> <span class="nv">lottos</span><span class="p">:[</span><span class="kt">Int</span><span class="p">],</span> <span class="n">_</span> <span class="nv">win_nums</span><span class="p">:[</span><span class="kt">Int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">result</span><span class="p">:</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span>
    <span class="k">var</span> <span class="nv">min</span><span class="p">:</span> <span class="kt">Int</span>  <span class="o">=</span> <span class="mi">0</span>
    <span class="k">var</span> <span class="nv">zeroCnt</span> <span class="o">=</span> <span class="n">lottos</span><span class="o">.</span><span class="n">filter</span> <span class="p">{</span> <span class="nv">$0</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">}</span><span class="o">.</span><span class="n">count</span>
        
    <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="n">win_nums</span> <span class="p">{</span>
        <span class="k">for</span> <span class="n">j</span> <span class="k">in</span> <span class="n">lottos</span> <span class="p">{</span>
            <span class="k">if</span> <span class="n">j</span> <span class="o">==</span> <span class="n">i</span> <span class="p">{</span>
                <span class="n">min</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="k">return</span> <span class="p">[</span><span class="n">result</span><span class="p">[</span><span class="n">min</span> <span class="o">+</span> <span class="n">zeroCnt</span><span class="p">],</span> <span class="n">result</span><span class="p">[</span><span class="n">min</span><span class="p">]]</span>
<span class="p">}</span>
</code></pre></div></div>

<h1 id="다른-사람-풀이">다른 사람 풀이</h1>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">Foundation</span>

<span class="kd">func</span> <span class="nf">solution</span><span class="p">(</span><span class="n">_</span> <span class="nv">lottos</span><span class="p">:[</span><span class="kt">Int</span><span class="p">],</span> <span class="n">_</span> <span class="nv">win_nums</span><span class="p">:[</span><span class="kt">Int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="p">{</span>

    <span class="k">let</span> <span class="nv">zeroCount</span> <span class="o">=</span> <span class="n">lottos</span><span class="o">.</span><span class="n">filter</span> <span class="p">{</span> <span class="nv">$0</span> <span class="o">==</span> <span class="mi">0</span><span class="p">}</span><span class="o">.</span><span class="n">count</span>
    <span class="k">let</span> <span class="nv">winCount</span><span class="p">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="n">win_nums</span><span class="o">.</span><span class="n">filter</span> <span class="p">{</span> <span class="n">lottos</span><span class="o">.</span><span class="nf">contains</span><span class="p">(</span><span class="nv">$0</span><span class="p">)</span> <span class="p">}</span><span class="o">.</span><span class="n">count</span>


    <span class="k">return</span> <span class="p">[</span><span class="nf">min</span><span class="p">(</span><span class="mi">7</span><span class="o">-</span><span class="n">winCount</span><span class="o">-</span><span class="n">zeroCount</span><span class="p">,</span><span class="mi">6</span><span class="p">),</span> <span class="nf">min</span><span class="p">(</span><span class="mi">7</span><span class="o">-</span><span class="n">winCount</span><span class="p">,</span><span class="mi">6</span><span class="p">)]</span>
<span class="p">}</span>
</code></pre></div></div>

<h1 id="나의-풀이방법">나의 풀이방법</h1>
<ul>
  <li>일치하는 개수를 Index로 가지는 결과를 리턴하기 위한 배열 생성</li>
  <li>0의 개수 구하기</li>
  <li>일치하는 개수 구하기</li>
  <li>일치하는 수를 확인하고 순위 리턴</li>
</ul>

<p><br /></p>

<h1 id="다른사람-풀이">다른사람 풀이</h1>
<ul>
  <li>zero 카운트 구하는게 변수도 비슷하고 구하는 방법도 똑같았다. 다만 일치하는 수를 구하고 결과를 리턴하는 부분에 차이가 있는데 신기했다.</li>
</ul>]]></content><author><name>HyeongSub Lim</name></author><category term="Algorithm" /><category term="Algorithm" /><category term="coding test" /><category term="로또의 최고 순위와 최저 순위" /><summary type="html"><![CDATA[[프로그래머스/Swift] 로또의 최고 순위와 최저 순위]]></summary></entry><entry><title type="html">[UIKit] performSegue 코드로 화면 이동 (스토리보드에서 view와 view를 세그웨이로 연결, 식별자사용)</title><link href="http://localhost:4000/uikit/%EC%BD%94%EB%93%9C%EB%A1%9C%ED%99%94%EB%A9%B4%EC%9D%B4%EB%8F%993/" rel="alternate" type="text/html" title="[UIKit] performSegue 코드로 화면 이동 (스토리보드에서 view와 view를 세그웨이로 연결, 식별자사용)" /><published>2024-04-11T00:00:00+09:00</published><updated>2024-04-11T00:00:00+09:00</updated><id>http://localhost:4000/uikit/%EC%BD%94%EB%93%9C%EB%A1%9C%ED%99%94%EB%A9%B4%EC%9D%B4%EB%8F%993</id><content type="html" xml:base="http://localhost:4000/uikit/%EC%BD%94%EB%93%9C%EB%A1%9C%ED%99%94%EB%A9%B4%EC%9D%B4%EB%8F%993/"><![CDATA[<h1 id="view와-view를-세그웨이로-연결하고-코드로-화면-이동">View와 View를 세그웨이로 연결하고 코드로 화면 이동</h1>
<ul>
  <li>세그웨이 식별자를 사용해서 화면이동</li>
</ul>

<h1 id="1-view-controller에-버튼-추가-및-액션함수-생성">1. View Controller에 버튼 추가 및 액션함수 생성</h1>
<ul>
  <li>버튼 추가</li>
</ul>

<p><img src="../../assets/images/categories/uikit/2024-04-11-NextVC3-1.png" width="200" /></p>

<ul>
  <li>버튼 액션함수 생성</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// MARK: - 다음 화면으로 이동하는 버튼</span>
<span class="kd">@IBAction</span> <span class="kd">func</span> <span class="nf">nextButtonTapped</span><span class="p">(</span><span class="n">_</span> <span class="nv">sender</span><span class="p">:</span> <span class="kt">UIButton</span><span class="p">)</span> <span class="p">{</span>
<span class="p">}</span>
</code></pre></div></div>

<h1 id="2-스토리보드에서-view-controller-생성-및-연결">2. 스토리보드에서 View Controller 생성 및 연결</h1>
<ul>
  <li>스토리보드에 새로 뷰컨트롤러를 추가합니다 (바탕 노란색)</li>
  <li>뷰 컨트롤러에서 마우스 우클릭으로 드래그 후 옆에 새로 만든 뷰컨트롤러로 드래그하고 마우스를 떼면 Manual Segue 창이 뜹니다.</li>
  <li>Show를 선택합니다. 
<img src="../../assets/images/categories/uikit/2024-04-11-NextVC3-2.png" alt="" /></li>
</ul>

<h1 id="3-세그웨이-식별자id를-추가">3. 세그웨이 식별자ID를 추가</h1>
<ul>
  <li>세그웨이는 화면 이동을 담당하는 객체입니다.</li>
  <li>세그웨이를 선택하고 식별자ID를 추가합니다. 
<img src="../../assets/images/categories/uikit/2024-04-11-NextVC3-3.png" alt="" /></li>
</ul>

<h1 id="4-버튼-액션-함수-수정">4. 버튼 액션 함수 수정</h1>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// MARK: - 다음 화면으로 이동하는 버튼</span>
<span class="kd">@IBAction</span> <span class="kd">func</span> <span class="nf">nextButtonTapped</span><span class="p">(</span><span class="n">_</span> <span class="nv">sender</span><span class="p">:</span> <span class="kt">UIButton</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// 스토리보드에서 View와 View를 세그웨이로 연결 (매뉴얼 세그웨이 or 간접 세그웨이)</span>
    <span class="k">self</span><span class="o">.</span><span class="nf">performSegue</span><span class="p">(</span><span class="nv">withIdentifier</span><span class="p">:</span> <span class="s">"NextVCSegue"</span><span class="p">,</span> <span class="nv">sender</span><span class="p">:</span> <span class="k">self</span><span class="p">)</span> <span class="c1">//식별자를 사용하여 세그웨이를 실행</span>
<span class="p">}</span>
</code></pre></div></div>

<h1 id="5-실행-화면">5. 실행 화면</h1>

<video width="640" height="360" controls="">
    <source src="../../assets/video/categories/uikit/2024-04-11-NextVC3.mov" type="video/mp4" />
</video>

<h1 id="마무리">마무리</h1>
<ul>
  <li>view - view를 세그웨이로 연결하고 식별자 ID를 통해 세그웨이를 실행</li>
</ul>]]></content><author><name>HyeongSub Lim</name></author><category term="UIKit" /><category term="swift" /><category term="iOS" /><category term="performSegue" /><summary type="html"><![CDATA[스토리보드에서 view와 view를 세그웨이로 연결하고 코드로 실행]]></summary></entry><entry><title type="html">[TIL] 내배캠 iOS앱 개발 공부 31일차 - 2024.04.09</title><link href="http://localhost:4000/TIL/til31/" rel="alternate" type="text/html" title="[TIL] 내배캠 iOS앱 개발 공부 31일차 - 2024.04.09" /><published>2024-04-09T00:00:00+09:00</published><updated>2024-04-09T00:00:00+09:00</updated><id>http://localhost:4000/TIL/til31</id><content type="html" xml:base="http://localhost:4000/TIL/til31/"><![CDATA[<h3 id="알고리즘">알고리즘</h3>
<ul>
  <li>오늘의 알고리즘은 도저히 시간초과문제로 풀지 못했다.</li>
  <li>구글의 도움을 받아서 문제를 풀 수 있었다.</li>
  <li>풀이 보기
    <ul>
      <li><a href="https://limlogging.github.io/algorithm/%EA%B8%B0%EC%82%AC%EB%8B%A8%EC%9B%90%EC%9D%98%EB%AC%B4%EA%B8%B0/" target="_blank">기사단원의무기</a></li>
    </ul>
  </li>
</ul>

<h3 id="앱개발-심화">앱개발 심화</h3>
<ul>
  <li>오늘 앱개발 심화반 새로운 팀 편성이 있었다.</li>
  <li>새로운 팀에 적응하는 시간이 필요! ! !</li>
  <li>프로젝트하는 동안 블로그를 많이 못써서</li>
</ul>

<h3 id="내일-목표">내일 목표</h3>
<ul>
  <li>챌린지 과제 마저하기</li>
</ul>]]></content><author><name>HyeongSub Lim</name></author><category term="TIL" /><category term="TIL" /><summary type="html"><![CDATA[내배캠 iOS앱 개발 공부 31일차 이야기 - 2024.04.09]]></summary></entry><entry><title type="html">[내배캠] 앱개발 입문 팀 프로젝트 만들기 - Kiosk 앱</title><link href="http://localhost:4000/sparta/firstTeamProject/" rel="alternate" type="text/html" title="[내배캠] 앱개발 입문 팀 프로젝트 만들기 - Kiosk 앱" /><published>2024-04-09T00:00:00+09:00</published><updated>2024-04-09T00:00:00+09:00</updated><id>http://localhost:4000/sparta/firstTeamProject</id><content type="html" xml:base="http://localhost:4000/sparta/firstTeamProject/"><![CDATA[<h1 id="프로젝트">프로젝트</h1>
<ol>
  <li>프로젝트 주제: 팀 소개 앱 만들기</li>
  <li>프로젝트 기간: 4/1(월) ~ 4/7(일)</li>
  <li>인원: 4명 (팀장: 임형섭 / 팀원: 김시종, 금세미, 송동익)</li>
  <li>프로젝트 명: Fine Apple Store</li>
  <li>프로젝트 소개: 키오스크하면 생각나는 음료가 아닌 본 과정이 iOS 앱 개발 과정인 만큼, 애플 제품을 소개 및 판매하는 앱을 구현하기로 결정.</li>
  <li>개발환경
    <ul>
      <li>OS : macOS Sonoma 14.3.1</li>
      <li>IDE : Xcode 15.3</li>
      <li>Language : Swift</li>
      <li>협업 Tool : Git (https://github.com/-limlogging/Kiosk3Jo)</li>
    </ul>
  </li>
</ol>

<p><br /></p>

<h1 id="팀원-구성-및-역할">팀원 구성 및 역할</h1>
<h2 id="임형섭">임형섭</h2>
<ol>
  <li>Github에서 팀원 코드 merge 최종 작업</li>
  <li>제품 기초 이미지 파일 준비</li>
  <li>스토리보드에서, TabBar, Navigation 기능 추가 (홈, 상품, 마이페이지)</li>
  <li>스토리보드 버튼을 코드로 변경</li>
  <li>마이페이지 구현 (코드를 통한 UI 구성, TableView, 오토레이아웃 사용)</li>
  <li>제품 상세 페이지 구현 (코드를 통한 UI 구성, ScrollView, PageControl를 사용한 슬라이드 이미지 구현)</li>
</ol>

<h2 id="금세미">금세미</h2>
<ol>
  <li>UIButton, UIAlertController 기능 구현
    <ul>
      <li>문의, 취소, 주문 버튼 클릭 시, UIAlertController를 통해 주문 및 취소 기능 구현, 전체 취소 및 주문 완료 시 UITableView 초기화</li>
    </ul>
  </li>
  <li>제품 이미지 영문명 변경</li>
  <li>제품 이미지 확장자 변경(jpeg → png)</li>
  <li>컬렉션 뷰와 이미지 연결하여 제품 정보(상품명, 가격) 불러오기</li>
  <li>launch screen 디자인</li>
</ol>

<h2 id="김시종">김시종</h2>
<ol>
  <li>데이터 모델링(Model → image, title, price)</li>
  <li>CollectionView, SegmentedControl 기능 구현
    <ul>
      <li>제품군별로 SegmentedControl로 분류</li>
      <li>Seg마다 각각의 선택된 제품군 화면출력</li>
    </ul>
  </li>
  <li>탭바 홈 화면 구현</li>
  <li>탭바 고객센터 화면 구현</li>
  <li>이미지 및 레이아웃 상세 디자인 수정</li>
</ol>

<h2 id="송동익">송동익</h2>
<ol>
  <li>프로젝트 초기 UI틀 구성</li>
  <li>UITableView 기능 구현</li>
  <li>장바구니 기능 구현</li>
  <li>장바구니 화면을 보여줄 Modal 기능 구현</li>
  <li>물품의 갯수를 Notification Badge 형식으로 구현</li>
  <li>Search Bar 기능 구현</li>
  <li>새로 출시된 제품 표기 기능 구현</li>
  <li>매장의 위치를 보여줄 지도 기능 구현</li>
  <li>App Icon 구현</li>
  <li>팀원 업무 보조</li>
</ol>

<p><br /></p>

<h1 id="어려웠던-점--해결-방법">어려웠던 점 &amp; 해결 방법</h1>

<h2 id="임형섭-1">임형섭</h2>
<ul>
  <li>github를 통해 충돌된 코드를 머지하는 방식이 어려웠으나 프로젝트를 통해 머지방식이 조금 익숙해 졌습니다.</li>
  <li>TabBar를 통해 View 이동 시 배열 데이터를 주고 받기 어려워 팀원들의 도움을 받아 해결할 수 있었습니다.</li>
  <li>pageControl을 통해서 ScrollView내 imageview를 이동하기 어려웠지만 ScrollView width 지정과 오토레이아웃에 문제가 있는걸 확인하고 해결할 수 있었습니다.</li>
</ul>

<h2 id="금세미-1">금세미</h2>
<ul>
  <li>git 사용법이 익숙하지 않아 팀에 피해를 끼치지 않고 프로젝트 파일을 pull, push, merge 하는 것이 좀 부담스러웠으나 여러번 반복하며 익혔다.</li>
</ul>

<h2 id="김시종-1">김시종</h2>
<ul>
  <li>홈화면 구성할 때 컬렉션 뷰위에 헤더를 구현하고 싶었으나, 가로로 구성된 컬렉션 뷰의 헤더가 위로 구성되는게 아닌 왼쪽으로 오는 것에 대해 위로 올리는 과정이 어려웠던 것 같습니다. 일반적인 방법으로 가로 구성의 컬렉션 뷰 헤더를 위로 구성하는 것이 어렵다는 것을 깨닫고 <strong>Compositional Layout 을 사용하게 되었습니다. 아직 이해하기 어려운 개념이지만 헤더를 위에 구성하는 것 까진 성공하게 되었습니다. 추후 컴포지셔널 레이아웃 관련해서 더 공부해야할 것 같습니다.</strong></li>
</ul>

<h2 id="송동익-1">송동익</h2>
<ul>
  <li>데이터 전달방식이다. 내가 알고있던 방법으로 VC간 데이터를 전달했지만, 탭바를 사용하면서 이럴땐 어떻게 전달해야하지? 라는 생각을했고, 내가 아는 모든 지식을 사용해도 전달이 안되었는데, 튜터님께 여쭤보고 바로 해답을 찾았고, 그 문제를 해결하는데는 단 5분도 걸리지않았다. 항상 내 수준에 만족을 하고 있지는 않아 만족을 하기위해 노력을 하고있는데, 그 노력 이상으로 더 열심히 공부해야겠다라는 생각이 든다.</li>
</ul>

<p><br /></p>

<h1 id="프로젝트-소감">프로젝트 소감</h1>
<h2 id="임형섭-2">임형섭</h2>
<ul>
  <li>github를 통해서 협업을 경험해보고 공부했던 내용을 다시 적용하면서 복습할 수 있었습니다. 특히 다른 사람 코드 작성 방식을 통해 다양한 구현 방법을 확인 해 볼 수 있어 소중한 경험이 되었습니다.</li>
</ul>

<h2 id="금세미-2">금세미</h2>
<ul>
  <li>완성한 앱을 보니 우리가 이 정도 수준의 앱을 만들었다는 것이 믿을 수 없을 정도로 만족스럽고 뿌듯했다.</li>
</ul>

<h2 id="김시종-2">김시종</h2>
<ul>
  <li>처음 프로젝트를 진행하면서 내가 해야할 일이 생기면서 피해끼치지 않고 좋은 프로젝트를 진행하고 싶어 혼자 할때 보다 더 노력을 하게 된 것 같았습니다. 진행될 수록 각자 맡은 내용이 합쳐지고 하나의 결과물이 생기는 과정이 너무 재밌었고 뿌듯했던 과정이었습니다.</li>
</ul>

<h2 id="송동익-2">송동익</h2>
<ul>
  <li>온보딩 주차에 프로젝트를 진행하지 않아서 이번프로젝트가 첫프로젝트였지만, 맡은 임무를 최대한 열심히 하고자 노력을 했다. 하루하루 지나며 아무것도 없던 상태에서 틀이 갖춰지고 하나씩 기능이 갖춰 질때마다, 미천하지만 팀에 기여를 하고있다는 생각에 뿌듯함을 느꼈다.</li>
</ul>

<p><br /></p>

<h1 id="wireframe">Wireframe</h1>
<p><img src="../../assets/images/categories/sparta/2024-04-09-firstTeamProjectWireframe.jpeg" alt="Wireframe" /></p>

<p><br /></p>

<h1 id="최종-결과물">최종 결과물</h1>
<p><img src="../../assets/images/categories/sparta/2024-04-09-firstTeamProject1.png" width="200" />
<img src="../../assets/images/categories/sparta/2024-04-09-firstTeamProject2.png" width="200" />
<img src="../../assets/images/categories/sparta/2024-04-09-firstTeamProject3.png" width="200" />
<img src="../../assets/images/categories/sparta/2024-04-09-firstTeamProject4.png" width="200" />
<img src="../../assets/images/categories/sparta/2024-04-09-firstTeamProject5.png" width="200" />
<img src="../../assets/images/categories/sparta/2024-04-09-firstTeamProject6.png" width="200" />
<img src="../../assets/images/categories/sparta/2024-04-09-firstTeamProject7.png" width="200" />
<img src="../../assets/images/categories/sparta/2024-04-09-firstTeamProject8.png" width="200" />
<img src="../../assets/images/categories/sparta/2024-04-09-firstTeamProject9.png" width="200" />
<img src="../../assets/images/categories/sparta/2024-04-09-firstTeamProject10.png" width="200" />
<img src="../../assets/images/categories/sparta/2024-04-09-firstTeamProject11.png" width="200" /></p>

<h1 id="시연-영상">시연 영상</h1>

<video width="640" height="360" controls="">
    <source src="../../assets/video/categories/sparta/2024-04-09-firstTeamProject.mp4" type="video/mp4" />
</video>]]></content><author><name>HyeongSub Lim</name></author><category term="sparta" /><category term="mini Project" /><summary type="html"><![CDATA[일주일 동안 Kiosk 앱 만들기 프로젝트 진행하였습니다.]]></summary></entry><entry><title type="html">[프로그래머스/Swift] ⭐️기사단원의 무기⭐️</title><link href="http://localhost:4000/algorithm/%EA%B8%B0%EC%82%AC%EB%8B%A8%EC%9B%90%EC%9D%98%EB%AC%B4%EA%B8%B0/" rel="alternate" type="text/html" title="[프로그래머스/Swift] ⭐️기사단원의 무기⭐️" /><published>2024-04-09T00:00:00+09:00</published><updated>2024-04-09T00:00:00+09:00</updated><id>http://localhost:4000/algorithm/%EA%B8%B0%EC%82%AC%EB%8B%A8%EC%9B%90%EC%9D%98%EB%AC%B4%EA%B8%B0</id><content type="html" xml:base="http://localhost:4000/algorithm/%EA%B8%B0%EC%82%AC%EB%8B%A8%EC%9B%90%EC%9D%98%EB%AC%B4%EA%B8%B0/"><![CDATA[<h1 id="문제-설명">문제 설명</h1>
<ul>
  <li>숫자나라 기사단의 각 기사에게는 1번부터 number까지 번호가 지정되어 있습니다. 기사들은 무기점에서 무기를 구매하려고 합니다.</li>
  <li>각 기사는 자신의 기사 번호의 약수 개수에 해당하는 공격력을 가진 무기를 구매하려 합니다. 단, 이웃나라와의 협약에 의해 공격력의 제한수치를 정하고, 제한수치보다 큰 공격력을 가진 무기를 구매해야 하는 기사는 협약기관에서 정한 공격력을 가지는 무기를 구매해야 합니다.</li>
  <li>예를 들어, 15번으로 지정된 기사단원은 15의 약수가 1, 3, 5, 15로 4개 이므로, 공격력이 4인 무기를 구매합니다. 만약, 이웃나라와의 협약으로 정해진 공격력의 제한수치가 3이고 제한수치를 초과한 기사가 사용할 무기의 공격력이 2라면, 15번으로 지정된 기사단원은 무기점에서 공격력이 2인 무기를 구매합니다. 무기를 만들 때, 무기의 공격력 1당 1kg의 철이 필요합니다. 그래서 무기점에서 무기를 모두 만들기 위해 필요한 철의 무게를 미리 계산하려 합니다.</li>
  <li>기사단원의 수를 나타내는 정수 number와 이웃나라와 협약으로 정해진 공격력의 제한수치를 나타내는 정수 limit와 제한수치를 초과한 기사가 사용할 무기의 공격력을 나타내는 정수 power가 주어졌을 때, 무기점의 주인이 무기를 모두 만들기 위해 필요한 철의 무게를 return 하는 solution 함수를 완성하시오.</li>
  <li><a href="https://school.programmers.co.kr/learn/courses/30/lessons/136798" target="_blank">문제 풀기</a></li>
</ul>

<h1 id="제한사항">제한사항</h1>
<ul>
  <li>1 ≤ number ≤ 100,000</li>
  <li>2 ≤ limit ≤ 100</li>
  <li>1 ≤ power ≤ limit</li>
</ul>

<h1 id="입출력-예">입출력 예</h1>

<table>
  <thead>
    <tr>
      <th>number</th>
      <th>limit</th>
      <th>power</th>
      <th>result</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>5</td>
      <td>3</td>
      <td>2</td>
      <td>10</td>
    </tr>
    <tr>
      <td>10</td>
      <td>3</td>
      <td>2</td>
      <td>21</td>
    </tr>
  </tbody>
</table>

<h2 id="입출력-예-설명">입출력 예 설명</h2>
<h3 id="입출력-예-1">입출력 예 #1</h3>
<ul>
  <li>1부터 5까지의 약수의 개수는 순서대로 [1, 2, 2, 3, 2]개입니다. 모두 공격력 제한 수치인 3을 넘지 않기 때문에 필요한 철의 무게는 해당 수들의 합인 10이 됩니다. 따라서 10을 return 합니다.</li>
</ul>

<h3 id="입출력-예-2">입출력 예 #2</h3>
<ul>
  <li>1부터 10까지의 약수의 개수는 순서대로 [1, 2, 2, 3, 2, 4, 2, 4, 3, 4]개입니다. 공격력의 제한수치가 3이기 때문에, 6, 8, 10번 기사는 공격력이 2인 무기를 구매합니다. 따라서 해당 수들의 합인 21을 return 합니다.</li>
</ul>

<h1 id="나의-풀이-1번-방법---667점">나의 풀이 1번 방법 - 66.7점</h1>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">Foundation</span>

<span class="kd">func</span> <span class="nf">solution</span><span class="p">(</span><span class="n">_</span> <span class="nv">number</span><span class="p">:</span><span class="kt">Int</span><span class="p">,</span> <span class="n">_</span> <span class="nv">limit</span><span class="p">:</span><span class="kt">Int</span><span class="p">,</span> <span class="n">_</span> <span class="nv">power</span><span class="p">:</span><span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
    <span class="nf">guard</span> <span class="p">(</span><span class="n">number</span> <span class="o">&gt;=</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">number</span> <span class="o">&lt;=</span> <span class="mi">100000</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">limit</span> <span class="o">&gt;=</span> <span class="mi">2</span> <span class="o">&amp;&amp;</span> <span class="n">limit</span> <span class="o">&lt;=</span> <span class="mi">100</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">power</span> <span class="o">&gt;=</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">power</span> <span class="o">&lt;=</span> <span class="n">limit</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="mi">0</span> <span class="p">}</span>

    <span class="k">var</span> <span class="nv">arr</span><span class="p">:</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">var</span> <span class="nv">cnt</span><span class="p">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">1</span><span class="o">...</span><span class="n">number</span> <span class="p">{</span>
        <span class="k">for</span> <span class="n">j</span> <span class="k">in</span> <span class="mi">1</span><span class="o">...</span><span class="n">i</span> <span class="p">{</span>
            <span class="k">if</span> <span class="n">i</span> <span class="o">%</span> <span class="n">j</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
                <span class="n">cnt</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="n">arr</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="n">cnt</span> <span class="o">&lt;=</span> <span class="n">limit</span> <span class="p">?</span> <span class="nv">cnt</span> <span class="p">:</span> <span class="n">power</span><span class="p">)</span>
        <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">arr</span><span class="o">.</span><span class="nf">reduce</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="o">+</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<h1 id="나의-풀이-2번-방법---556점">나의 풀이 2번 방법 - 55.6점</h1>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">Foundation</span>

<span class="kd">func</span> <span class="nf">solution</span><span class="p">(</span><span class="n">_</span> <span class="nv">number</span><span class="p">:</span><span class="kt">Int</span><span class="p">,</span> <span class="n">_</span> <span class="nv">limit</span><span class="p">:</span><span class="kt">Int</span><span class="p">,</span> <span class="n">_</span> <span class="nv">power</span><span class="p">:</span><span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
    <span class="nf">guard</span> <span class="p">(</span><span class="n">number</span> <span class="o">&gt;=</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">number</span> <span class="o">&lt;=</span> <span class="mi">100000</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">limit</span> <span class="o">&gt;=</span> <span class="mi">2</span> <span class="o">&amp;&amp;</span> <span class="n">limit</span> <span class="o">&lt;=</span> <span class="mi">100</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">power</span> <span class="o">&gt;=</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">power</span> <span class="o">&lt;=</span> <span class="n">limit</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="mi">0</span> <span class="p">}</span>

    <span class="nf">return</span> <span class="p">(</span><span class="mi">1</span><span class="o">...</span><span class="n">number</span><span class="p">)</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">i</span> <span class="nf">in</span>
        <span class="p">(</span><span class="mi">1</span><span class="o">...</span><span class="n">i</span><span class="p">)</span><span class="o">.</span><span class="n">filter</span> <span class="p">{</span> <span class="n">j</span> <span class="k">in</span>
            <span class="n">i</span> <span class="o">%</span> <span class="n">j</span> <span class="o">==</span> <span class="mi">0</span>
        <span class="p">}</span><span class="o">.</span><span class="n">count</span>
    <span class="p">}</span><span class="o">.</span><span class="nf">map</span><span class="p">({</span>
        <span class="nv">$0</span> <span class="o">&gt;</span> <span class="n">limit</span> <span class="p">?</span> <span class="nv">power</span> <span class="p">:</span> <span class="nv">$0</span>
    <span class="p">})</span><span class="o">.</span><span class="nf">reduce</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="o">+</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<h1 id="나의-풀이-3번-방법---556점">나의 풀이 3번 방법 - 55.6점</h1>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">Foundation</span>

<span class="kd">func</span> <span class="nf">solution</span><span class="p">(</span><span class="n">_</span> <span class="nv">number</span><span class="p">:</span><span class="kt">Int</span><span class="p">,</span> <span class="n">_</span> <span class="nv">limit</span><span class="p">:</span><span class="kt">Int</span><span class="p">,</span> <span class="n">_</span> <span class="nv">power</span><span class="p">:</span><span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
    <span class="nf">guard</span> <span class="p">(</span><span class="n">number</span> <span class="o">&gt;=</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">number</span> <span class="o">&lt;=</span> <span class="mi">100000</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">limit</span> <span class="o">&gt;=</span> <span class="mi">2</span> <span class="o">&amp;&amp;</span> <span class="n">limit</span> <span class="o">&lt;=</span> <span class="mi">100</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">power</span> <span class="o">&gt;=</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">power</span> <span class="o">&lt;=</span> <span class="n">limit</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="mi">0</span> <span class="p">}</span>

    <span class="k">var</span> <span class="nv">arr</span><span class="p">:</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">1</span><span class="o">...</span><span class="n">number</span> <span class="p">{</span>
        <span class="n">arr</span><span class="o">.</span><span class="nf">append</span><span class="p">((</span><span class="mi">1</span><span class="o">...</span><span class="n">i</span><span class="p">)</span><span class="o">.</span><span class="n">filter</span> <span class="p">{</span> <span class="n">i</span> <span class="o">%</span> <span class="nv">$0</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">}</span><span class="o">.</span><span class="n">count</span> <span class="o">&lt;=</span> <span class="n">limit</span> <span class="p">?</span> <span class="p">(</span><span class="mi">1</span><span class="o">...</span><span class="n">i</span><span class="p">)</span><span class="o">.</span><span class="n">filter</span> <span class="p">{</span> <span class="n">i</span> <span class="o">%</span> <span class="nv">$0</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">}</span><span class="o">.</span><span class="nv">count</span> <span class="p">:</span> <span class="n">power</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">arr</span><span class="o">.</span><span class="nf">reduce</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="o">+</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<h1 id="나의-풀이-4번-방법---556점">나의 풀이 4번 방법 - 55.6점</h1>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">Foundation</span>

<span class="kd">func</span> <span class="nf">solution</span><span class="p">(</span><span class="n">_</span> <span class="nv">number</span><span class="p">:</span><span class="kt">Int</span><span class="p">,</span> <span class="n">_</span> <span class="nv">limit</span><span class="p">:</span><span class="kt">Int</span><span class="p">,</span> <span class="n">_</span> <span class="nv">power</span><span class="p">:</span><span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
    <span class="nf">guard</span> <span class="p">(</span><span class="n">number</span> <span class="o">&gt;=</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">number</span> <span class="o">&lt;=</span> <span class="mi">100000</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">limit</span> <span class="o">&gt;=</span> <span class="mi">2</span> <span class="o">&amp;&amp;</span> <span class="n">limit</span> <span class="o">&lt;=</span> <span class="mi">100</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">power</span> <span class="o">&gt;=</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">power</span> <span class="o">&lt;=</span> <span class="n">limit</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="mi">0</span> <span class="p">}</span>

    <span class="k">var</span> <span class="nv">arr</span><span class="p">:</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">var</span> <span class="nv">cnt</span><span class="p">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">1</span><span class="o">...</span><span class="n">number</span> <span class="p">{</span>
        <span class="n">cnt</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="o">...</span><span class="n">i</span><span class="p">)</span><span class="o">.</span><span class="n">filter</span> <span class="p">{</span> <span class="n">j</span> <span class="k">in</span>
            <span class="n">i</span> <span class="o">%</span> <span class="n">j</span> <span class="o">==</span> <span class="mi">0</span>
        <span class="p">}</span><span class="o">.</span><span class="n">count</span>
        <span class="n">arr</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="n">cnt</span> <span class="o">&lt;=</span> <span class="n">limit</span> <span class="p">?</span> <span class="nv">cnt</span> <span class="p">:</span> <span class="n">power</span><span class="p">)</span>
        <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">arr</span><span class="o">.</span><span class="nf">reduce</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="o">+</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<h1 id="다른-사람-풀이">다른 사람 풀이</h1>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">Foundation</span>

<span class="kd">func</span> <span class="nf">solution</span><span class="p">(</span><span class="n">_</span> <span class="nv">number</span><span class="p">:</span><span class="kt">Int</span><span class="p">,</span> <span class="n">_</span> <span class="nv">limit</span><span class="p">:</span><span class="kt">Int</span><span class="p">,</span> <span class="n">_</span> <span class="nv">power</span><span class="p">:</span><span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
    
    <span class="k">var</span> <span class="nv">result</span> <span class="o">=</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]()</span>
    
    <span class="k">for</span> <span class="n">number</span> <span class="k">in</span> <span class="mi">1</span><span class="o">...</span><span class="n">number</span><span class="p">{</span>
        <span class="c1">//약수의 개수를 셈</span>
        <span class="k">var</span> <span class="nv">count</span> <span class="o">=</span> <span class="mi">0</span>
        
        <span class="c1">//16일경우 -&gt; 4까지만 구해도됨</span>
        <span class="c1">//약수 1로 16을 유추할수있음</span>
        <span class="c1">//2로 8을 유추할 수 있음</span>
        <span class="c1">//4 * 4 = 16이므로 이땐 +1</span>
        <span class="c1">//이외엔 약수 하나로 두 수를 구할 수 있으니 +2</span>
        <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">1</span><span class="o">...</span><span class="kt">Int</span><span class="p">(</span><span class="nf">sqrt</span><span class="p">(</span><span class="kt">Double</span><span class="p">(</span><span class="n">number</span><span class="p">))){</span>
            <span class="k">if</span> <span class="n">number</span> <span class="o">%</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="p">{</span>
                <span class="k">if</span><span class="p">(</span> <span class="n">i</span> <span class="o">*</span> <span class="n">i</span><span class="p">)</span> <span class="o">==</span> <span class="n">number</span><span class="p">{</span>
                    <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="p">}</span><span class="k">else</span><span class="p">{</span>
                    <span class="n">count</span> <span class="o">+=</span> <span class="mi">2</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="c1">//limit을 넘는다면 power를, limit을 넘지 않는다면 그대로</span>
        <span class="n">count</span> <span class="o">=</span> <span class="n">count</span> <span class="o">&gt;</span> <span class="n">limit</span> <span class="p">?</span> <span class="nv">power</span> <span class="p">:</span> <span class="n">count</span>
        <span class="n">result</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="n">count</span><span class="p">)</span>
        
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">result</span><span class="o">.</span><span class="nf">reduce</span><span class="p">(</span><span class="mi">0</span><span class="p">){</span><span class="nv">$0</span> <span class="o">+</span> <span class="nv">$1</span><span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h1 id="나의-풀이방법">나의 풀이방법</h1>
<ul>
  <li>채점 시 11번 ~ 16번 그 근처에 시간초과로 계속 실패했다.</li>
  <li>약수구하는 다른방법을 찾으면 시간을 줄일 수 있을 것 같은데 찾지 못했고 어려웠다 ㅠ</li>
  <li>결국 구글 검색으로 해결 …..</li>
</ul>

<p><br /></p>

<h1 id="다른사람-풀이">다른사람 풀이</h1>
<ul>
  <li>전체적인 방법은 비슷한데 결국 약수구하는 방법에서 차이가 많이 났다. 통과 못한적은 처음인데 다시 공부해봐야겠다 😭</li>
</ul>]]></content><author><name>HyeongSub Lim</name></author><category term="Algorithm" /><category term="Algorithm" /><category term="coding test" /><category term="기사단원의 무기" /><summary type="html"><![CDATA[[프로그래머스/Swift] ⭐️기사단원의 무기⭐️]]></summary></entry><entry><title type="html">[내배캠] 앱개발 입문 팀 프로젝트 만들기 / KPT 회고</title><link href="http://localhost:4000/sparta/firstTeamProjectKPT/" rel="alternate" type="text/html" title="[내배캠] 앱개발 입문 팀 프로젝트 만들기 / KPT 회고" /><published>2024-04-09T00:00:00+09:00</published><updated>2024-04-09T00:00:00+09:00</updated><id>http://localhost:4000/sparta/firstTeamProjectKPT</id><content type="html" xml:base="http://localhost:4000/sparta/firstTeamProjectKPT/"><![CDATA[<h1 id="온보딩-프로젝트-kpt-회고">온보딩 프로젝트 KPT 회고</h1>
<p>온보딩 프로젝트 발표가 끝났습니다. <br />
팀원들과 프로젝트를 통해 느낀 “Keep (계속할 것)”, “Problem (문제)”, “Try (시도할 것)”의 세 가지 요소를 토대로 프로젝트의 경험을 돌아보고 이야기를 나누었습니다.</p>

<h2 id="keep">Keep</h2>
<ul>
  <li>팀원들 간의 소통에 어려움 없이, 커뮤니케이션이 진행되었다.</li>
  <li>각자 자신이 하고 싶은 파트를 맡아서 진행하여 더욱 책임감을 가지고 각자의 파트를 완수하였다.</li>
  <li>개인이 바라는 기능에 대한 강한 의견 제안보다, 팀 전체 프로젝트 목표를 달성하는 방향을 추구하며 트러블 없이 프로젝트를 완수하였다.</li>
</ul>

<h2 id="problem">Problem</h2>
<ul>
  <li>다양한 문제 해결 방법에 대한 인지
    <ul>
      <li>문제점 : 같은 결과를 내기위해 여러가지 구현 방법이 있을 텐데, 다른 방법을 찾아내기 위한 키워드를 알아내기 어려웠다.</li>
      <li>해결방안 : 결국에는 공부를 통해서 다양한 키워드를 알 수 있도록 해야 함을 느꼈다.</li>
    </ul>
  </li>
  <li>Git 협업
    <ul>
      <li>문제점 : 깃허브를 통한 협업 시 코드컨벤션을 자세하게 작성하지 않아 충돌되는 문제가 발생했다.</li>
      <li>해결방안 : 기획 단계에서 구체적인 코드컨벤션을 작성하고 프로젝트를 시작해야 한다.</li>
    </ul>
  </li>
</ul>

<h2 id="try">Try</h2>
<ul>
  <li>프로젝트를 진행하며, 나름 디테일하게 생각하고 많은 부분을 앱에 담으려고 노력하고 생각했음에도 불구하고, 다른 팀들의 발표를 보니, 버튼의 색상을 설정하거나, 제품군 안에 한 단계 더 세분화 된 seg를 넣거나, 제품의 색상을 선택하게 하는 등의 놓친 부분이 꽤 많았음을 깨달았다. 다음 프로젝트를 할 때는 좀 더 세세하게 챙겨야겠다는 생각을 했다.</li>
  <li>충분히 유져 입장에서 생각을 했다고 하였지만, 결과론적으로 다른 조의 프로젝트와 비교했을 때, 조금은 내실이 부족했다 라는 생각이 든다. 화면 구성이나 기능적인 측면에서 좀 더 유져의 입장에서 생각을 해야겠다 라고 반성을 하게 된다.</li>
  <li>기획 단계에서 지금보다 더 상세한 UI 구성이 필요하고, 가능하다면 협업툴(피그마)을 사용한 협업을 경험해보면 좋을 것 같다.</li>
</ul>

<h1 id="마무리">마무리</h1>
<p>온보딩 프로젝트보다 많은 소통으로 좋은 결과물이 나온것 같아 만족스럽고 여전히 부족한 점이 많지만 조금 성장하고 있다는 생각을 했습니다.<br />
이번 프로젝트를 돌아보고 다음 프로젝트에서 발전된 방향으로 프로젝트를 진행하도록 하겠습니다.</p>]]></content><author><name>HyeongSub Lim</name></author><category term="sparta" /><category term="KPT 회고" /><summary type="html"><![CDATA[앱개발 입문 팀 프로젝트 이후 KPT 회고 작성하기]]></summary></entry></feed>