<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-04-30T21:12:45+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">limlogging Devlog</title><author><name>HyeongSub Lim</name></author><entry><title type="html">[TIL] 내배캠 iOS앱 개발 공부 45일차 - 2024.04.30(화)</title><link href="http://localhost:4000/TIL/til45/" rel="alternate" type="text/html" title="[TIL] 내배캠 iOS앱 개발 공부 45일차 - 2024.04.30(화)" /><published>2024-04-30T00:00:00+09:00</published><updated>2024-04-30T00:00:00+09:00</updated><id>http://localhost:4000/TIL/til45</id><content type="html" xml:base="http://localhost:4000/TIL/til45/"><![CDATA[<h3 id="데일리-스크럼">데일리 스크럼</h3>
<ul>
  <li>정말 정말 오랜만에 다시 작성한 데일리 스크럼, 팀프로젝트하고 하다보니 잘 못썼는데 팀 변경 후 첫날 다시 작성했다.<br />
<img src="/assets/images/categories/til/2024-04-30-til45.png" alt="" /></li>
</ul>

<h3 id="알고리즘">알고리즘</h3>
<ul>
  <li>1~2주 전에 시간초과로 못풀었던 문제를 다시 풀었는데 역시나 시간 초과라 구글 검색으로 해결했다.</li>
  <li>정답은 맞는데… 시간초과가 발생하는 문제가 하나 둘 생기고 있다. ㅠ ㅠ</li>
  <li>풀이 보기
    <ul>
      <li><a href="https://limlogging.github.io/algorithm/%EC%88%AB%EC%9E%90%EC%A7%9D%EA%BF%8D/" target="_blank">숫자 짝꿍</a></li>
    </ul>
  </li>
</ul>

<h3 id="팀-적응">팀 적응</h3>
<ul>
  <li>프로젝트가 끝나면 찾아오는 새로운 팀편성 …. 새로운 팀원들과 인사하고 이야기하기 완료!</li>
</ul>

<h3 id="내일-목표">내일 목표</h3>
<ul>
  <li>내배캠 강의 듣기, 공부 내용 포스팅하기</li>
</ul>]]></content><author><name>HyeongSub Lim</name></author><category term="TIL" /><category term="TIL" /><summary type="html"><![CDATA[내배캠 iOS앱 개발 공부 45일차 이야기 - 2024.04.30(화)]]></summary></entry><entry><title type="html">[UIKit] MVC(Model, View, Controller) 패턴이란?</title><link href="http://localhost:4000/UIKit/MVC/" rel="alternate" type="text/html" title="[UIKit] MVC(Model, View, Controller) 패턴이란?" /><published>2024-04-30T00:00:00+09:00</published><updated>2024-04-30T00:00:00+09:00</updated><id>http://localhost:4000/UIKit/MVC</id><content type="html" xml:base="http://localhost:4000/UIKit/MVC/"><![CDATA[<h1 id="mvc-패턴이란">MVC 패턴이란?</h1>
<ul>
  <li>MVC 패턴은 모델(Model), 뷰(View), 컨트롤러(Controller)의 약자</li>
  <li>소프트웨어 아키텍처 디자인 패턴 중 하나입니다. 이 패턴은 앱 또는 소프트웨어를 구성하는 세 가지 주요 구성 요소를 분리하여 각각의 역할을 할당합니다.</li>
</ul>

<h2 id="모델model">모델(Model)</h2>
<ul>
  <li>앱의 데이터와 비즈니스 로직을 담당합니다. (로직보다는 데이터 모델의 비중이 높은듯)</li>
  <li>데이터의 상태를 관리하고 조작합니다.</li>
  <li>주로 데이터 구조, 데이터베이스 연결, API 통신 등을 처리합니다.</li>
  <li>영화에 출연한 배우 정보가 담기는 데이터 모델</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">struct</span> <span class="kt">PersonResults</span><span class="p">:</span> <span class="kt">Decodable</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">results</span><span class="p">:</span> <span class="p">[</span><span class="kt">Person</span><span class="p">]</span>
<span class="p">}</span>

<span class="kd">struct</span> <span class="kt">Person</span><span class="p">:</span> <span class="kt">Decodable</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">id</span><span class="p">:</span> <span class="kt">Int</span>
    <span class="k">let</span> <span class="nv">name</span><span class="p">:</span> <span class="kt">String</span>
    <span class="k">let</span> <span class="nv">profilePath</span><span class="p">:</span> <span class="kt">String</span><span class="p">?</span>
    <span class="k">let</span> <span class="nv">knownFor</span><span class="p">:</span> <span class="p">[</span><span class="kt">KnownFor</span><span class="p">]</span>
    
    <span class="kd">enum</span> <span class="kt">CodingKeys</span><span class="p">:</span> <span class="kt">String</span><span class="p">,</span> <span class="kt">CodingKey</span> <span class="p">{</span>
        <span class="k">case</span> <span class="n">id</span>
        <span class="k">case</span> <span class="n">name</span>
        <span class="k">case</span> <span class="n">profilePath</span> <span class="o">=</span> <span class="s">"profile_path"</span>
        <span class="k">case</span> <span class="n">knownFor</span> <span class="o">=</span> <span class="s">"known_for"</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">struct</span> <span class="kt">KnownFor</span><span class="p">:</span> <span class="kt">Decodable</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">backdropPath</span><span class="p">:</span> <span class="kt">String</span><span class="p">?</span>
    <span class="k">let</span> <span class="nv">id</span><span class="p">:</span> <span class="kt">Int</span>
    <span class="k">let</span> <span class="nv">originalTitle</span><span class="p">:</span> <span class="kt">String</span><span class="p">?</span>
    <span class="k">let</span> <span class="nv">overview</span><span class="p">:</span> <span class="kt">String</span>
    <span class="k">let</span> <span class="nv">title</span><span class="p">:</span> <span class="kt">String</span><span class="p">?</span>
    <span class="k">let</span> <span class="nv">posterPath</span><span class="p">:</span> <span class="kt">String</span><span class="p">?</span>
    <span class="k">let</span> <span class="nv">name</span><span class="p">:</span> <span class="kt">String</span><span class="p">?</span>
    <span class="k">let</span> <span class="nv">releaseDate</span><span class="p">:</span> <span class="kt">String</span><span class="p">?</span>
    
    <span class="kd">enum</span> <span class="kt">CodingKeys</span><span class="p">:</span> <span class="kt">String</span><span class="p">,</span> <span class="kt">CodingKey</span> <span class="p">{</span>
        <span class="k">case</span> <span class="n">backdropPath</span> <span class="o">=</span> <span class="s">"backdrop_path"</span>
        <span class="k">case</span> <span class="n">id</span>
        <span class="k">case</span> <span class="n">originalTitle</span> <span class="o">=</span> <span class="s">"original_title"</span>
        <span class="k">case</span> <span class="n">overview</span>
        <span class="k">case</span> <span class="n">title</span>
        <span class="k">case</span> <span class="n">posterPath</span> <span class="o">=</span> <span class="s">"poster_path"</span>
        <span class="k">case</span> <span class="n">name</span>
        <span class="k">case</span> <span class="n">releaseDate</span> <span class="o">=</span> <span class="s">"release_date"</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="뷰view">뷰(View)</h2>
<ul>
  <li>사용자에게 데이터를 시각적으로 표시합니다. (모델이 가지고 있는 데이터를 뷰/화면에 표시)</li>
  <li>사용자 인터페이스의 구성 요소를 표시하고 사용자 입력을 받습니다.</li>
  <li>주로 UI 코드와 관련된 로직을 처리합니다.
<img src="../../assets/images/categories/uikit/2024-04-30-MVC.png" alt="뷰" /></li>
</ul>

<h2 id="컨트롤러controller">컨트롤러(Controller)</h2>
<ul>
  <li>컨트롤러는 모델과 뷰 간의 상호 작용을 관리
    <ul>
      <li>사용자 입력을 받아 모델에 전달하고, 모델로부터 데이터를 가져와 뷰에 전달합니다.</li>
    </ul>
  </li>
  <li>비즈니스 로직과 사용자 인터페이스 간의 통신을 조율합니다.</li>
</ul>

<h1 id="mvc-모델-장단점">MVC 모델 장단점</h1>
<h2 id="장점">장점</h2>
<ul>
  <li>소프트웨어를 세 가지 주요 부분으로 분할하여 구조화하기 때문에 개발자들에게 직관적이고 이해하기 쉬운 구조를 제공합니다.</li>
  <li>모델(Model), 뷰(View), 컨트롤러(Controller)로 구분하여 각 부분이 서로 독립적으로 작동하면서 전체적인 애플리케이션 로직을 구성합니다.</li>
</ul>

<h2 id="단점">단점</h2>
<ul>
  <li>컨트롤러가 매우 비대해지는 경향이 있습니다.</li>
  <li>이는 하나의 뷰 컨트롤러에 많은 역할과 책임이 집중되어 복잡성을 증가시키고 유지보수를 어렵게 만듭니다.</li>
  <li>테스트 코드를 작성하기가 힘듭니다.</li>
  <li>뷰 컨트롤러안에 레이블, 버튼도 넣고, 모델도 선언하고 … (코드로 UI작성 시)
    <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="c1">// MARK: - 배우 정보 확인</span>
<span class="kd">class</span> <span class="kt">ProfileViewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>  
  <span class="k">var</span> <span class="nv">person</span><span class="p">:</span> <span class="kt">Person</span><span class="p">?</span>         <span class="c1">//TMDB받아온 데이터를 담을 구조체 타입 변수</span>
    
  <span class="c1">// MARK: - 프로필 사진과 이름이 담기는 뷰</span>
  <span class="k">var</span> <span class="nv">profileView</span><span class="p">:</span> <span class="kt">UIView</span> <span class="o">=</span> <span class="p">{</span>
      <span class="k">let</span> <span class="nv">view</span> <span class="o">=</span> <span class="kt">UIView</span><span class="p">()</span>
      <span class="n">view</span><span class="o">.</span><span class="n">clipsToBounds</span> <span class="o">=</span> <span class="kc">true</span>
      <span class="n">view</span><span class="o">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="kc">false</span>
      <span class="k">return</span> <span class="n">view</span>
  <span class="p">}()</span>
    
  <span class="c1">// MARK: - 배우 프로필 사진</span>
  <span class="k">var</span> <span class="nv">profileImageView</span><span class="p">:</span> <span class="kt">UIImageView</span> <span class="o">=</span> <span class="p">{</span>
      <span class="k">let</span> <span class="nv">imageView</span> <span class="o">=</span> <span class="kt">UIImageView</span><span class="p">()</span>
      <span class="n">imageView</span><span class="o">.</span><span class="n">layer</span><span class="o">.</span><span class="n">cornerRadius</span> <span class="o">=</span> <span class="mi">75</span>
      <span class="n">imageView</span><span class="o">.</span><span class="n">clipsToBounds</span> <span class="o">=</span> <span class="kc">true</span>
      <span class="n">imageView</span><span class="o">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="kc">false</span>
      <span class="k">return</span> <span class="n">imageView</span>
</code></pre></div>    </div>
  </li>
</ul>

<h1 id="마무리">마무리</h1>
<ul>
  <li>각자의 역할과 책임을 나누기위해서 MVC 패턴 사용한다. (단순하게 코드 나누기)</li>
  <li>뷰와 뷰 컨트롤러가 하나로 합쳐지는 경우가 많지만 그래도 MVC 패턴이다.</li>
</ul>]]></content><author><name>HyeongSub Lim</name></author><category term="UIKit" /><category term="swift" /><category term="iOS" /><category term="MVC" /><category term="MVC 패턴" /><summary type="html"><![CDATA[MVC 패턴이란?]]></summary></entry><entry><title type="html">[프로그래머스/Swift] ⭐️숫자 짝꿍⭐️</title><link href="http://localhost:4000/algorithm/%EC%88%AB%EC%9E%90%EC%A7%9D%EA%BF%8D/" rel="alternate" type="text/html" title="[프로그래머스/Swift] ⭐️숫자 짝꿍⭐️" /><published>2024-04-30T00:00:00+09:00</published><updated>2024-04-30T00:00:00+09:00</updated><id>http://localhost:4000/algorithm/%EC%88%AB%EC%9E%90%EC%A7%9D%EA%BF%8D</id><content type="html" xml:base="http://localhost:4000/algorithm/%EC%88%AB%EC%9E%90%EC%A7%9D%EA%BF%8D/"><![CDATA[<h1 id="문제-설명">문제 설명</h1>
<ul>
  <li>두 정수 X, Y의 임의의 자리에서 공통으로 나타나는 정수 k(0 ≤ k ≤ 9)들을 이용하여 만들 수 있는 가장 큰 정수를 두 수의 짝꿍이라 합니다(단, 공통으로 나타나는 정수 중 서로 짝지을 수 있는 숫자만 사용합니다). X, Y의 짝꿍이 존재하지 않으면, 짝꿍은 -1입니다. X, Y의 짝꿍이 0으로만 구성되어 있다면, 짝꿍은 0입니다.</li>
  <li>예를 들어, X = 3403이고 Y = 13203이라면, X와 Y의 짝꿍은 X와 Y에서 공통으로 나타나는 3, 0, 3으로 만들 수 있는 가장 큰 정수인 330입니다. 다른 예시로 X = 5525이고 Y = 1255이면 X와 Y의 짝꿍은 X와 Y에서 공통으로 나타나는 2, 5, 5로 만들 수 있는 가장 큰 정수인 552입니다(X에는 5가 3개, Y에는 5가 2개 나타나므로 남는 5 한 개는 짝 지을 수 없습니다.)</li>
  <li>두 정수 X, Y가 주어졌을 때, X, Y의 짝꿍을 return하는 solution 함수를 완성해주세요.</li>
  <li><a href="https://school.programmers.co.kr/learn/courses/30/lessons/131128" target="_blank">문제 풀기</a></li>
</ul>

<h1 id="제한사항">제한사항</h1>
<ul>
  <li>3 ≤ X, Y의 길이(자릿수) ≤ 3,000,000입니다.</li>
  <li>X, Y는 0으로 시작하지 않습니다.</li>
  <li>X, Y의 짝꿍은 상당히 큰 정수일 수 있으므로, 문자열로 반환합니다.</li>
</ul>

<h1 id="입출력-예">입출력 예</h1>

<table>
  <thead>
    <tr>
      <th style="text-align: center">X</th>
      <th style="text-align: center">Y</th>
      <th style="text-align: center">result</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">“100”</td>
      <td style="text-align: center">“2345”</td>
      <td style="text-align: center">“-1”</td>
    </tr>
    <tr>
      <td style="text-align: center">“100”</td>
      <td style="text-align: center">“203045”</td>
      <td style="text-align: center">“0”</td>
    </tr>
    <tr>
      <td style="text-align: center">“100”</td>
      <td style="text-align: center">“123450”</td>
      <td style="text-align: center">“10”</td>
    </tr>
    <tr>
      <td style="text-align: center">“12321”</td>
      <td style="text-align: center">“42531”</td>
      <td style="text-align: center">“321”</td>
    </tr>
    <tr>
      <td style="text-align: center">“5525”</td>
      <td style="text-align: center">“1255”</td>
      <td style="text-align: center">“552”</td>
    </tr>
  </tbody>
</table>

<h2 id="입출력-예-설명">입출력 예 설명</h2>
<h3 id="입출력-예-1">입출력 예 #1</h3>
<ul>
  <li>X, Y의 짝꿍은 존재하지 않습니다. 따라서 “-1”을 return합니다.</li>
</ul>

<h3 id="입출력-예-2">입출력 예 #2</h3>
<ul>
  <li>X, Y의 공통된 숫자는 0으로만 구성되어 있기 때문에, 두 수의 짝꿍은 정수 0입니다. 따라서 “0”을 return합니다.</li>
</ul>

<h3 id="입출력-예-3">입출력 예 #3</h3>
<ul>
  <li>X, Y의 짝꿍은 10이므로, “10”을 return합니다.</li>
</ul>

<h3 id="입출력-예-4">입출력 예 #4</h3>
<ul>
  <li>X, Y의 짝꿍은 321입니다. 따라서 “321”을 return합니다.</li>
</ul>

<h3 id="입출력-예-5">입출력 예 #5</h3>
<ul>
  <li>지문에 설명된 예시와 같습니다.</li>
</ul>

<h1 id="나의-풀이-시간-초과-실패-코드">나의 풀이 (시간 초과 실패 코드)</h1>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">Foundation</span>

<span class="kd">func</span> <span class="nf">solution</span><span class="p">(</span><span class="n">_</span> <span class="kt">X</span><span class="p">:</span><span class="kt">String</span><span class="p">,</span> <span class="n">_</span> <span class="kt">Y</span><span class="p">:</span><span class="kt">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">String</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">arrX</span> <span class="o">=</span> <span class="kt">X</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="nv">$0</span> <span class="p">}</span>
    <span class="k">var</span> <span class="nv">arrY</span> <span class="o">=</span> <span class="kt">Y</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="nv">$0</span> <span class="p">}</span>
    <span class="k">var</span> <span class="nv">result</span><span class="p">:</span> <span class="p">[</span><span class="kt">String</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
    
    <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span><span class="o">..&lt;</span><span class="n">arrX</span><span class="o">.</span><span class="n">count</span> <span class="p">{</span>
        <span class="k">for</span> <span class="n">j</span> <span class="k">in</span> <span class="mi">0</span><span class="o">..&lt;</span><span class="n">arrY</span><span class="o">.</span><span class="n">count</span> <span class="p">{</span>
            <span class="k">if</span> <span class="n">arrX</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">arrY</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="p">{</span>
                <span class="n">result</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="kt">String</span><span class="p">(</span><span class="n">arrY</span><span class="p">[</span><span class="n">j</span><span class="p">]))</span>
                <span class="n">arrY</span><span class="o">.</span><span class="nf">remove</span><span class="p">(</span><span class="nv">at</span><span class="p">:</span> <span class="n">j</span><span class="p">)</span>  <span class="c1">//중복된 수는 지우기</span>
                <span class="k">break</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
        
    <span class="c1">//중복된 수</span>
    <span class="k">if</span> <span class="kt">Set</span><span class="p">(</span><span class="n">result</span><span class="p">)</span><span class="o">.</span><span class="n">count</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s">"-1"</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="kt">Set</span><span class="p">(</span><span class="n">result</span><span class="p">)</span><span class="o">.</span><span class="nf">reduce</span><span class="p">(</span><span class="s">""</span><span class="p">,</span> <span class="o">+</span><span class="p">)</span> <span class="o">==</span> <span class="s">"0"</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s">"0"</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">result</span><span class="o">.</span><span class="n">sorted</span> <span class="p">{</span> <span class="nv">$0</span> <span class="o">&gt;</span> <span class="nv">$1</span> <span class="p">}</span><span class="o">.</span><span class="nf">reduce</span><span class="p">(</span><span class="s">""</span><span class="p">,</span> <span class="o">+</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h1 id="다른-사람-풀이">다른 사람 풀이</h1>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">Foundation</span>

<span class="kd">func</span> <span class="nf">solution</span><span class="p">(</span><span class="n">_</span> <span class="kt">X</span><span class="p">:</span><span class="kt">String</span><span class="p">,</span> <span class="n">_</span> <span class="kt">Y</span><span class="p">:</span><span class="kt">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">String</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">result</span><span class="p">:</span> <span class="p">[</span><span class="kt">String</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span><span class="o">..&lt;</span><span class="mi">10</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">xCount</span> <span class="o">=</span> <span class="kt">X</span><span class="o">.</span><span class="n">filter</span> <span class="p">{</span> <span class="kt">String</span><span class="p">(</span><span class="nv">$0</span><span class="p">)</span> <span class="o">==</span> <span class="kt">String</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="p">}</span><span class="o">.</span><span class="n">count</span>
        <span class="k">let</span> <span class="nv">yCount</span> <span class="o">=</span> <span class="kt">Y</span><span class="o">.</span><span class="n">filter</span> <span class="p">{</span> <span class="kt">String</span><span class="p">(</span><span class="nv">$0</span><span class="p">)</span> <span class="o">==</span> <span class="kt">String</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="p">}</span><span class="o">.</span><span class="n">count</span>
        <span class="n">result</span> <span class="o">+=</span> <span class="kt">Array</span><span class="p">(</span><span class="nv">repeating</span><span class="p">:</span> <span class="kt">String</span><span class="p">(</span><span class="n">i</span><span class="p">),</span> <span class="nv">count</span><span class="p">:</span> <span class="nf">min</span><span class="p">(</span><span class="n">xCount</span><span class="p">,</span> <span class="n">yCount</span><span class="p">))</span>
    <span class="p">}</span>
    
    <span class="k">return</span> <span class="n">result</span><span class="o">.</span><span class="n">isEmpty</span> <span class="p">?</span> <span class="s">"-1"</span> <span class="p">:</span> <span class="n">result</span><span class="o">.</span><span class="n">filter</span> <span class="p">{</span> <span class="nv">$0</span> <span class="o">==</span> <span class="s">"0"</span> <span class="p">}</span><span class="o">.</span><span class="n">count</span> <span class="o">==</span> <span class="n">result</span><span class="o">.</span><span class="n">count</span> <span class="p">?</span> <span class="s">"0"</span> <span class="p">:</span> <span class="n">result</span><span class="o">.</span><span class="nf">sorted</span><span class="p">(</span><span class="nv">by</span><span class="p">:</span> <span class="o">&gt;</span><span class="p">)</span><span class="o">.</span><span class="nf">joined</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div></div>

<h1 id="나의-풀이방법">나의 풀이방법</h1>
<ul>
  <li>11 ~ 15번 시간 초과문제로 다른사람 코드를 이용하여 풀었습니다.</li>
  <li>반복문 부분만 다른 사람풀이로 했더니 여전히 문제가 발생하여 return도 삼항연산자를 사용해야 통과할 수 있습니다.</li>
  <li>난이도가 올라갈 수록 시간초과 문제가 많이 발생하고 있다. 다양한 접근 방법을 생각해내야할듯!!!!</li>
</ul>

<p><br /></p>

<h1 id="다른사람-풀이">다른사람 풀이</h1>
<ul>
  <li>x의 최대 길이가 300만이라 공통되는 수 찾는 시간을 줄이는게 핵심인 것 같다.</li>
</ul>]]></content><author><name>HyeongSub Lim</name></author><category term="Algorithm" /><category term="Algorithm" /><category term="swift" /><category term="coding test" /><category term="프로그래머스" /><category term="알고리즘" /><category term="숫자 짝꿍" /><summary type="html"><![CDATA[[프로그래머스/Swift] 숫자 짝꿍]]></summary></entry><entry><title type="html">[내배캠] iOS 앱 개발 숙련 팀 프로젝트 - 영화 앱 만들기 / KPT 회고</title><link href="http://localhost:4000/sparta/mega6boxKPT/" rel="alternate" type="text/html" title="[내배캠] iOS 앱 개발 숙련 팀 프로젝트 - 영화 앱 만들기 / KPT 회고" /><published>2024-04-29T00:00:00+09:00</published><updated>2024-04-29T00:00:00+09:00</updated><id>http://localhost:4000/sparta/mega6boxKPT</id><content type="html" xml:base="http://localhost:4000/sparta/mega6boxKPT/"><![CDATA[<h1 id="앱-개발-숙련-팀-프로젝트-kpt-회고">앱 개발 숙련 팀 프로젝트 KPT 회고</h1>
<p>앱 개발 숙련 팀 프로젝트 발표가 끝났습니다. <br />
팀원들과 프로젝트를 통해 느낀 “Keep (계속할 것)”, “Problem (문제)”, “Try (시도할 것)”의 세 가지 요소를 토대로 프로젝트의 경험을 돌아보고 이야기를 나누었습니다.</p>

<h2 id="keep">Keep</h2>
<ul>
  <li>팀원끼리 모르는것 물어보기</li>
  <li>서로 도우면서 작업하기</li>
  <li>피그마, 캔버스 등을 사용한 협업하기</li>
</ul>

<h2 id="problem">Problem</h2>
<ul>
  <li>커밋메시지 정리
    <ul>
      <li>문제점 : 시간이 갈수록 규칙에 벗어난 커밋메시지 작성</li>
      <li>해결방안 : 바쁘더라도 규칙을 지키기</li>
    </ul>
  </li>
  <li>너무 많은 양의 StoryBoard
    <ul>
      <li>문제점 : 코드베이스가 익숙치 않아 스토리보드 사용</li>
      <li>해결방안 : 코드로 많은 연습과 공부가 필요</li>
    </ul>
  </li>
  <li>TMDB API의 일부 이미지 및 동영상을 활용하지 못한 것</li>
</ul>

<h2 id="try">Try</h2>
<ul>
  <li>코드 컨벤션 만들기</li>
  <li>싱글톤 패턴 장단점 및 사용 이유 체크</li>
  <li>코드베이스로 UI 적용하기</li>
  <li>역할 및 진행 과정 세분화 해서 정리</li>
  <li>깃허브 공부하기</li>
</ul>

<h1 id="마무리">마무리</h1>
<ul>
  <li>지난번 프로젝트보다 기획 단계에서 디자인 협업툴을 사용하여 충분한 이야기를 나누고 프로젝트를 시작했습니다.</li>
  <li>깃허브 충돌로 인해 clone과 강제 push등을 사용하여 아쉬운점이 많습니다.</li>
  <li>노션을 적극적으로 활용하여 현재까지 진행상황과 단기적인 목표를 잡고 소통이 더 필요할 것 같습니다.</li>
</ul>

<p>이번 프로젝트를 돌아보고 다음 프로젝트에서 발전된 방향으로 프로젝트를 진행하도록 하겠습니다.</p>]]></content><author><name>HyeongSub Lim</name></author><category term="sparta" /><category term="KPT 회고" /><summary type="html"><![CDATA[iOS 앱 개발 숙련 팀 프로젝트 이후 KPT 회고 작성하기]]></summary></entry><entry><title type="html">[내배캠] iOS 앱 개발 숙련 팀 프로젝트 - 영화 예약 앱 만들기 4 끝</title><link href="http://localhost:4000/sparta/mega6box4/" rel="alternate" type="text/html" title="[내배캠] iOS 앱 개발 숙련 팀 프로젝트 - 영화 예약 앱 만들기 4 끝" /><published>2024-04-29T00:00:00+09:00</published><updated>2024-04-29T00:00:00+09:00</updated><id>http://localhost:4000/sparta/mega6box4</id><content type="html" xml:base="http://localhost:4000/sparta/mega6box4/"><![CDATA[<h1 id="영화-예약-앱-만들기-4">영화 예약 앱 만들기 4</h1>
<ul>
  <li>지난 이야기
    <ul>
      <li><a href="https://limlogging.github.io/sparta/mega6box1/" target="_blank">영화 예약 앱 만들기 1</a></li>
      <li><a href="https://limlogging.github.io/sparta/mega6box2/" target="_blank">영화 예약 앱 만들기 2</a></li>
      <li><a href="https://limlogging.github.io/sparta/mega6box3/" target="_blank">영화 예약 앱 만들기 3</a></li>
    </ul>
  </li>
</ul>

<h1 id="목금토일-이야기">목,금,토,일 이야기</h1>
<ul>
  <li>목요일
    <ul>
      <li>화요일에 네트워크 작업을 할 네트워크 컨트롤러 파일을 만들고 싱글톤 패턴으로 구현하였다. 각자 맡은 부분을 개발하면서 소스코드를 합치지 않은 상태였고 다들 새벽까지 열심히 하길래 문제 없이 진행되는 줄 알았다.</li>
      <li>하지만 네트워크 컨트롤러 파일 내용을 다른 팀원들이 이해하지 못해서 API를 사용하여 데이터 불러오는 작업이 목요일까지 아무도 하지 못했던 것이다 ㅠ ㅠ (작성된 코드 설명이 필요하다고 하셔서 그때 알게되었다.)</li>
      <li>그래서 포스트맨을 사용하여 JSON 데이터를 확인하고 구조체를 생성, 컴플리션 핸들러 동기/비동기에 관련된 내용을 한시간 가량 팀원들에게 설명을하게 되면서 나도 다시 공부할 수 있었다.</li>
      <li>수정한 내용을 깃허브에 올리고 난 후 팀원들에게 공유했는데 2~3시간 후 팀 회의를 통해 어떤 문제(구조체옵셔널) 때문에 로직이 동작을 안했다고 이야기를 하는데 그 내용이 아까 내가 화면을 공유하면서 다 수정한 내용이었고 깃허브에도 올려놓은 내용이었다. (파일이 누락되어 다시 올려놨다고해서 2번 전달)</li>
      <li>아까 다 알려준 내용 깃허브에도 올려놨는데 확인안했냐고 했더니 확인을 안했다고하더라… 조금 당황하고 섭섭했지만 소통에 문제가 있었던 것 같다.</li>
    </ul>
  </li>
  <li>금요일
    <ul>
      <li>영화 정보를 받아오는 부분을 다른 팀원들이 목요일까지 하지 못해서 내가 맡은 부분에서 디테일한 부분은 나중에 하기로하고 다른팀원들을 도와주기로했다. 영화 검색하는 부분에서 어려운 부분이 있다고해서 화면을 공유하면서 라이브 코딩을 하면서 진행했다. (내가 잘해서가 아니라 팀원들이 어떻게 데이터를 받아오는지 궁금하다고 했고 잘 몰라서 구글검색하면서 팀원들과 같이 작업했다.)</li>
      <li>영화 검색으로 데이터를 가져오고 컬렉션뷰에 데이터가 들어간것까지 확인하고 디테일한 작업은 담당자가 하기로했다.</li>
      <li>각자 브랜치를 만들고 맡은 내용을 관리하다가 merge 작업을 하면서 충돌이 발생하고 pull 받고 진행해도 Push가 안되는 등 깃허브 사용에 문제가 많았다. (나 포함 다들 깃허브 사용에 미숙했다.)</li>
      <li>팀원들 중 깃허브 데스크탑 사용에 익숙하신 분이 있어 주로 merge 작업을 해주셨으나 파일을 수동으로 옮기면서 참조로 추가가되고 깃허브 데스크탑도 원활하지 못했다. 지난번에는 내가 merge 담당으로 깃허브 홈페이지에서 풀 리퀘스트로 작업하고 충돌이 많이 없었으나 이번에는 작업을 지켜보는 입장에서 답답한 부분도 많았다. (지난번 팀원들도 나를 답답하게 생각했을것이다.) 하지만 많이 알아야 주도적으로 작업할 수 있으니 지켜보면서 다른 사람의 방법도 익히는 좋은 시간이었다.</li>
    </ul>
  </li>
  <li>토요일
    <ul>
      <li>우여곡절 끝에 merge는 되었고 디테일한 부분을 작업하느라 오후 2시부터 일요일 새벽까지 작업하였다.</li>
      <li>새벽에도 열심히 작업하는 우리 팀원들 정말 대단… 정말 많이 배웠습니다. 💪🏻💪🏻💪🏻💪🏻💪🏻💪🏻💪🏻💪🏻💪🏻💪🏻💪🏻💪🏻💪🏻
  <img src="../../assets/images/categories/sparta/2024-04-29-mega6box.png" alt="" /></li>
    </ul>
  </li>
  <li>일요일
    <ul>
      <li>캔바에서 발표자료 작성을 다 같이 진행하고 메인브랜치에 적용, 리드미 작성을 진행하였다.</li>
    </ul>
  </li>
</ul>

<h1 id="최종-결과물">최종 결과물</h1>
<p><img src="../../assets/images/categories/sparta/2024-04-29-mega6box1.png" width="200" />
<img src="../../assets/images/categories/sparta/2024-04-29-mega6box2.png" width="200" />
<img src="../../assets/images/categories/sparta/2024-04-29-mega6box3.png" width="200" />
<img src="../../assets/images/categories/sparta/2024-04-29-mega6box4.png" width="200" />
<img src="../../assets/images/categories/sparta/2024-04-29-mega6box5.png" width="200" />
<img src="../../assets/images/categories/sparta/2024-04-29-mega6box6.png" width="200" />
<img src="../../assets/images/categories/sparta/2024-04-29-mega6box7.png" width="200" />
<img src="../../assets/images/categories/sparta/2024-04-29-mega6box8.png" width="200" />
<img src="../../assets/images/categories/sparta/2024-04-29-mega6box9.png" width="200" />
<img src="../../assets/images/categories/sparta/2024-04-29-mega6box10.png" width="200" /></p>

<h1 id="문제점-및-해결">문제점 및 해결</h1>
<p><img src="../../assets/images/categories/sparta/2024-04-29-mega6box11.png" alt="" /></p>

<h1 id="느낀점">느낀점</h1>
<p><img src="../../assets/images/categories/sparta/2024-04-29-mega6box12.png" alt="" /></p>

<h1 id="마무리">마무리</h1>
<ul>
  <li>3주 가까이 캠켜놓고 공부했더니 오랜시간 함께한듯한 우리 팀원들, 성향도 비슷해 큰 문제없이 마무리 잘 할 수 있었던 것 같다.</li>
  <li>팀원들을 통해서 많이 배울 수 있었다. 🔥🔥🔥🔥🔥🔥</li>
</ul>]]></content><author><name>HyeongSub Lim</name></author><category term="sparta" /><category term="sparta" /><category term="앱 개발 숙련" /><category term="movie app" /><category term="ios" /><category term="uikit" /><category term="swift" /><category term="영화 앱" /><summary type="html"><![CDATA[iOS 앱 개발 숙련 팀 프로젝트 - 영화 예약 앱 만들기 4 끝]]></summary></entry><entry><title type="html">[내배캠] iOS 앱 개발 숙련 팀 프로젝트 - 영화 예약 앱 만들기 3</title><link href="http://localhost:4000/sparta/mega6box3/" rel="alternate" type="text/html" title="[내배캠] iOS 앱 개발 숙련 팀 프로젝트 - 영화 예약 앱 만들기 3" /><published>2024-04-24T00:00:00+09:00</published><updated>2024-04-24T00:00:00+09:00</updated><id>http://localhost:4000/sparta/mega6box3</id><content type="html" xml:base="http://localhost:4000/sparta/mega6box3/"><![CDATA[<h1 id="영화-예약-앱-만들기-3">영화 예약 앱 만들기 3</h1>
<ul>
  <li>지난 이야기
    <ul>
      <li><a href="https://limlogging.github.io/sparta/mega6box1/" target="_blank">영화 예약 앱 만들기 1</a></li>
      <li><a href="https://limlogging.github.io/sparta/mega6box2/" target="_blank">영화 예약 앱 만들기 2</a></li>
    </ul>
  </li>
</ul>

<h1 id="역할-배분">역할 배분</h1>
<ul>
  <li>태담: 런치스크린, 회원가입/로그인</li>
  <li>유진: 메인페이지, 마이페이지, 내 정보 관리</li>
  <li>민희: 예매, 검색</li>
  <li>형섭: 영화 세부정보, 감독/등장인물</li>
</ul>

<h1 id="영화-상세-페이지-구현-상황">영화 상세 페이지 구현 상황</h1>
<ul>
  <li>현재까지 구현한 내용입니다.</li>
  <li>오토레이아웃을 잡아야하는데 하나라도 어긋나는 경우 배우 슬라이드 이미지가 사라져서 신경써서 수정이 필요합니다. ㅠ</li>
  <li>배우 얼굴을 선택하면 필모그래피페이지로 넘어갑니다. 
<img src="../../assets/images/categories/sparta/2024-04-24-mega6box9.png" alt="영화 상세 페이지" /></li>
</ul>

<h1 id="배우-필모그래피-페이지-구현-상황">배우 필모그래피 페이지 구현 상황</h1>
<ul>
  <li>여기 페이지는 코드로만 작성했다. 상세페이지보다는 그나마 수월하게 구현완료 
<img src="../../assets/images/categories/sparta/2024-04-24-mega6box10.png" alt="배우 필모그래피 페이지" /></li>
</ul>

<h1 id="내일-할-일">내일 할 일</h1>
<ul>
  <li>오토레이아웃 수정 및 디테일 수정</li>
</ul>]]></content><author><name>HyeongSub Lim</name></author><category term="sparta" /><category term="sparta" /><category term="앱 개발 숙련" /><category term="movie app" /><category term="ios" /><category term="uikit" /><category term="swift" /><category term="영화 앱" /><summary type="html"><![CDATA[iOS 앱 개발 숙련 팀 프로젝트 - 영화 예약 앱 만들기 3]]></summary></entry><entry><title type="html">[내배캠] iOS 앱 개발 숙련 팀 프로젝트 - 영화 예약 앱 만들기 2</title><link href="http://localhost:4000/sparta/mega6box2/" rel="alternate" type="text/html" title="[내배캠] iOS 앱 개발 숙련 팀 프로젝트 - 영화 예약 앱 만들기 2" /><published>2024-04-23T00:00:00+09:00</published><updated>2024-04-23T00:00:00+09:00</updated><id>http://localhost:4000/sparta/mega6box2</id><content type="html" xml:base="http://localhost:4000/sparta/mega6box2/"><![CDATA[<h1 id="영화-예약-앱-만들기-2">영화 예약 앱 만들기 2</h1>
<ul>
  <li>지난 이야기
    <ul>
      <li><a href="https://limlogging.github.io/sparta/mega6box1/" target="_blank">영화 예약 앱 만들기 1</a></li>
    </ul>
  </li>
</ul>

<h1 id="역할-배분">역할 배분</h1>
<ul>
  <li>태담: 런치스크린, 회원가입/로그인</li>
  <li>유진: 메인페이지, 마이페이지, 내 정보 관리</li>
  <li>민희: 예매, 검색</li>
  <li>형섭: 영화 세부정보, 감독/등장인물</li>
</ul>

<h1 id="영화-상세-페이지-구현-상황">영화 상세 페이지 구현 상황</h1>
<ul>
  <li>현재까지 구현한 내용입니다.</li>
  <li>영화 ID를 가지고 영화 상세 페이지, 출연 배우 2가지 API를 사용해서 조합하여 만들었습니다.</li>
  <li>등장인물은 사진의 데이터가 nil이면 보이지 않게 하였고 좌우로 스크롤하여 등장인물을 확인할 수 있습니다.</li>
  <li>생각보다 페이지 1개를 구현하는데 너무 오래 걸려서 내용을 먼저 구현하고 디테일은 나중에 신경써야겠습니다.</li>
  <li>파묘데이터를 가져왔습니다! 
<img src="../../assets/images/categories/sparta/2024-04-23-mega6box8.png" alt="영화상세페이지" /></li>
</ul>

<h1 id="내일-할-일">내일 할 일</h1>
<ul>
  <li>배우 필모그래피 관련페이지 구현하기 !</li>
</ul>]]></content><author><name>HyeongSub Lim</name></author><category term="sparta" /><category term="sparta" /><category term="앱 개발 숙련" /><category term="movie app" /><category term="ios" /><category term="uikit" /><category term="swift" /><category term="영화 앱" /><summary type="html"><![CDATA[iOS 앱 개발 숙련 팀 프로젝트 - 영화 예약 앱 만들기 2]]></summary></entry><entry><title type="html">[내배캠] iOS 앱 개발 숙련 팀 프로젝트 - 영화 예약 앱 만들기 1</title><link href="http://localhost:4000/sparta/mega6box1/" rel="alternate" type="text/html" title="[내배캠] iOS 앱 개발 숙련 팀 프로젝트 - 영화 예약 앱 만들기 1" /><published>2024-04-22T00:00:00+09:00</published><updated>2024-04-22T00:00:00+09:00</updated><id>http://localhost:4000/sparta/mega6box1</id><content type="html" xml:base="http://localhost:4000/sparta/mega6box1/"><![CDATA[<h1 id="영화-예약-앱-만들기">영화 예약 앱 만들기</h1>
<ul>
  <li>개인 프로젝트인 위시리스트 앱 만들기가 끝나고 팀프로젝트 발제가 있었습니다.</li>
  <li>프로젝트 주제는 킥보드 앱 만들기 또는 영화예약 앱 만들기 중 선택할 수 있었고 팀원들의 의견을 모아 영화 예약 앱을 만들기로 하였습니다.</li>
</ul>

<h1 id="필수-구현-기능">필수 구현 기능</h1>
<ul>
  <li>로그인 화면/회원가입 화면
    <ul>
      <li>앱에 진입했을 때 로그인을 먼저 진행합니다.</li>
      <li>회원가입 버튼을 누르면 아이디와 비밀번호를 입력받아 회원가입을 하고, 완료되면 다시 로그인 화면으로 이동합니다(아이디와 비밀번호 이외에 다른 정보들을 받아도 됩니다).</li>
      <li>로그인이 완료되면 UserDefault에 아이디와 비밀번호를 저장해서 이후 로그인할 때 아이디와 비밀번호가 자동으로 입력되어 있도록 합니다.</li>
      <li>로그인이 완료되면 상단 TapBar가 있는 화면으로 이동하면 됩니다.</li>
      <li>필수 기능 요소
        <ul>
          <li><code class="language-plaintext highlighter-rouge">UserDefaults</code>를 활용하여 아이디와 비밀번호, 기타 정보를 저장해주세요.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>영화 목록 페이지
    <ul>
      <li>상단 <strong>TapBar의 첫번째 화면</strong>입니다.</li>
      <li>영화 이미지들은 좌우 스크롤 가능하도록 구현해주세요</li>
      <li>필수 기능 요소
        <ul>
          <li><code class="language-plaintext highlighter-rouge">UICollectionView</code>를 활용하여 영화 포스터를 표시해주세요.</li>
          <li>사용자가 직접 상호 작용할 수 있는 다양한 기능을 제공해보세요.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>영화 세부 페이지
    <ul>
      <li>영화를 클릭시 영화의 세부 페이지로 이동해주세요</li>
      <li>영화의 정보를 함께 페이지에 보여주세요</li>
    </ul>
  </li>
  <li>영화 예매 입력 페이지
    <ul>
      <li>영화 세부 페이지에서 입력하기 버튼 클릭시 해당 페이지로 이동해주세요</li>
      <li>예매를 위해 입력해야 할 것들을 입력 가능하도록 구성해주세요</li>
      <li>결제하기 버튼을 누르면 결제 내역이 마이페이지에서 보이도록 해주세요</li>
    </ul>
  </li>
  <li>영화 검색 페이지
    <ul>
      <li>상단 <strong>TapBar의 두번째 화면</strong>입니다.</li>
      <li>검색창에 텍스트를 입력하고 검색 버튼 클릭시 해당 텍스트가 포함된 영화들을 보여주세요</li>
      <li><code class="language-plaintext highlighter-rouge">UICollectionView</code>를 활용하여 영화 포스터를 표시해주세요.</li>
    </ul>
  </li>
  <li>마이 페이지
    <ul>
      <li>상단 <strong>TapBar의 세번째 화면</strong>입니다.</li>
      <li>사용자의 정보와 관련된 기능을 모아서 제공하는 페이지를 자유롭게 만들어보세요.</li>
      <li>나의 필요한 계정 정보들을 표시해주세요(회원가입시 받은 정보들 활용)</li>
      <li>예매한 영화 내역을 볼 수 있도록 해주세요</li>
    </ul>
  </li>
</ul>

<h1 id="sa-starting-assignments-작성하기">S.A (Starting Assignments) 작성하기</h1>
<ul>
  <li>영화예매 및 영화정보 등장인물 필모그래피가 들어간 앱</li>
  <li>프로젝트 제목
    <ul>
      <li>메가 6 박스 = 메가박스와 6조의 합작품</li>
    </ul>
  </li>
  <li>프로젝트 설명
    <ul>
      <li>API를 사용한 영화 예매 앱 구현</li>
      <li>API를 사용하여 영화 정보 받아오기</li>
      <li>API를 사용하여 배우 정보 받아오기</li>
      <li>코어데이터를 활용한 회원정보 및 영화 예매 정보 확인 구현</li>
      <li>영화 정보를 활용한 영화 예매 기능 구현</li>
      <li>싱글톤 패턴, 델리게이트 등을 사용한 구현</li>
    </ul>
  </li>
  <li>프로젝트 구현 페이지
    <ul>
      <li>런치스크린</li>
      <li>회원가입/로그인 선택</li>
      <li>로그인</li>
      <li>회원가입</li>
      <li>메인(예매 가능 영화 목록)</li>
      <li>영화 예매</li>
      <li>영화 세부 정보</li>
      <li>감독/등장인물</li>
      <li>영화 검색</li>
      <li>마이 페이지</li>
      <li>내 정보 관리</li>
    </ul>
  </li>
  <li>개발기능정리
    <ul>
      <li>API</li>
      <li>sync / async</li>
      <li>URLSession</li>
      <li>CoreData</li>
      <li>UICollectionView</li>
      <li>UITableView</li>
      <li>Searchbar</li>
      <li>UIRefreshControl</li>
      <li>Navigation Bar</li>
    </ul>
  </li>
</ul>

<h1 id="결과물에-대한목업mockup그려보기">결과물에 대한 목업(MOCKUP) 그려보기</h1>
<ul>
  <li>피그마를 사용해본 경험이 있는 팀장님과 팀원들 덕분에 피그마에서 작업을 해볼 수 있었습니다.</li>
  <li>쉽게 디자인 할 수 있어 프로젝트 규모가 커져버렸습니다.</li>
  <li>와이어 프레임 
<img src="../../assets/images/categories/sparta/2024-04-22-mega6box1.png" alt="피그마1" /></li>
</ul>

<p><img src="../../assets/images/categories/sparta/2024-04-22-mega6box2.png" alt="피그마2" /></p>

<ul>
  <li>색상 입히기 및 화면 연결하기</li>
</ul>

<p><img src="../../assets/images/categories/sparta/2024-04-22-mega6box3.png" alt="피그마3" /></p>

<ul>
  <li>참고 자료</li>
</ul>

<p><img src="../../assets/images/categories/sparta/2024-04-22-mega6box4.png" alt="피그마4" /></p>

<h1 id="영화-정보를-받아오기-위한-api-사용하기">영화 정보를 받아오기 위한 API 사용하기</h1>
<ul>
  <li>영화 정보 API
    <ul>
      <li><a href="https://www.kobis.or.kr/kobisopenapi/homepg/main/main.do" target="_blank">영화진흥위원회 오픈 API</a></li>
      <li><a href="https://www.themoviedb.org/" target="_blank">The Movie Database(TMDB) API</a></li>
      <li><a href="https://www.kmdb.or.kr/info/api/apiList?menuIndex=119" target="_blank">한국영화데이터베이스(KMDB) API</a></li>
    </ul>
  </li>
  <li>영화 정보를 가져올 수 있는 곳을 구글검색하여 3가지로 추려서 TMDB를 사용하기로 결정하였습니다.</li>
</ul>

<h1 id="런치-스크린-이미지-만들기">런치 스크린 이미지 만들기</h1>
<ul>
  <li><a href="https://www.canva.com/" target="_blank">canva</a></li>
  <li>canva에서 런치스크린 이미지를 만들었습니다. 
<img src="../../assets/images/categories/sparta/2024-04-22-mega6box5.png" alt="런치스크린" /></li>
</ul>

<h1 id="tmdb-api-키-발급-받기">TMDB API 키 발급 받기</h1>
<ul>
  <li>회원가입 후 KEY 발급 요청하면 즉시 키를 발급해 줍니다. (사용용도 및 개인정보 입력해야합니다.)</li>
</ul>

<p><img src="../../assets/images/categories/sparta/2024-04-22-mega6box6.png" alt="API Key 발급" /></p>

<h1 id="포스트맨으로-조회해보기">포스트맨으로 조회해보기</h1>
<ul>
  <li>필요할 것 같은 API 4개를 찾았습니다. 필요시 더 추가할 예정입니다.
    <ul>
      <li>지금 상영중인 영화 조회</li>
      <li>영화명으로 영화 조회</li>
      <li>영화배우이름으로 배우 조회</li>
      <li>영화배우 이미지 조회</li>
    </ul>
  </li>
  <li>영화 제목으로 파묘를 입력하여 영화 검색하기 
<img src="../../assets/images/categories/sparta/2024-04-22-mega6box7.png" alt="포스트맨으로 조회하기" /></li>
</ul>

<h1 id="내일-할-일">내일 할 일</h1>
<ul>
  <li>오늘 10시 30분 부터 프로젝트 주제 정하기, 피그마로 디자인 그리기, API 찾아보기, 역할분담으로 시간을 다 써버렸습니다.</li>
  <li>내일은 깃허브에 프로젝트를 올리고 본격적으로 프로젝트를 시작해보겠습니다 ! 🔥🔥🔥</li>
</ul>]]></content><author><name>HyeongSub Lim</name></author><category term="sparta" /><category term="sparta" /><category term="앱 개발 숙련" /><category term="movie app" /><category term="ios" /><category term="uikit" /><category term="swift" /><category term="영화 앱" /><summary type="html"><![CDATA[iOS 앱 개발 숙련 팀 프로젝트 - 영화 예약 앱 만들기 1]]></summary></entry><entry><title type="html">[TIL] 내배캠 iOS앱 개발 공부 39일차 - 2024.04.22(월)</title><link href="http://localhost:4000/TIL/til39/" rel="alternate" type="text/html" title="[TIL] 내배캠 iOS앱 개발 공부 39일차 - 2024.04.22(월)" /><published>2024-04-22T00:00:00+09:00</published><updated>2024-04-22T00:00:00+09:00</updated><id>http://localhost:4000/TIL/til39</id><content type="html" xml:base="http://localhost:4000/TIL/til39/"><![CDATA[<h1 id="팀-프로젝트">팀 프로젝트</h1>
<ul>
  <li>이번 팀 프로젝트는 킥보드 앱, 영화 앱 중 원하는 앱을 선택하여 구현하는 프로젝트입니다.</li>
  <li>프로젝트 주제 선정, 앱 이름 선정, 역할 분담, API 찾기, 와이어프레임그리기 등으로 하루를 썼습니다.</li>
  <li><a href="https://limlogging.github.io/sparta/mega6box1/" target="_blank">영화 예약 앱 만들기 1</a></li>
</ul>]]></content><author><name>HyeongSub Lim</name></author><category term="TIL" /><category term="TIL" /><summary type="html"><![CDATA[내배캠 iOS앱 개발 공부 39일차 이야기 - 2024.04.22(월)]]></summary></entry><entry><title type="html">[내배캠] iOS 앱 개발 숙련 개인 과제 - WishList 앱 만들기 3</title><link href="http://localhost:4000/sparta/wishList3/" rel="alternate" type="text/html" title="[내배캠] iOS 앱 개발 숙련 개인 과제 - WishList 앱 만들기 3" /><published>2024-04-21T00:00:00+09:00</published><updated>2024-04-21T00:00:00+09:00</updated><id>http://localhost:4000/sparta/wishList3</id><content type="html" xml:base="http://localhost:4000/sparta/wishList3/"><![CDATA[<h1 id="wishlist-앱-만들기">WishList 앱 만들기</h1>
<ul>
  <li>지난 포스팅
    <ul>
      <li><a href="https://limlogging.github.io/sparta/wishList1/" target="_blank">WishList 앱 만들기 - 1</a></li>
      <li><a href="https://limlogging.github.io/sparta/wishList2/" target="_blank">WishList 앱 만들기 - 2</a></li>
    </ul>
  </li>
</ul>

<p><br /></p>

<h1 id="과제-제출-후-피드백">과제 제출 후 피드백</h1>
<ul>
  <li>과제 제출 이후에 피드백을 받아 수정하였습니다.
    <ol>
      <li>가격이 1000달러가 넘어가면 1,000 이런식으로 표현해주시면 좋을거 같아요.</li>
      <li>Product에서 Codable를 채택하고 있는데 Encode 하는 코드가 없으니 Decodable을 채택하는것도 좋을거 같아요.</li>
      <li>코드를 보았을 때 엄청 잘 작성해주셔서 Lv5까지 도전해보시는것도 좋을거 같아요!</li>
    </ol>
  </li>
</ul>

<h1 id="1-가격이-1000달러가-넘어가면-1000-이런식으로-표현해주시면-좋을거-같아요">1. 가격이 1000달러가 넘어가면 1,000 이런식으로 표현해주시면 좋을거 같아요.</h1>
<ul>
  <li>formatter를 사용해서 자리수 표시를하고 임의로 환율을 정하여 원화도 보여주도록 했습니다.</li>
</ul>

<h2 id="viewcontroller">ViewController</h2>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="nv">formatter</span> <span class="o">=</span> <span class="kt">NumberFormatter</span><span class="p">()</span>
<span class="n">formatter</span><span class="o">.</span><span class="n">numberStyle</span> <span class="o">=</span> <span class="o">.</span><span class="n">decimal</span>
<span class="k">let</span> <span class="nv">dollarPriceText</span> <span class="o">=</span> <span class="s">"$ "</span> <span class="o">+</span> <span class="p">(</span><span class="n">formatter</span><span class="o">.</span><span class="nf">string</span><span class="p">(</span><span class="nv">from</span><span class="p">:</span> <span class="n">product</span><span class="o">.</span><span class="n">price</span> <span class="k">as</span> <span class="kt">NSNumber</span><span class="p">)</span> <span class="p">??</span> <span class="s">""</span><span class="p">)</span>
<span class="k">let</span> <span class="nv">wonPriceText</span> <span class="o">=</span> <span class="s">"￦ "</span> <span class="o">+</span> <span class="p">(</span><span class="n">formatter</span><span class="o">.</span><span class="nf">string</span><span class="p">(</span><span class="nv">from</span><span class="p">:</span> <span class="n">product</span><span class="o">.</span><span class="n">price</span> <span class="o">*</span> <span class="mi">1400</span> <span class="k">as</span> <span class="kt">NSNumber</span><span class="p">)</span> <span class="p">??</span> <span class="s">""</span><span class="p">)</span>

<span class="k">self</span><span class="o">.</span><span class="n">productPriceLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">"</span><span class="se">\(</span><span class="n">dollarPriceText</span><span class="se">)</span><span class="s"> (</span><span class="se">\(</span><span class="n">wonPriceText</span><span class="se">)</span><span class="s">)"</span>
</code></pre></div></div>

<h2 id="wishlistviewcontroller">WishListViewController</h2>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="k">let</span> <span class="nv">productPrice</span> <span class="o">=</span> <span class="kt">Double</span><span class="p">(</span><span class="n">productList</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="p">]</span><span class="o">.</span><span class="n">price</span> <span class="p">??</span> <span class="s">"0.0"</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">formatter</span> <span class="o">=</span> <span class="kt">NumberFormatter</span><span class="p">()</span>
    <span class="n">formatter</span><span class="o">.</span><span class="n">numberStyle</span> <span class="o">=</span> <span class="o">.</span><span class="n">decimal</span>
    <span class="k">let</span> <span class="nv">dollarPriceText</span> <span class="o">=</span> <span class="s">"$ "</span> <span class="o">+</span> <span class="p">(</span><span class="n">formatter</span><span class="o">.</span><span class="nf">string</span><span class="p">(</span><span class="nv">from</span><span class="p">:</span> <span class="n">productPrice</span> <span class="k">as</span> <span class="kt">NSNumber</span><span class="p">)</span> <span class="p">??</span> <span class="s">""</span><span class="p">)</span>
    <span class="k">let</span> <span class="nv">wonPriceText</span> <span class="o">=</span> <span class="s">"￦ "</span> <span class="o">+</span> <span class="p">(</span><span class="n">formatter</span><span class="o">.</span><span class="nf">string</span><span class="p">(</span><span class="nv">from</span><span class="p">:</span> <span class="n">productPrice</span> <span class="o">*</span> <span class="mi">1400</span> <span class="k">as</span> <span class="kt">NSNumber</span><span class="p">)</span> <span class="p">??</span> <span class="s">""</span><span class="p">)</span>
    <span class="n">cell</span><span class="p">?</span><span class="o">.</span><span class="n">productPriceLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">"</span><span class="se">\(</span><span class="n">dollarPriceText</span><span class="se">)</span><span class="s"> (</span><span class="se">\(</span><span class="n">wonPriceText</span><span class="se">)</span><span class="s">)"</span>
<span class="p">}</span>
</code></pre></div></div>

<h1 id="2-product에서-codable를-채택하고-있는데-encode-하는-코드가-없으니-decodable을-채택하는것도-좋을거-같아요">2. Product에서 Codable를 채택하고 있는데 Encode 하는 코드가 없으니 Decodable을 채택하는것도 좋을거 같아요.</h1>
<h2 id="수정-전">수정 전</h2>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">Foundation</span>

<span class="kd">struct</span> <span class="kt">Product</span><span class="p">:</span> <span class="kt">Codable</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">id</span><span class="p">:</span> <span class="kt">Int</span>
    <span class="k">var</span> <span class="nv">title</span><span class="p">:</span> <span class="kt">String</span>
    <span class="k">var</span> <span class="nv">description</span><span class="p">:</span> <span class="kt">String</span>
    <span class="k">var</span> <span class="nv">price</span><span class="p">:</span> <span class="kt">Double</span>
    <span class="k">var</span> <span class="nv">discountPercentage</span><span class="p">:</span> <span class="kt">Double</span>
    <span class="k">var</span> <span class="nv">rating</span><span class="p">:</span> <span class="kt">Double</span>
    <span class="k">var</span> <span class="nv">stock</span><span class="p">:</span> <span class="kt">Int</span>
    <span class="k">var</span> <span class="nv">brand</span><span class="p">:</span> <span class="kt">String</span>
    <span class="k">var</span> <span class="nv">category</span><span class="p">:</span> <span class="kt">String</span>
    <span class="k">var</span> <span class="nv">thumbnail</span><span class="p">:</span> <span class="kt">String</span>
    <span class="k">var</span> <span class="nv">images</span><span class="p">:</span> <span class="p">[</span><span class="kt">String</span><span class="p">]</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="수정-후">수정 후</h2>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">Foundation</span>

<span class="kd">struct</span> <span class="kt">Product</span><span class="p">:</span> <span class="kt">Decodable</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">id</span><span class="p">:</span> <span class="kt">Int</span>
    <span class="k">var</span> <span class="nv">title</span><span class="p">:</span> <span class="kt">String</span>
    <span class="k">var</span> <span class="nv">description</span><span class="p">:</span> <span class="kt">String</span>
    <span class="k">var</span> <span class="nv">price</span><span class="p">:</span> <span class="kt">Double</span>
    <span class="k">var</span> <span class="nv">discountPercentage</span><span class="p">:</span> <span class="kt">Double</span>
    <span class="k">var</span> <span class="nv">rating</span><span class="p">:</span> <span class="kt">Double</span>
    <span class="k">var</span> <span class="nv">stock</span><span class="p">:</span> <span class="kt">Int</span>
    <span class="k">var</span> <span class="nv">brand</span><span class="p">:</span> <span class="kt">String</span>
    <span class="k">var</span> <span class="nv">category</span><span class="p">:</span> <span class="kt">String</span>
    <span class="k">var</span> <span class="nv">thumbnail</span><span class="p">:</span> <span class="kt">String</span>
    <span class="k">var</span> <span class="nv">images</span><span class="p">:</span> <span class="p">[</span><span class="kt">String</span><span class="p">]</span>
<span class="p">}</span>
</code></pre></div></div>

<p><br /></p>

<h1 id="3-코드를-보았을-때-엄청-잘-작성해주셔서-lv5까지-도전해보시는것도-좋을거-같아요">3. 코드를 보았을 때 엄청 잘 작성해주셔서 Lv5까지 도전해보시는것도 좋을거 같아요!</h1>
<ul>
  <li>좋은 말씀을 해 주셔서 5단계까지 도전했습니다.</li>
</ul>

<h2 id="레벨4-위시리스트-보기에서-테이블뷰-스와이프해서-row-삭제하기">레벨4. 위시리스트 보기에서 테이블뷰 스와이프해서 row 삭제하기</h2>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// MARK: - 삭제 기능</span>
<span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">commit</span> <span class="nv">editingStyle</span><span class="p">:</span> <span class="kt">UITableViewCell</span><span class="o">.</span><span class="kt">EditingStyle</span><span class="p">,</span> <span class="n">forRowAt</span> <span class="nv">indexPath</span><span class="p">:</span> <span class="kt">IndexPath</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="n">editingStyle</span> <span class="o">==</span> <span class="o">.</span><span class="n">delete</span> <span class="p">{</span>
        <span class="k">guard</span> <span class="k">let</span> <span class="nv">context</span> <span class="o">=</span> <span class="k">self</span><span class="o">.</span><span class="n">persistentContainer</span><span class="p">?</span><span class="o">.</span><span class="n">viewContext</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
        
        <span class="k">let</span> <span class="nv">request</span> <span class="o">=</span> <span class="kt">MyWishList</span><span class="o">.</span><span class="nf">fetchRequest</span><span class="p">()</span>
        <span class="k">guard</span> <span class="k">let</span> <span class="nv">products</span> <span class="o">=</span> <span class="k">try</span><span class="p">?</span> <span class="n">context</span><span class="o">.</span><span class="nf">fetch</span><span class="p">(</span><span class="n">request</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
        
        <span class="c1">// 선택한 특정 인덱스의 객체를 가져옴</span>
        <span class="k">let</span> <span class="nv">productToDelete</span> <span class="o">=</span> <span class="n">products</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="p">]</span>
        
        <span class="n">context</span><span class="o">.</span><span class="nf">delete</span><span class="p">(</span><span class="n">productToDelete</span><span class="p">)</span>
        
        <span class="c1">// 변경 사항 저장</span>
        <span class="k">try</span><span class="p">?</span> <span class="n">context</span><span class="o">.</span><span class="nf">save</span><span class="p">()</span>
        
        <span class="c1">//CoreData에서 데이터 가져오기</span>
        <span class="nf">getCoreData</span><span class="p">()</span>
        <span class="c1">//테이블뷰리로드</span>
        <span class="n">wishListTableView</span><span class="o">.</span><span class="nf">reloadData</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><br /></p>

<h2 id="레벨5-메인화면에서-화면을-아래로-내리면-새로고침-창이-뜨면서-다른상품으로-변경하기">레벨5. 메인화면에서 화면을 아래로 내리면 새로고침 창이 뜨면서 다른상품으로 변경하기</h2>
<h3 id="이미지-뷰-위에-스크롤-뷰-추가하기">이미지 뷰 위에 스크롤 뷰 추가하기</h3>

<p><img src="../../assets/images/categories/sparta/2024-04-21-wishList6.png" alt="스크롤 뷰 추가" /></p>

<h3 id="uirefreshcontrol-추가하기">UIRefreshControl 추가하기</h3>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// MARK: - 위시리스트 보기</span>
<span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>
    
    <span class="k">self</span><span class="o">.</span><span class="nf">getData</span><span class="p">(</span><span class="nv">completionHandler</span><span class="p">:</span> <span class="p">{</span> <span class="n">product</span> <span class="k">in</span>
        <span class="k">self</span><span class="o">.</span><span class="n">currentProduct</span> <span class="o">=</span> <span class="n">product</span>
    <span class="p">})</span>
    
    <span class="k">self</span><span class="o">.</span><span class="n">productScrollView</span><span class="o">.</span><span class="n">refreshControl</span> <span class="o">=</span> <span class="kt">UIRefreshControl</span><span class="p">()</span>
    <span class="k">self</span><span class="o">.</span><span class="n">productScrollView</span><span class="o">.</span><span class="n">refreshControl</span><span class="p">?</span><span class="o">.</span><span class="nf">addTarget</span><span class="p">(</span><span class="k">self</span><span class="p">,</span> <span class="nv">action</span><span class="p">:</span> <span class="k">#selector</span><span class="p">(</span><span class="n">refresh</span><span class="p">),</span> <span class="nv">for</span><span class="p">:</span> <span class="o">.</span><span class="n">valueChanged</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">//새로고침 추가 </span>
<span class="kd">@objc</span> <span class="kd">func</span> <span class="nf">refresh</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">self</span><span class="o">.</span><span class="n">getData</span> <span class="p">{</span> <span class="n">product</span> <span class="k">in</span>
        <span class="k">self</span><span class="o">.</span><span class="n">currentProduct</span> <span class="o">=</span> <span class="n">product</span>
        <span class="kt">DispatchQueue</span><span class="o">.</span><span class="n">main</span><span class="o">.</span><span class="k">async</span> <span class="p">{</span>
            <span class="k">self</span><span class="o">.</span><span class="n">productScrollView</span><span class="o">.</span><span class="n">refreshControl</span><span class="p">?</span><span class="o">.</span><span class="nf">endRefreshing</span><span class="p">()</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h1 id="마무리">마무리</h1>
<ul>
  <li>시간이 갈수록 잘하는 사람과의 격차가 벌어지는 것 같아 살짝 조급한 마음이 있었지만 신경쓰지 않고 하나씩 하나씩 해봐야겠다.</li>
</ul>]]></content><author><name>HyeongSub Lim</name></author><category term="sparta" /><category term="sparta" /><category term="앱 개발 숙련" /><category term="WishList" /><category term="ios" /><category term="uikit" /><category term="swift" /><summary type="html"><![CDATA[iOS 앱 개발 숙련 개인 과제 - WishList 앱 만들기 3]]></summary></entry></feed>