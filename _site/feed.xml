<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-03-13T19:55:05+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">limlogging Devlog</title><author><name>HyeongSub Lim</name></author><entry><title type="html">[TIL] 내배캠 iOS앱 개발 공부 12일차</title><link href="http://localhost:4000/TIL/til11/" rel="alternate" type="text/html" title="[TIL] 내배캠 iOS앱 개발 공부 12일차" /><published>2024-03-13T00:00:00+09:00</published><updated>2024-03-13T00:00:00+09:00</updated><id>http://localhost:4000/TIL/til12</id><content type="html" xml:base="http://localhost:4000/TIL/til11/"><![CDATA[<h3 id="데일리-스크럼">데일리 스크럼</h3>
<p><img src="/assets/images/categories/til/2024-03-13-til12.png" alt="" /></p>

<h3 id="알고리즘">알고리즘</h3>
<p>오늘의 오전 알고리즘은 시간이 꽤 오래걸렸는데 아직 제출하지 못했다. 문자를 아스키 코드로 변환하는 방법이 swift에서 문법을 찾아서 해결했다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="nv">str</span><span class="p">:</span> <span class="kt">Character</span> <span class="o">=</span> <span class="s">"a"</span>

<span class="c1">//문자를 아스키 코드로 변환</span>
<span class="n">str</span><span class="o">.</span><span class="n">asciiValue</span><span class="o">!</span> <span class="c1">//출력: 97 </span>

<span class="c1">//아스키 코드에 1을 더하고 아스키 코드를 문자로 변환</span>
<span class="kt">Character</span><span class="p">(</span><span class="kt">UnicodeScalar</span><span class="p">(</span><span class="n">str</span><span class="o">.</span><span class="n">asciiValue</span><span class="o">!</span> <span class="o">+</span> <span class="mi">1</span><span class="p">))</span> <span class="c1">//출력: b </span>
</code></pre></div></div>

<p>문제 풀고 적용했는데 중간에 실패가 계속 떴다 ㅠ 강의듣고 과제해야하니까 우선 저녁에 다시 해보는걸로 .. 
<img src="/assets/images/categories/til/2024-03-13-til12-2.png" alt="" /></p>

<h3 id="심화-강의">심화 강의</h3>
<p>심화 강의는 완강 했으나 한 파트를 10분에 끝내니 한번에 숙지 못하는건 어쩌면 당연한걸까? 과제하고 다시 보는걸로!</p>

<h3 id="내일은">내일은?</h3>
<p>오늘은 개인과제 1번을 제출했는데 내일도 과제를 우선 풀고 남은 내용은 블로그 작성하기</p>]]></content><author><name>HyeongSub Lim</name></author><category term="TIL" /><category term="TIL" /><summary type="html"><![CDATA[내배캠 iOS앱 개발 공부 12일차 이야기]]></summary></entry><entry><title type="html">[Swift] 고차함수</title><link href="http://localhost:4000/swift/%EA%B3%A0%EC%B0%A8%ED%95%A8%EC%88%98/" rel="alternate" type="text/html" title="[Swift] 고차함수" /><published>2024-03-12T00:00:00+09:00</published><updated>2024-03-12T00:00:00+09:00</updated><id>http://localhost:4000/swift/%EA%B3%A0%EC%B0%A8%ED%95%A8%EC%88%98</id><content type="html" xml:base="http://localhost:4000/swift/%EA%B3%A0%EC%B0%A8%ED%95%A8%EC%88%98/"><![CDATA[<h1 id="고차함수">고차함수</h1>
<ul>
  <li>다른 함수를 인자로 받거나, 함수의 결과로 함수를 반환하는 함수</li>
  <li>클로저를 공부해야 원활한 사용 가능</li>
  <li>알고리즘 문제 풀면서 익숙해집시다.</li>
</ul>

<h1 id="map">Map</h1>
<ul>
  <li><code class="language-plaintext highlighter-rouge">map</code> 함수는 컬렉션 내부의 <strong>기존 데이터를 변형(transform)하여 새로운 컬렉션를 생성</strong>합니다.</li>
  <li>기존의 컬렉션의 요소에 대해 정의한 익명함수로 매핑한 결과를 새로운 컬렉션으로 반환합니다.</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//문자열 배열을 정수형으로 변경하기 </span>
<span class="k">var</span> <span class="nv">intArr</span><span class="p">:</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">var</span> <span class="nv">strArr</span><span class="p">:</span> <span class="p">[</span><span class="kt">String</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="s">"1"</span><span class="p">,</span> <span class="s">"2"</span><span class="p">,</span> <span class="s">"3"</span><span class="p">,</span> <span class="s">"4"</span><span class="p">,</span> <span class="s">"5"</span><span class="p">]</span>
<span class="nf">print</span><span class="p">(</span><span class="n">strArr</span><span class="p">)</span>   <span class="c1">//출력 ["1", "2", "3", "4", "5"]</span>

<span class="c1">//for문 사용</span>
<span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span><span class="o">...</span><span class="n">strArr</span><span class="o">.</span><span class="n">count</span> <span class="o">-</span> <span class="mi">1</span> <span class="p">{</span>
    <span class="n">intArr</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="kt">Int</span><span class="p">(</span><span class="n">strArr</span><span class="p">[</span><span class="n">i</span><span class="p">])</span><span class="o">!</span><span class="p">)</span>
<span class="p">}</span>
<span class="nf">print</span><span class="p">(</span><span class="n">intArr</span><span class="p">)</span> <span class="c1">//출력 [1, 2, 3, 4, 5]</span>

<span class="c1">//Map 사용</span>
<span class="n">intArr</span> <span class="o">=</span> <span class="n">strArr</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="kt">Int</span><span class="p">(</span><span class="nv">$0</span><span class="p">)</span><span class="o">!</span> <span class="p">}</span>
<span class="nf">print</span><span class="p">(</span><span class="n">intArr</span><span class="p">)</span>   <span class="c1">//출력 [1, 2, 3, 4, 5]</span>
</code></pre></div></div>
<ul>
  <li>클로저의 매개변수 이름이 필요하지 않은 경우 단축 인자 이름을 활용할 수 있습니다.($0, $1)</li>
  <li>단축 인자이름은 순서대로 $0 , $1 , $2, $3 …으로 표현합니다.</li>
  <li>$0 은 첫번째 인자, $1은 두번째 인자를 뜻합니다.</li>
</ul>

<h1 id="filter">filter</h1>
<ul>
  <li>기존 컨테이너의 요소 중 조건에 만족하는 값에 대해 새로운 컨테이너를 만들어 반환합니다.</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//짝수만 뽑아 내기</span>
<span class="k">var</span> <span class="nv">arr</span><span class="p">:</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">var</span> <span class="nv">intArr</span><span class="p">:</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">]</span>

<span class="c1">//for문 사용</span>
<span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span><span class="o">...</span><span class="n">intArr</span><span class="o">.</span><span class="n">count</span> <span class="o">-</span> <span class="mi">1</span> <span class="p">{</span>
    <span class="k">if</span> <span class="n">intArr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
        <span class="n">arr</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="n">intArr</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="nf">print</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>  <span class="c1">//출력 [2, 4, 6, 8, 10]</span>

<span class="c1">//filter 사용</span>
<span class="n">arr</span> <span class="o">=</span> <span class="n">intArr</span><span class="o">.</span><span class="n">filter</span> <span class="p">{</span> <span class="nv">$0</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">}</span>
<span class="nf">print</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>  <span class="c1">//출력 [2, 4, 6, 8, 10]</span>
</code></pre></div></div>

<h1 id="reduce">reduce</h1>
<ul>
  <li>기존의 컨테이너의 요소에 대해 정의한 클로저로 매핑한 결과를 새로운 컨테이너로 반환합니다.</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//배열 합 구하기</span>
<span class="k">var</span> <span class="nv">sum</span><span class="p">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">var</span> <span class="nv">intArr</span><span class="p">:</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">]</span>

<span class="c1">//for문 사용</span>
<span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span><span class="o">...</span><span class="n">intArr</span><span class="o">.</span><span class="n">count</span> <span class="o">-</span> <span class="mi">1</span> <span class="p">{</span>
    <span class="n">sum</span> <span class="o">+=</span> <span class="n">intArr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
<span class="p">}</span>
<span class="nf">print</span><span class="p">(</span><span class="n">sum</span><span class="p">)</span>  <span class="c1">//출력 55</span>

<span class="c1">//reduce 사용</span>
<span class="n">sum</span> <span class="o">=</span> <span class="n">intArr</span><span class="o">.</span><span class="nf">reduce</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span> <span class="nv">$0</span> <span class="o">+</span> <span class="nv">$1</span> <span class="p">}</span>
<span class="nf">print</span><span class="p">(</span><span class="n">sum</span><span class="p">)</span> <span class="c1">//출력 55</span>
</code></pre></div></div>]]></content><author><name>HyeongSub Lim</name></author><category term="swift" /><category term="swift" /><category term="고차함수" /><summary type="html"><![CDATA[다른 함수를 인자로 받거나, 함수의 결과로 함수를 반환하는 함수인 고차함수]]></summary></entry><entry><title type="html">[Swift] 클로저(Closure)</title><link href="http://localhost:4000/swift/closure/" rel="alternate" type="text/html" title="[Swift] 클로저(Closure)" /><published>2024-03-12T00:00:00+09:00</published><updated>2024-03-12T00:00:00+09:00</updated><id>http://localhost:4000/swift/closure</id><content type="html" xml:base="http://localhost:4000/swift/closure/"><![CDATA[<h1 id="1-클로저란">1. 클로저란?</h1>
<ul>
  <li>일정 기능을 하는 코드를 하나의 블록(중괄호)으로 모아놓은 것을 말합니다.</li>
  <li>함수는 클로저의 한 형태입니다. (이름 없는 함수입니다.)</li>
  <li>클로저는 변수나 상수가 선언된 위치에서 참조를 획득하고 저장할 수 있습니다. 이를 변수나 상수의 클로징(잠금)이라고 하며 클로저는 여기서 착안된 이름입니다. 
<img src="/assets/images/categories/swift/2024-03-08-closure.png" alt="" /></li>
</ul>

<p><br /></p>

<h1 id="2-클로저는-일급-객체-first-class-object">2. 클로저는 일급 객체 (First-class object)</h1>
<p>1급 객체란 다음 세 가지 조건을 만족하는 객체를 가리킵니다.</p>
<ol>
  <li>변수나 데이터 구조 안에 담을 수 있어야 합니다.
    <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">sayHello</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">Void</span> <span class="p">{</span>
 <span class="nf">print</span><span class="p">(</span><span class="s">"Hello!"</span><span class="p">)</span>
<span class="p">}</span>
<span class="c1">//변수에 할당 </span>
<span class="k">let</span> <span class="nv">myFunction</span> <span class="o">=</span> <span class="n">sayHello</span>
<span class="nf">myFunction</span><span class="p">()</span> <span class="c1">// "Hello!"를 출력합니다.</span>
</code></pre></div>    </div>
  </li>
  <li>파라미터로 전달할 수 있어야 합니다.
    <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">sayHello</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">Void</span> <span class="p">{</span>
 <span class="nf">print</span><span class="p">(</span><span class="s">"Hello!"</span><span class="p">)</span>
<span class="p">}</span>
<span class="kd">func</span> <span class="nf">performAction</span><span class="p">(</span><span class="nv">action</span><span class="p">:</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">Void</span><span class="p">)</span> <span class="p">{</span>
 <span class="nf">action</span><span class="p">()</span>
<span class="p">}</span>
<span class="c1">//다른 함수의 인자로 전달</span>
<span class="nf">performAction</span><span class="p">(</span><span class="nv">action</span><span class="p">:</span> <span class="n">sayHello</span><span class="p">)</span> <span class="c1">// "Hello!"를 출력합니다.</span>
</code></pre></div>    </div>
  </li>
  <li>함수에서 반환값으로 사용할 수 있어야 합니다.
    <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">sayHello</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">Void</span> <span class="p">{</span>
 <span class="nf">print</span><span class="p">(</span><span class="s">"Hello!"</span><span class="p">)</span>
<span class="p">}</span>
<span class="kd">func</span> <span class="nf">createGreetingFunction</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">Void</span> <span class="p">{</span>
 <span class="c1">//함수의 반환값으로 사용</span>
 <span class="k">return</span> <span class="n">sayHello</span>
<span class="p">}</span>
<span class="k">let</span> <span class="nv">greetingFunction</span> <span class="o">=</span> <span class="nf">createGreetingFunction</span><span class="p">()</span>
<span class="nf">greetingFunction</span><span class="p">()</span> <span class="c1">// "Hello!"를 출력합니다.</span>
</code></pre></div>    </div>
  </li>
</ol>

<p><br /></p>

<h1 id="3-클로저-사용-이유">3. 클로저 사용 이유</h1>
<ol>
  <li>코드 간결성
    <ul>
      <li>클로저를 사용하면 간단한 작업을 짧은 문법으로 처리할 수 있습니다. 특히 함수형 프로그래밍 스타일을 채택한 경우에는 더욱 간결한 코드를 작성할 수 있습니다.</li>
    </ul>
  </li>
  <li>유연성
    <ul>
      <li>클로저를 사용하면 함수를 변수나 상수에 할당하거나, 함수의 인자로 전달할 수 있습니다. 이는 함수를 다른 함수의 인자로 전달하거나 함수를 반환하는 고차 함수를 구현하는 데 유용합니다.</li>
    </ul>
  </li>
  <li>캡처링
    <ul>
      <li>클로저는 자신을 둘러싼 범위에 있는 변수나 상수를 캡처할 수 있습니다. 이는 클로저가 생성된 시점의 상태를 유지하거나 변경할 수 있게 해줍니다.</li>
    </ul>
  </li>
  <li>비동기 작업
    <ul>
      <li>비동기 작업을 처리할 때 클로저를 사용하면 코드를 간결하게 작성할 수 있습니다. 주로 Grand Central Dispatch (GCD)나 Operation Queue와 함께 사용되어 비동기 작업을 처리합니다.</li>
    </ul>
  </li>
  <li>콜백 함수
    <ul>
      <li>주로 이벤트 처리나 네트워크 요청과 같은 비동기 작업에서 콜백 함수로 활용됩니다. 클로저를 사용하여 이러한 작업을 처리하면 코드의 일관성을 유지하면서도 비동기적인 작업을 처리할 수 있습니다.</li>
    </ul>
  </li>
  <li>컬렉션의 변형
    <ul>
      <li>Swift에서는 클로저를 사용하여 배열이나 딕셔너리 등의 컬렉션을 변형하는 메서드에 전달할 수 있습니다. 이를 통해 컬렉션을 필터링, 매핑, 정렬하는 등의 작업을 수행할 수 있습니다.</li>
    </ul>
  </li>
</ol>

<p><br /></p>

<h1 id="4-클로저의-형태">4. 클로저의 형태</h1>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//클로저의 형태</span>
<span class="p">{</span> <span class="p">(</span><span class="o">&lt;</span><span class="k">#parameters</span><span class="err">#</span><span class="o">&gt;</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="o">&lt;</span><span class="k">#return</span> <span class="n">type</span><span class="err">#</span><span class="o">&gt;</span> <span class="k">in</span>
    <span class="o">&lt;</span><span class="k">#statements</span><span class="err">#</span><span class="o">&gt;</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="클로저-형태-예시">클로저 형태 예시</h2>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="nv">closure</span> <span class="o">=</span> <span class="p">{</span> <span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">String</span> <span class="k">in</span> 
    <span class="k">return</span> <span class="s">"Hello </span><span class="se">\(</span><span class="n">name</span><span class="se">)</span><span class="s">"</span>
<span class="p">}</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">closure</span><span class="p">(</span><span class="s">"철수"</span><span class="p">))</span> <span class="c1">//출력: Hello 철수 </span>

<span class="c1">//컴파일러가 타입 추론 가능한 경우 리턴형에 대한 표기를 생략 가능 </span>
<span class="c1">//Hello + 이름으로 문자열로 리턴하기 때문에 타입 추론 가능하여 String 생략 </span>
<span class="k">let</span> <span class="nv">closure</span> <span class="o">=</span> <span class="p">{</span> <span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="k">in</span> 
    <span class="k">return</span> <span class="s">"Hello </span><span class="se">\(</span><span class="n">name</span><span class="se">)</span><span class="s">"</span>
<span class="p">}</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">closure</span><span class="p">(</span><span class="s">"철수"</span><span class="p">))</span> <span class="c1">//출력: Hello 철수 </span>

<span class="c1">// 컴파일러가 타입 추론 가능한 경우 생략 가능</span>
<span class="k">let</span> <span class="nv">closure</span> <span class="o">=</span> <span class="p">{</span> <span class="n">name</span> <span class="k">in</span>
    <span class="k">return</span> <span class="s">"Hello ~ "</span> <span class="o">+</span> <span class="n">name</span>
<span class="p">}</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">closure</span><span class="p">(</span><span class="s">"철수"</span><span class="p">))</span>  <span class="c1">//출력: Hello ~ 철수</span>

<span class="c1">//void 생략</span>
<span class="c1">//let closure = { () -&gt; () in</span>
<span class="k">let</span> <span class="nv">closure</span> <span class="p">{}</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"Hello 클로저"</span><span class="p">)</span>
<span class="p">}</span>
<span class="nf">closure</span><span class="p">()</span>   <span class="c1">//출력: Hello 클로저</span>
</code></pre></div></div>

<p><br /></p>

<h1 id="5-함수를-클로저로-변경">5. 함수를 클로저로 변경</h1>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//함수의 형태 </span>
<span class="kd">func</span> <span class="nf">nameFunction</span><span class="p">(</span><span class="nv">str</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">String</span> <span class="p">{</span>
    <span class="k">return</span> <span class="s">"Hello, </span><span class="se">\(</span><span class="n">str</span><span class="se">)</span><span class="s">"</span>
<span class="p">}</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">nameFunction</span><span class="p">(</span><span class="nv">str</span><span class="p">:</span> <span class="s">"imhs"</span><span class="p">))</span>   <span class="c1">//출력: Hello, imhs</span>

<span class="c1">// 클로저로 변경 (nameFunction 함수를 클로저로 변경)</span>
<span class="c1">//name 변수에 함수를 담을 수 있음 </span>
<span class="k">var</span> <span class="nv">name</span> <span class="o">=</span> <span class="p">{(</span><span class="nv">str</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">String</span> <span class="k">in</span>
    <span class="k">return</span> <span class="s">"Hello, </span><span class="se">\(</span><span class="n">str</span><span class="se">)</span><span class="s">"</span>
<span class="p">}</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">name</span><span class="p">(</span><span class="s">"imhs"</span><span class="p">))</span> <span class="c1">//출력: Hello, imhs</span>
</code></pre></div></div>

<p><br /></p>

<h1 id="6-문법-최적화간소화">6. 문법 최적화(간소화)</h1>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//함수 정의</span>
<span class="kd">func</span> <span class="nf">closureFunction</span><span class="p">(</span><span class="nv">closure</span><span class="p">:</span> <span class="p">(</span><span class="kt">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span><span class="p">)</span> <span class="p">{</span>
    <span class="nf">closure</span><span class="p">(</span><span class="s">"swift"</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>
<h2 id="타입-추론type-inference">타입 추론(Type Inference)</h2>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">closureFunction</span><span class="p">(</span><span class="nv">closure</span><span class="p">:</span> <span class="p">{</span> <span class="p">(</span><span class="nv">str</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="k">in</span>
    <span class="k">return</span> <span class="n">str</span><span class="o">.</span><span class="n">count</span>
<span class="p">})</span>
<span class="nf">closureFunction</span><span class="p">(</span><span class="nv">closure</span><span class="p">:</span> <span class="p">{</span> <span class="n">str</span> <span class="k">in</span>
    <span class="k">return</span> <span class="n">str</span><span class="o">.</span><span class="n">count</span>
<span class="p">})</span>
</code></pre></div></div>
<h2 id="싱글-익스프레션인-경우한줄-리턴을-생략-가능-implicit-return">싱글 익스프레션인 경우(한줄), 리턴을 생략 가능 (Implicit Return)</h2>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">closureFunction</span><span class="p">(</span><span class="nv">closure</span><span class="p">:</span> <span class="p">{</span> <span class="n">str</span> <span class="k">in</span>
    <span class="n">str</span><span class="o">.</span><span class="n">count</span>
<span class="p">})</span>
</code></pre></div></div>

<h2 id="아규먼트-이름-축약shorthand-argements">아규먼트 이름 축약(Shorthand Argements)</h2>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">closureFunction</span><span class="p">(</span><span class="nv">closure</span><span class="p">:</span> <span class="p">{</span> 
    <span class="nv">$0</span><span class="o">.</span><span class="n">count</span>
<span class="p">})</span>
</code></pre></div></div>

<h2 id="트레일링trailing-클로저-문법후행-클로저-문법">트레일링(Trailing) 클로저 문법(후행 클로저 문법)</h2>
<ul>
  <li>함수의 마지막 전달 인자(Argements)로 클로저 전달되는 경우, 소괄호를 생략 가능</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">closureFunction</span><span class="p">(</span><span class="nv">closure</span><span class="p">:</span> <span class="p">{</span>
    <span class="nv">$0</span><span class="o">.</span><span class="n">count</span>
<span class="p">})</span>
<span class="nf">closureFunction</span><span class="p">()</span> <span class="p">{</span>
    <span class="nv">$0</span><span class="o">.</span><span class="n">count</span>
<span class="p">}</span>
<span class="n">closureFunction</span> <span class="p">{</span> <span class="nv">$0</span><span class="o">.</span><span class="n">count</span> <span class="p">}</span>
</code></pre></div></div>

<h3 id="트레일링-클로저-예시">트레일링 클로저 예시</h3>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//1. 클로저를 파라미터로 받는 함수 정의</span>
<span class="kd">func</span> <span class="nf">closureFunction</span><span class="p">(</span><span class="nv">closure</span><span class="p">:</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">Void</span><span class="p">)</span> <span class="p">{</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"함수 시작"</span><span class="p">)</span>
    <span class="nf">closure</span><span class="p">()</span>
<span class="p">}</span>
<span class="c1">//2. 함수를 실행할때 마지막 전달 인자를 클로저 형태로 전달(소괄호를 생략 가능)</span>
<span class="nf">closureFunction</span><span class="p">(</span><span class="nv">closure</span><span class="p">:</span> <span class="p">{</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"함수 종료"</span><span class="p">)</span>
<span class="p">})</span>
<span class="nf">closureFunction</span><span class="p">(</span><span class="nv">closure</span><span class="p">:</span> <span class="p">)</span> <span class="p">{</span>      <span class="c1">// 소괄호를 앞으로 가져오기</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"함수 종료"</span><span class="p">)</span>
<span class="p">}</span>
<span class="nf">closureFunction</span><span class="p">()</span> <span class="p">{</span>               <span class="c1">// 아규먼트 생략가능</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"함수 종료"</span><span class="p">)</span>
<span class="p">}</span>
<span class="c1">// 소괄호 생략 </span>
<span class="n">closureFunction</span> <span class="p">{</span> <span class="c1">//함수를 실행하고 마지막 아규먼트로 클로저를 전달했다는걸 익숙해지기 </span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"함수 종료"</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p><br /></p>

<h1 id="7-캡처-현상">7. 캡처 현상</h1>
<h2 id="값value-캡처">값(value) 캡처</h2>
<ul>
  <li>클로저가 변수나 상수의 값을 캡처합니다. 이때, 클로저 내부에서 캡처한 값이 변경되어도 원본 값은 변경되지 않습니다.</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">makeIncrementer</span><span class="p">(</span><span class="n">forIncrement</span> <span class="nv">amount</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">total</span> <span class="o">=</span> <span class="mi">0</span>
    
    <span class="c1">// 클로저를 반환합니다.</span>
    <span class="k">let</span> <span class="nv">incrementer</span><span class="p">:</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="o">=</span> <span class="p">{</span>
        <span class="c1">// total 변수를 캡처하여 저장합니다.</span>
        <span class="n">total</span> <span class="o">+=</span> <span class="n">amount</span>
        <span class="k">return</span> <span class="n">total</span>
    <span class="p">}</span>
    
    <span class="k">return</span> <span class="n">incrementer</span>
<span class="p">}</span>
<span class="k">let</span> <span class="nv">incrementByTen</span> <span class="o">=</span> <span class="nf">makeIncrementer</span><span class="p">(</span><span class="nv">forIncrement</span><span class="p">:</span> <span class="mi">10</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">incrementByTen</span><span class="p">())</span> <span class="c1">// total = 10, 결과: 10</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">incrementByTen</span><span class="p">())</span> <span class="c1">// total = 20, 결과: 20</span>
</code></pre></div></div>

<h2 id="참조reference-캡처">참조(reference) 캡처</h2>
<ul>
  <li>클로저가 변수나 상수의 참조를 캡처합니다. 따라서 클로저 내에서 해당 변수나 상수를 변경하면 원본 값도 변경됩니다.</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">SimpleClass</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">value</span><span class="p">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">10</span>
<span class="p">}</span>
<span class="kd">func</span> <span class="nf">createClosure</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="p">(()</span> <span class="o">-&gt;</span> <span class="kt">Int</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">instance</span> <span class="o">=</span> <span class="kt">SimpleClass</span><span class="p">()</span>
    
    <span class="c1">// 참조 캡처를 사용하여 SimpleClass의 인스턴스를 캡처합니다.</span>
    <span class="k">let</span> <span class="nv">closure</span><span class="p">:</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="o">=</span> <span class="p">{</span>
        <span class="c1">// 클로저가 참조하는 인스턴스의 속성을 업데이트합니다.</span>
        <span class="n">instance</span><span class="o">.</span><span class="n">value</span> <span class="o">*=</span> <span class="mi">2</span>
        <span class="k">return</span> <span class="n">instance</span><span class="o">.</span><span class="n">value</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">closure</span>
<span class="p">}</span>
</code></pre></div></div>

<p><br /></p>

<h1 id="8-탈출escaping-클로저">8. 탈출(escaping) 클로저</h1>
<h2 id="순차적-실행">순차적 실행</h2>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">sequentialExecutionExample</span><span class="p">()</span> <span class="p">{</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"Start"</span><span class="p">)</span>

    <span class="c1">// 1. 첫 번째 작업</span>
    <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">1</span><span class="o">...</span><span class="mi">3</span> <span class="p">{</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">"Task </span><span class="se">\(</span><span class="n">i</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="c1">// 2. 두 번째 작업</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"Next Task"</span><span class="p">)</span>

    <span class="c1">// 3. 세 번째 작업</span>
    <span class="k">let</span> <span class="nv">result</span> <span class="o">=</span> <span class="mi">5</span> <span class="o">+</span> <span class="mi">3</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"Result: </span><span class="se">\(</span><span class="n">result</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>

    <span class="nf">print</span><span class="p">(</span><span class="s">"End"</span><span class="p">)</span>
<span class="p">}</span>

<span class="nf">sequentialExecutionExample</span><span class="p">()</span>
<span class="cm">/*
위의 코드는 함수 sequentialExecutionExample 내에서 순차적으로 실행됩니다.
각각의 작업은 순서대로 실행되며, 한 작업이 끝나야 다음 작업이 실행됩니다. 
이 예시에서는 
'Start', 'Task 1', 'Task 2', 'Task 3', 'Next Task', 'Result: 8', 'End'
와 같은 순서로 출력됩니다.
*/</span>
</code></pre></div></div>

<h2 id="비동기-실행">비동기 실행</h2>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">asynchronousExecutionExample</span><span class="p">()</span> <span class="p">{</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"Start"</span><span class="p">)</span>

    <span class="c1">// 1. 비동기로 실행되는 작업</span>
    <span class="kt">DispatchQueue</span><span class="o">.</span><span class="nf">global</span><span class="p">()</span><span class="o">.</span><span class="k">async</span> <span class="p">{</span>
        <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">1</span><span class="o">...</span><span class="mi">3</span> <span class="p">{</span>
            <span class="nf">print</span><span class="p">(</span><span class="s">"Async Task </span><span class="se">\(</span><span class="n">i</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="c1">// 2. 순차적으로 실행되는 작업</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"Next Task"</span><span class="p">)</span>

    <span class="c1">// 3. 또 다른 비동기 작업</span>
    <span class="kt">DispatchQueue</span><span class="o">.</span><span class="nf">global</span><span class="p">()</span><span class="o">.</span><span class="k">async</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">result</span> <span class="o">=</span> <span class="mi">5</span> <span class="o">+</span> <span class="mi">3</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">"Async Result: </span><span class="se">\(</span><span class="n">result</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="c1">// 4. 끝 부분</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"End"</span><span class="p">)</span>
<span class="p">}</span>
<span class="nf">asynchronousExecutionExample</span><span class="p">()</span>
<span class="cm">/*
위의 코드는 비동기적으로 실행되는 예시입니다. 
DispatchQueue.global().async를 사용하여 클로저가 다른 스레드에서 비동기적으로 실행됩니다. 
따라서 비동기 작업은 순차적인 흐름을 방해하지 않고 별도의 스레드에서 실행됩니다.

실행 결과는 
'Start', 'Next Task', 'End' 순서로 출력되고, 
비동기 작업은 나중에 완료되어 
'Async Task 1', 'Async Task 2', 'Async Task 3', 'Async Result: 8'와 같이 
순서는 보장되지 않는 시점에 출력됩니다. 
이는 비동기 작업이 별도의 스레드에서 동작하기 때문에, 
주 스레드의 작업과 병행적으로 실행됨을 보여줍니다.
*/</span>
</code></pre></div></div>

<h2 id="탈출-클로저escaping-closure">탈출 클로저(escaping closure)</h2>
<ul>
  <li>파라미터 타입 앞에 @escaping이라는 키워드를 명시</li>
  <li>어떤 함수의 내부에 존재하는 클로저(함수)를 외부 변수에 저장하는 경우
    <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="nv">defaultFunction</span><span class="p">:</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="p">()</span> <span class="o">=</span> <span class="p">{</span> <span class="nf">print</span><span class="p">(</span><span class="s">"출력"</span><span class="p">)</span> <span class="p">}</span>
<span class="kd">func</span> <span class="nf">escapingFunc</span><span class="p">(</span><span class="nv">closure</span><span class="p">:</span> <span class="kd">@escaping</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="p">())</span> <span class="p">{</span>
  <span class="c1">// 클로저를 실행하는 것이 아니라  aSavedFunction 변수에 저장. </span>
  <span class="c1">// 함수는 변수와 달리 기본적으로 외부 할당이 불가능</span>
  <span class="n">defaultFunction</span> <span class="o">=</span> <span class="n">closure</span>        
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>이스케이핑 클로저는 클로저가 메서드의 인자로 전달됐을 때, 메서드의 실행이 종료된 후 실행되는 클로저(비동기)
    <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">asyncEscaping</span><span class="p">(</span><span class="nv">closure</span><span class="p">:</span> <span class="kd">@escaping</span> <span class="p">(</span><span class="kt">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">())</span> <span class="p">{</span>
  <span class="k">var</span> <span class="nv">name</span> <span class="o">=</span> <span class="s">"철수"</span>
    
  <span class="kt">DispatchQueue</span><span class="o">.</span><span class="n">main</span><span class="o">.</span><span class="nf">asyncAfter</span><span class="p">(</span><span class="nv">deadline</span><span class="p">:</span> <span class="o">.</span><span class="nf">now</span><span class="p">()</span> <span class="o">+</span> <span class="mi">3</span><span class="p">)</span> <span class="p">{</span> <span class="c1">//3초뒤에 실행하도록 만들기</span>
      <span class="nf">closure</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="n">asyncEscaping</span> <span class="p">{</span> 
  <span class="nf">print</span><span class="p">(</span><span class="s">"name : </span><span class="se">\(</span><span class="nv">$0</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>@escaping 를 사용하는 클로저에서 self의 요소를 사용할 경우, self를 명시적으로 언급해야 합니다.
    <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="nv">completionHandlers</span><span class="p">:</span> <span class="p">[()</span> <span class="o">-&gt;</span> <span class="kt">Void</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
<span class="kd">func</span> <span class="nf">someFunctionWithEscapingClosure</span><span class="p">(</span><span class="nv">completionHandler</span><span class="p">:</span> <span class="kd">@escaping</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">Void</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">completionHandlers</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="n">completionHandler</span><span class="p">)</span>
<span class="p">}</span>
<span class="kd">func</span> <span class="nf">someFunctionWithNonescapingClosure</span><span class="p">(</span><span class="nv">closure</span><span class="p">:</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">Void</span><span class="p">)</span> <span class="p">{</span>
  <span class="nf">closure</span><span class="p">()</span>    <span class="c1">// 함수 안에서 끝나는 클로저</span>
<span class="p">}</span>
<span class="kd">class</span> <span class="kt">SomeClass</span> <span class="p">{</span>
  <span class="k">var</span> <span class="nv">x</span> <span class="o">=</span> <span class="mi">10</span>
  <span class="kd">func</span> <span class="nf">doSomething</span><span class="p">()</span> <span class="p">{</span>
      <span class="n">someFunctionWithEscapingClosure</span> <span class="p">{</span> <span class="k">self</span><span class="o">.</span><span class="n">x</span> <span class="o">=</span> <span class="mi">100</span> <span class="p">}</span> <span class="c1">// 명시적으로 self를 적어줘야 합니다.</span>
      <span class="n">someFunctionWithNonescapingClosure</span> <span class="p">{</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">200</span> <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="k">let</span> <span class="nv">instance</span> <span class="o">=</span> <span class="kt">SomeClass</span><span class="p">()</span>
<span class="n">instance</span><span class="o">.</span><span class="nf">doSomething</span><span class="p">()</span>
<span class="nf">print</span><span class="p">(</span><span class="n">instance</span><span class="o">.</span><span class="n">x</span><span class="p">)</span>
<span class="c1">// Prints "200"</span>
<span class="n">completionHandlers</span><span class="o">.</span><span class="nf">first</span><span class="p">?()</span>
<span class="nf">print</span><span class="p">(</span><span class="n">instance</span><span class="o">.</span><span class="n">x</span><span class="p">)</span>
<span class="c1">// Prints "100"</span>
</code></pre></div>    </div>
  </li>
</ul>]]></content><author><name>HyeongSub Lim</name></author><category term="swift" /><category term="swift" /><category term="Closure" /><summary type="html"><![CDATA[클로저(Closure)는 함수]]></summary></entry><entry><title type="html">[프로그래머스/Swift] 최소직사각형</title><link href="http://localhost:4000/algorithm/%EC%B5%9C%EC%86%8C%EC%A7%81%EC%82%AC%EA%B0%81%ED%98%95/" rel="alternate" type="text/html" title="[프로그래머스/Swift] 최소직사각형" /><published>2024-03-12T00:00:00+09:00</published><updated>2024-03-12T00:00:00+09:00</updated><id>http://localhost:4000/algorithm/%EC%B5%9C%EC%86%8C%EC%A7%81%EC%82%AC%EA%B0%81%ED%98%95</id><content type="html" xml:base="http://localhost:4000/algorithm/%EC%B5%9C%EC%86%8C%EC%A7%81%EC%82%AC%EA%B0%81%ED%98%95/"><![CDATA[<h1 id="문제-설명">문제 설명</h1>
<ul>
  <li>명함 지갑을 만드는 회사에서 지갑의 크기를 정하려고 합니다. 다양한 모양과 크기의 명함들을 모두 수납할 수 있으면서, 작아서 들고 다니기 편한 지갑을 만들어야 합니다. 이러한 요건을 만족하는 지갑을 만들기 위해 디자인팀은 모든 명함의 가로 길이와 세로 길이를 조사했습니다.</li>
  <li>아래 표는 4가지 명함의 가로 길이와 세로 길이를 나타냅니다.</li>
</ul>

<table>
  <thead>
    <tr>
      <th>명함 번호</th>
      <th>가로 길이</th>
      <th>세로 길이</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1</td>
      <td>60</td>
      <td>50</td>
    </tr>
    <tr>
      <td>2</td>
      <td>30</td>
      <td>70</td>
    </tr>
    <tr>
      <td>3</td>
      <td>60</td>
      <td>30</td>
    </tr>
    <tr>
      <td>4</td>
      <td>80</td>
      <td>40</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>가장 긴 가로 길이와 세로 길이가 각각 80, 70이기 때문에 80(가로) x 70(세로) 크기의 지갑을 만들면 모든 명함들을 수납할 수 있습니다. 하지만 2번 명함을 가로로 눕혀 수납한다면 80(가로) x 50(세로) 크기의 지갑으로 모든 명함들을 수납할 수 있습니다. 이때의 지갑 크기는 4000(=80 x 50)입니다.</li>
  <li>모든 명함의 가로 길이와 세로 길이를 나타내는 2차원 배열 sizes가 매개변수로 주어집니다. 모든 명함을 수납할 수 있는 가장 작은 지갑을 만들 때, 지갑의 크기를 return 하도록 solution 함수를 완성해주세요.</li>
  <li><a href="https://school.programmers.co.kr/learn/courses/30/lessons/147355?language=swift" target="_blank">문제 풀기</a></li>
</ul>

<h1 id="제한사항">제한사항</h1>
<ul>
  <li>sizes의 길이는 1 이상 10,000 이하입니다.
    <ul>
      <li>sizes의 원소는 [w, h] 형식입니다.</li>
      <li>w는 명함의 가로 길이를 나타냅니다.</li>
      <li>h는 명함의 세로 길이를 나타냅니다.</li>
      <li>w와 h는 1 이상 1,000 이하인 자연수입니다.</li>
    </ul>
  </li>
</ul>

<h1 id="입출력-예">입출력 예</h1>

<table>
  <thead>
    <tr>
      <th>sizes</th>
      <th>result</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>[[60, 50], [30, 70], [60, 30], [80, 40]]</td>
      <td>4000</td>
    </tr>
    <tr>
      <td>[[10, 7], [12, 3], [8, 15], [14, 7], [5, 15]]</td>
      <td>120</td>
    </tr>
    <tr>
      <td>[[14, 4], [19, 6], [6, 16], [18, 7], [7, 11]]</td>
      <td>133</td>
    </tr>
  </tbody>
</table>

<h2 id="입출력-예-1">입출력 예 #1</h2>
<ul>
  <li>문제 예시와 같습니다.</li>
</ul>

<h2 id="입출력-예-2">입출력 예 #2</h2>
<ul>
  <li>명함들을 적절히 회전시켜 겹쳤을 때, 3번째 명함(가로: 8, 세로: 15)이 다른 모든 명함보다 크기가 큽니다. 따라서 지갑의 크기는 3번째 명함의 크기와 같으며, 120(=8 x 15)을 return 합니다.</li>
</ul>

<h2 id="입출력-예-3">입출력 예 #3</h2>
<ul>
  <li>명함들을 적절히 회전시켜 겹쳤을 때, 모든 명함을 포함하는 가장 작은 지갑의 크기는 133(=19 x 7)입니다.</li>
</ul>

<h1 id="나의-풀이">나의 풀이</h1>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">Foundation</span>

<span class="kd">func</span> <span class="nf">solution</span><span class="p">(</span><span class="n">_</span> <span class="nv">sizes</span><span class="p">:[[</span><span class="kt">Int</span><span class="p">]])</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">firstNum</span><span class="p">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">var</span> <span class="nv">secondNum</span><span class="p">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">0</span>
    
    <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="n">sizes</span> <span class="p">{</span>
        <span class="c1">//정렬해서 각 자리수에서 가장 큰 값 구하기</span>
        <span class="k">if</span> <span class="n">firstNum</span> <span class="o">&lt;=</span> <span class="n">i</span><span class="o">.</span><span class="nf">sorted</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span> <span class="p">{</span>
            <span class="n">firstNum</span> <span class="o">=</span> <span class="n">i</span><span class="o">.</span><span class="nf">sorted</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span>
        <span class="p">}</span>
        <span class="k">if</span> <span class="n">secondNum</span> <span class="o">&lt;=</span> <span class="n">i</span><span class="o">.</span><span class="nf">sorted</span><span class="p">()[</span><span class="mi">1</span><span class="p">]</span> <span class="p">{</span>
            <span class="n">secondNum</span> <span class="o">=</span> <span class="n">i</span><span class="o">.</span><span class="nf">sorted</span><span class="p">()[</span><span class="mi">1</span><span class="p">]</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="k">return</span> <span class="n">firstNum</span> <span class="o">*</span> <span class="n">secondNum</span>
<span class="p">}</span>
</code></pre></div></div>
<h1 id="다른-사람-풀이">다른 사람 풀이</h1>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">Foundation</span>
<span class="kd">func</span> <span class="nf">solution</span><span class="p">(</span><span class="n">_</span> <span class="nv">sizes</span><span class="p">:[[</span><span class="kt">Int</span><span class="p">]])</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">maxNum</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">var</span> <span class="nv">minNum</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="k">for</span> <span class="n">size</span> <span class="k">in</span> <span class="n">sizes</span> <span class="p">{</span>
        <span class="n">maxNum</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="n">maxNum</span><span class="p">,</span> <span class="n">size</span><span class="o">.</span><span class="nf">max</span><span class="p">()</span><span class="o">!</span><span class="p">)</span>
        <span class="n">minNum</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="n">minNum</span><span class="p">,</span> <span class="n">size</span><span class="o">.</span><span class="nf">min</span><span class="p">()</span><span class="o">!</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">maxNum</span> <span class="o">*</span> <span class="n">minNum</span>
<span class="p">}</span>
</code></pre></div></div>

<h1 id="의견">의견</h1>
<ul>
  <li>이번에는 무작정 for문을 사용한 정렬 아닌 sort함수를 써서 풀었다. 다른 사람 코드도 큰 풀이방법은 비슷한데 사용하는 함수가 달랐다. 다른 사람의 풀이도 자주보면서 내것으로 만들 수 있도록 해야겠다.</li>
</ul>]]></content><author><name>HyeongSub Lim</name></author><category term="Algorithm" /><category term="Algorithm" /><category term="coding test" /><category term="최소직사각형" /><summary type="html"><![CDATA[[프로그래머스/Swift] 최소직사각형]]></summary></entry><entry><title type="html">[TIL] 내배캠 iOS앱 개발 공부 11일차</title><link href="http://localhost:4000/TIL/til11/" rel="alternate" type="text/html" title="[TIL] 내배캠 iOS앱 개발 공부 11일차" /><published>2024-03-12T00:00:00+09:00</published><updated>2024-03-12T00:00:00+09:00</updated><id>http://localhost:4000/TIL/til11</id><content type="html" xml:base="http://localhost:4000/TIL/til11/"><![CDATA[<h3 id="데일리-스크럼">데일리 스크럼</h3>
<p><img src="/assets/images/categories/til/2024-03-12-til11.png" alt="" /></p>

<h3 id="알고리즘">알고리즘</h3>
<p>함수형 프로그래밍과 클로저, 고차함수를 생각하면서 무작정 for문을 쓰지 않으려고 신경써서 풀었다. 정렬은 sort 함수로 썼는데 너무 편하고 좋더라. 무작정 푸는게 아니라 생각해보고 풀어야겠다.</p>

<h3 id="타입캐스팅">타입캐스팅</h3>
<p>팀원들하고 타입캐스팅 관련해서 어려운 점을 이야기하고 각자 공부해서 이야기하는 시간으로 도움이 많이 됐던 것 같다.</p>

<h3 id="심화-강의">심화 강의</h3>
<p>심화 강의는 절반 정도 봤는데 전부 이해하지 못해도 완강하고 과제 하면서 다시 봐야겠다.</p>

<h3 id="내일은">내일은?</h3>
<p>강의를 완강하고 개인과제를 다시 읽어보고 풀어볼예정 !!</p>]]></content><author><name>HyeongSub Lim</name></author><category term="TIL" /><category term="TIL" /><summary type="html"><![CDATA[내배캠 iOS앱 개발 공부 11일차 이야기]]></summary></entry><entry><title type="html">[프로그래머스/Swift] 크기가 작은 부분 문자열</title><link href="http://localhost:4000/algorithm/%ED%81%AC%EA%B8%B0%EA%B0%80%EC%9E%91%EC%9D%80%EB%B6%80%EB%B6%84%EB%AC%B8%EC%9E%90%EC%97%B4/" rel="alternate" type="text/html" title="[프로그래머스/Swift] 크기가 작은 부분 문자열" /><published>2024-03-11T00:00:00+09:00</published><updated>2024-03-11T00:00:00+09:00</updated><id>http://localhost:4000/algorithm/%ED%81%AC%EA%B8%B0%EA%B0%80%EC%9E%91%EC%9D%80%EB%B6%80%EB%B6%84%EB%AC%B8%EC%9E%90%EC%97%B4</id><content type="html" xml:base="http://localhost:4000/algorithm/%ED%81%AC%EA%B8%B0%EA%B0%80%EC%9E%91%EC%9D%80%EB%B6%80%EB%B6%84%EB%AC%B8%EC%9E%90%EC%97%B4/"><![CDATA[<h1 id="문제-설명">문제 설명</h1>
<ul>
  <li>숫자로 이루어진 문자열 t와 p가 주어질 때, t에서 p와 길이가 같은 부분문자열 중에서, 이 부분문자열이 나타내는 수가 p가 나타내는 수보다 작거나 같은 것이 나오는 횟수를 return하는 함수 solution을 완성하세요.</li>
  <li>예를 들어, t=”3141592”이고 p=”271” 인 경우, t의 길이가 3인 부분 문자열은 314, 141, 415, 159, 592입니다. 이 문자열이 나타내는 수 중 271보다 작거나 같은 수는 141, 159 2개 입니다.</li>
  <li><a href="https://school.programmers.co.kr/learn/courses/30/lessons/147355?language=swift" target="_blank">문제 풀기</a></li>
</ul>

<h1 id="제한사항">제한사항</h1>
<ul>
  <li>1 ≤ p의 길이 ≤ 18</li>
  <li>p의 길이 ≤ t의 길이 ≤ 10,000</li>
  <li>t와 p는 숫자로만 이루어진 문자열이며, 0으로 시작하지 않습니다.</li>
</ul>

<h1 id="입출력-예">입출력 예</h1>

<table>
  <thead>
    <tr>
      <th>t</th>
      <th>p</th>
      <th>result</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>“3141592”</td>
      <td>“271”</td>
      <td>2</td>
    </tr>
    <tr>
      <td>“500220839878”</td>
      <td>“7”</td>
      <td>8</td>
    </tr>
    <tr>
      <td>“10203”</td>
      <td>“15”</td>
      <td>3</td>
    </tr>
  </tbody>
</table>

<h2 id="입출력-예-1">입출력 예 #1</h2>
<ul>
  <li>문제 예시와 같습니다.</li>
</ul>

<h2 id="입출력-예-2">입출력 예 #2</h2>
<ul>
  <li>p의 길이가 1이므로 t의 부분문자열은 “5”, “0”, 0”, “2”, “2”, “0”, “8”, “3”, “9”, “8”, “7”, “8”이며 이중 7보다 작거나 같은 숫자는 “5”, “0”, “0”, “2”, “2”, “0”, “3”, “7” 이렇게 8개가 있습니다.</li>
</ul>

<h2 id="입출력-예-3">입출력 예 #3</h2>
<ul>
  <li>p의 길이가 2이므로 t의 부분문자열은 “10”, “02”, “20”, “03”이며, 이중 15보다 작거나 같은 숫자는 “10”, “02”, “03” 이렇게 3개입니다. “02”와 “03”은 각각 2, 3에 해당한다는 점에 주의하세요</li>
</ul>

<h1 id="나의-풀이">나의 풀이</h1>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">Foundation</span>

<span class="kd">func</span> <span class="nf">solution</span><span class="p">(</span><span class="n">_</span> <span class="nv">t</span><span class="p">:</span><span class="kt">String</span><span class="p">,</span> <span class="n">_</span> <span class="nv">p</span><span class="p">:</span><span class="kt">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">cnt</span><span class="p">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">0</span> 
    <span class="k">var</span> <span class="nv">temp</span><span class="p">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="s">""</span> 
    <span class="k">var</span> <span class="nv">arr</span><span class="p">:</span> <span class="p">[</span><span class="kt">String</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span> 
    
    <span class="c1">//배열 변환 </span>
    <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="n">t</span> <span class="p">{</span>
        <span class="n">arr</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="kt">String</span><span class="p">(</span><span class="n">i</span><span class="p">))</span>
    <span class="p">}</span>
    
    <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span><span class="o">...</span><span class="n">arr</span><span class="o">.</span><span class="n">count</span> <span class="o">-</span> <span class="n">p</span><span class="o">.</span><span class="n">count</span> <span class="p">{</span>
        <span class="n">temp</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> 
        <span class="k">if</span> <span class="n">p</span><span class="o">.</span><span class="n">count</span> <span class="o">==</span> <span class="mi">1</span> <span class="p">{</span>
            <span class="k">if</span> <span class="kt">Int</span><span class="p">(</span><span class="n">temp</span><span class="p">)</span><span class="o">!</span> <span class="o">&lt;=</span> <span class="kt">Int</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">!</span> <span class="p">{</span>
                <span class="n">cnt</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="p">}</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">for</span> <span class="n">j</span> <span class="k">in</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">...</span><span class="n">arr</span><span class="o">.</span><span class="n">count</span> <span class="o">-</span> <span class="mi">1</span><span class="p">{</span>
                <span class="n">temp</span> <span class="o">+=</span> <span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>
                
                <span class="c1">//길이가 같으면 숫자 비교 </span>
                <span class="k">if</span> <span class="n">temp</span><span class="o">.</span><span class="n">count</span> <span class="o">==</span> <span class="n">p</span><span class="o">.</span><span class="n">count</span> <span class="p">{</span>
                    <span class="k">if</span> <span class="kt">Int</span><span class="p">(</span><span class="n">temp</span><span class="p">)</span><span class="o">!</span> <span class="o">&lt;=</span> <span class="kt">Int</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">!</span> <span class="p">{</span>
                        <span class="n">cnt</span> <span class="o">+=</span> <span class="mi">1</span>
                    <span class="p">}</span>
                    <span class="k">break</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>       
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">cnt</span> 
<span class="p">}</span>
</code></pre></div></div>
<h1 id="다른-사람-풀이">다른 사람 풀이</h1>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">Foundation</span>

<span class="kd">func</span> <span class="nf">solution</span><span class="p">(</span><span class="n">_</span> <span class="nv">t</span><span class="p">:</span><span class="kt">String</span><span class="p">,</span> <span class="n">_</span> <span class="nv">p</span><span class="p">:</span><span class="kt">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">answer</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span> <span class="o">...</span> <span class="n">t</span><span class="o">.</span><span class="n">count</span> <span class="o">-</span> <span class="n">p</span><span class="o">.</span><span class="n">count</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">subStr</span> <span class="o">=</span> <span class="n">t</span><span class="o">.</span><span class="nf">dropFirst</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="o">.</span><span class="nf">prefix</span><span class="p">(</span><span class="n">p</span><span class="o">.</span><span class="n">count</span><span class="p">)</span>
        <span class="k">if</span> <span class="k">let</span> <span class="nv">comp</span> <span class="o">=</span> <span class="kt">Int</span><span class="p">(</span><span class="n">subStr</span><span class="p">),</span> <span class="k">let</span> <span class="nv">val</span> <span class="o">=</span> <span class="kt">Int</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">answer</span> <span class="o">+=</span> <span class="n">comp</span> <span class="o">-</span> <span class="n">val</span> <span class="o">&lt;=</span> <span class="mi">0</span> <span class="p">?</span> <span class="mi">1</span> <span class="p">:</span> <span class="mi">0</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="n">answer</span>
<span class="p">}</span>
</code></pre></div></div>

<h1 id="의견">의견</h1>
<ul>
  <li>주말에 고차함수 공부를 해서 고차함수를 사용하여 문제를 풀어보려고했는데 아직 내공이 부족한 것 같다. 기본 제공하는 함수를 많이 사용해봐야할듯…</li>
</ul>]]></content><author><name>HyeongSub Lim</name></author><category term="Algorithm" /><category term="Algorithm" /><category term="coding test" /><category term="크기가 작은 부분 문자열" /><summary type="html"><![CDATA[[프로그래머스/Swift] 크기가 작은 부분 문자열]]></summary></entry><entry><title type="html">[TIL] 내배캠 iOS앱 개발 공부 10일차</title><link href="http://localhost:4000/TIL/til10/" rel="alternate" type="text/html" title="[TIL] 내배캠 iOS앱 개발 공부 10일차" /><published>2024-03-11T00:00:00+09:00</published><updated>2024-03-11T00:00:00+09:00</updated><id>http://localhost:4000/TIL/til10</id><content type="html" xml:base="http://localhost:4000/TIL/til10/"><![CDATA[<h3 id="데일리-스크럼">데일리 스크럼</h3>
<p><img src="/assets/images/categories/til/2024-03-11-til10.png" alt="" /></p>

<h3 id="알고리즘">알고리즘</h3>
<p>주말에 야곰님 책으로 클로저와 고차함수 공부를 했다. 오늘 오전에 알고리즘 문제에 응용할 수 있을지 고민했는데 사용하지 못했다. 다른 사람 풀이를 보니 Swift가 제공하는 문자열 함수를 사용하여 풀었더라. 조금씩 함수형 프로그래밍을 생각하며 익숙해져야겠다.</p>

<h3 id="깃-허브-강의-다시-듣기">깃 허브 강의 다시 듣기</h3>
<p>브랜치 생성, 목록 보기, 이동, 명령어를 통한 합치기, Github에서 합치기 등 기본 내용을 다시 숙지했다. 이번주 개인 과제 업로드 할때 배운 내용을 써먹어볼 예정!</p>

<h3 id="클로저">클로저</h3>
<p>지난 주 금요일에 공부했던 클로저를 정리하면서 블로그에 올릴 준비를 하는데 생각보다 깔끔하게 정리하는게 어려운 것 같다. 다시 큰 주제를 생각하고 구체화시켜 작성해봐야겠다. 잘 쓰려고 고집부린건 아닌데 어려운 것 같다.</p>

<h3 id="내일은">내일은?</h3>
<p>오늘 공개된 강의를 하나밖에 못들어서 강의를 마저 듣고 블로그 작성할 예정. 강의는 들었으나 정리된 내용이 부족한 것 같다.</p>]]></content><author><name>HyeongSub Lim</name></author><category term="TIL" /><category term="TIL" /><summary type="html"><![CDATA[내배캠 iOS앱 개발 공부 10일차 이야기]]></summary></entry><entry><title type="html">[TIL] 내배캠 iOS앱 개발 공부 9일차</title><link href="http://localhost:4000/TIL/til9/" rel="alternate" type="text/html" title="[TIL] 내배캠 iOS앱 개발 공부 9일차" /><published>2024-03-08T00:00:00+09:00</published><updated>2024-03-08T00:00:00+09:00</updated><id>http://localhost:4000/TIL/til9</id><content type="html" xml:base="http://localhost:4000/TIL/til9/"><![CDATA[<h3 id="데일리-스크럼">데일리 스크럼</h3>
<p><img src="/assets/images/categories/til/2024-03-08-til9.png" alt="" /></p>

<h3 id="알고리즘">알고리즘</h3>
<p>오늘 알고리즘은 for문을 3번 중첩하여 조금은 빨리 풀었다. 다른 사람도 풀이가 비슷했는데 반복 범위가 달라서 해당 부분은 고민해볼 수 있었다.</p>

<h3 id="블로그-조회수-추가-새로고침-추가">블로그 조회수 추가 (새로고침 추가)</h3>
<p>화요일 저녁에 팀원 블로그 댓글 남기기 미션이 있어 화요일 오전에 댓글 기능을 급하게 추가하고 그 뒤로 포스팅 수 추가까지 했다. 오늘은 조회수 기능을 추가하고 포스팅하였다. 다음 주에는 구글 애드센스에 도전해볼 예정 
<img src="/assets/images/categories/til/2024-03-08-til9-2.png" alt="" /></p>

<h3 id="개인-과제-해설-공부">개인 과제 해설 공부</h3>
<p>개인 과제해설 영상을 보면서 객체지향 프로그래밍의 원칙 중 가장 유명한 SOLID 원칙을 알게 되었다. 해당 원칙에 대한 공부는 못했지만 우선 메모해두고 꼭 다시 찾아보는걸로!!</p>

<ol>
  <li>단일 책임 원칙 (Single Responsibility Principle - SRP)</li>
  <li>개방-폐쇄 원칙 (Open/Closed Principle - OCP)</li>
  <li>리스코프 치환 원칙 (Liskov Substitution Principle - LSP)</li>
  <li>인터페이스 분리 원칙 (Interface Segregation Principle - ISP)</li>
  <li>의존성 역전 원칙 (Dependency Inversion Principle - DIP)</li>
</ol>

<h3 id="클로저">클로저</h3>
<p>원래 깃 관련 공부를 하려고 했는데 알고리즘 문제 풀다보니 클로저, 고차함수 등 내용 공부가 필요하여 그중에서 클로저 공부를 하였다. 클로저는 함수이고 일급객체… 정리중인데 정리도 시간이 오래 걸린다. 정리하면 포스팅할 예정!</p>

<h3 id="내일은">내일은?</h3>
<p>12시간씩 하는데 공부도 하고 블로그도 쓰고 하다보면 어느새 TIL 작성시간 🤦🏻 시간이 모자라다 ? ? ? ? ? 내일은 주말이니까 .. 조금 쉬면서 체력 회복해야겠다. 깃 공부는 다음주에 다시 !</p>]]></content><author><name>HyeongSub Lim</name></author><category term="TIL" /><category term="TIL" /><summary type="html"><![CDATA[내배캠 iOS앱 개발 공부 9일차 이야기]]></summary></entry><entry><title type="html">[minimal-mistakes]조회수 추가하기</title><link href="http://localhost:4000/GitHubBlog/hits/" rel="alternate" type="text/html" title="[minimal-mistakes]조회수 추가하기" /><published>2024-03-08T00:00:00+09:00</published><updated>2024-03-08T00:00:00+09:00</updated><id>http://localhost:4000/GitHubBlog/hits</id><content type="html" xml:base="http://localhost:4000/GitHubBlog/hits/"><![CDATA[<p>깃허브 블로그는 댓글, 포스팅 개수, 조회수까지 하나씩 등록해줘야하는데요. 이번에는 많은 깃허브 블로그에서 사용하는 Hits를 추가했습니다. 
<a href="https://hits.dwyl.com/" target="_blank">hits</a>에서 새로고침이 되었는지 알려주는 API를 제공합니다.</p>

<h1 id="1-hits-api-커스터마이징">1. hits API 커스터마이징</h1>
<p>hits에서는 기본 badge를 변경할 수 없어 <a href="https://hits.seeyoufarm.com/" target="_blank">https://hits.seeyoufarm.com/</a>에 접속하셔서 TARGET URL을 입력하시고 원하는 색상 등 옵션을 선택합니다. 저는 색상만 통일했습니다. 
<img src="/assets/images/categories/githubblog/2024-03-08-hits.png" alt="" /></p>

<h1 id="2-html-link-복사하기">2. HTML Link 복사하기</h1>
<p><img src="/assets/images/categories/githubblog/2024-03-08-hits2.png" alt="" /></p>

<h1 id="3-메인-상단에-추가">3. 메인 상단에 추가</h1>
<p>저는 페이지 상단에 추가하였습니다. _includes/head 폴더의 customs.html 파일입니다. 
페이지 하단에 추가하시려면 _includes/footer 폴더의 customs.html 파일을 수정하시면 됩니다. 
<img src="/assets/images/categories/githubblog/2024-03-08-hits3.png" alt="" /></p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- 방문자 수 추가 --&gt;</span>
<span class="nt">&lt;div</span> <span class="na">style=</span><span class="s">"text-align: right;"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"https://hits.seeyoufarm.com"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">"https://hits.seeyoufarm.com/api/count/incr/badge.svg?url=https%3A%2F%2Flimlogging.github.io&amp;count_bg=%23555555&amp;title_bg=%23555555&amp;icon=&amp;icon_color=%23E7E7E7&amp;title=hits&amp;edge_flat=false"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/a&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div>

<h1 id="4-포스트-상단에-추가">4. 포스트 상단에 추가</h1>
<p>_layouts 폴더에 있는 single.html 파일을 수정합니다. 
3번의 코드는 github id가 포함되어있지만 포스트 상단에 추가하는 코드는 id가 변수로 대체되어 그냥 복사 붙여넣기 하시면 됩니다. 
<img src="/assets/images/categories/githubblog/2024-03-08-hits4.png" alt="" /></p>
<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- 포스팅 조회수 추가 --&gt;</span>
<span class="nt">&lt;div</span> <span class="na">style=</span><span class="s">"text-align: right;"</span><span class="nt">&gt;</span>
<span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"https://hits.seeyoufarm.com/localhost:4000/GitHubBlog/hits/"</span><span class="na">target=</span><span class="s">"_blank"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">"https://hits.seeyoufarm.com/api/count/incr/badge.svg?url=https://localhost:4000/GitHubBlog/hits/&amp;count_bg=%23555555&amp;title_bg=%23555555&amp;icon=&amp;icon_color=%23E7E7E7&amp;title=hits&amp;edge_flat=false"</span><span class="nt">/&gt;</span>
<span class="nt">&lt;/a&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div>

<h1 id="5-확인">5. 확인</h1>
<p>메인페이지와 포스트 상단에 추가가 된 것을 확인 하실 수 있습니다.
<img src="/assets/images/categories/githubblog/2024-03-08-hits5.png" alt="" /></p>]]></content><author><name>HyeongSub Lim</name></author><category term="GitHubBlog" /><category term="GitHub" /><category term="blog" /><category term="GitHub blog" /><category term="hits" /><category term="조회수" /><summary type="html"><![CDATA[[minimal-mistakes] 조회수 추가하기입니다.]]></summary></entry><entry><title type="html">[프로그래머스/Swift] 삼총사</title><link href="http://localhost:4000/algorithm/%EC%82%BC%EC%B4%9D%EC%82%AC/" rel="alternate" type="text/html" title="[프로그래머스/Swift] 삼총사" /><published>2024-03-08T00:00:00+09:00</published><updated>2024-03-08T00:00:00+09:00</updated><id>http://localhost:4000/algorithm/%EC%82%BC%EC%B4%9D%EC%82%AC</id><content type="html" xml:base="http://localhost:4000/algorithm/%EC%82%BC%EC%B4%9D%EC%82%AC/"><![CDATA[<h1 id="문제-설명">문제 설명</h1>
<ul>
  <li>한국중학교에 다니는 학생들은 각자 정수 번호를 갖고 있습니다. 이 학교 학생 3명의 정수 번호를 더했을 때 0이 되면 3명의 학생은 삼총사라고 합니다. 예를 들어, 5명의 학생이 있고, 각각의 정수 번호가 순서대로 -2, 3, 0, 2, -5일 때, 첫 번째, 세 번째, 네 번째 학생의 정수 번호를 더하면 0이므로 세 학생은 삼총사입니다. 또한, 두 번째, 네 번째, 다섯 번째 학생의 정수 번호를 더해도 0이므로 세 학생도 삼총사입니다. 따라서 이 경우 한국중학교에서는 두 가지 방법으로 삼총사를 만들 수 있습니다.</li>
</ul>

<p>한국중학교 학생들의 번호를 나타내는 정수 배열 number가 매개변수로 주어질 때, 학생들 중 삼총사를 만들 수 있는 방법의 수를 return 하도록 solution 함수를 완성하세요.</p>
<ul>
  <li><a href="https://school.programmers.co.kr/learn/courses/30/lessons/131705" target="_blank">문제 풀기</a></li>
</ul>

<h1 id="제한사항">제한사항</h1>
<ul>
  <li>3 ≤ number의 길이 ≤ 13</li>
  <li>-1,000 ≤ number의 각 원소 ≤ 1,000</li>
  <li>서로 다른 학생의 정수 번호가 같을 수 있습니다.</li>
</ul>

<h1 id="입출력-예">입출력 예</h1>

<table>
  <thead>
    <tr>
      <th>number</th>
      <th>result</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>[-2, 3, 0, 2, -5]</td>
      <td>2</td>
    </tr>
    <tr>
      <td>[-3, -2, -1, 0, 1, 2, 3]</td>
      <td>5</td>
    </tr>
    <tr>
      <td>[-1, 1, -1, 1]</td>
      <td>0</td>
    </tr>
  </tbody>
</table>

<h2 id="입출력-예-1">입출력 예 #1</h2>
<ul>
  <li>문제 예시와 같습니다.</li>
</ul>

<h2 id="입출력-예-2">입출력 예 #2</h2>
<ul>
  <li>학생들의 정수 번호 쌍 (-3, 0, 3), (-2, 0, 2), (-1, 0, 1), (-2, -1, 3), (-3, 1, 2) 이 삼총사가 될 수 있으므로, 5를 return 합니다.</li>
</ul>

<h2 id="입출력-예-3">입출력 예 #3</h2>
<ul>
  <li>삼총사가 될 수 있는 방법이 없습니다.</li>
</ul>

<h1 id="나의-풀이">나의 풀이</h1>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">Foundation</span>

<span class="kd">func</span> <span class="nf">solution</span><span class="p">(</span><span class="n">_</span> <span class="nv">number</span><span class="p">:[</span><span class="kt">Int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">cnt</span><span class="p">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">0</span>
    
    <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span><span class="o">...</span><span class="n">number</span><span class="o">.</span><span class="n">count</span> <span class="o">-</span> <span class="mi">3</span> <span class="p">{</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">"number[i]: </span><span class="se">\(</span><span class="n">number</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">j</span> <span class="k">in</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">...</span><span class="n">number</span><span class="o">.</span><span class="n">count</span> <span class="o">-</span> <span class="mi">2</span> <span class="p">{</span>
            <span class="nf">print</span><span class="p">(</span><span class="s">"----number[jj]: </span><span class="se">\(</span><span class="n">number</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
            <span class="k">for</span> <span class="n">k</span> <span class="k">in</span> <span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="o">...</span><span class="n">number</span><span class="o">.</span><span class="n">count</span> <span class="o">-</span> <span class="mi">1</span> <span class="p">{</span>
                <span class="nf">print</span><span class="p">(</span><span class="s">"--------number[k]: </span><span class="se">\(</span><span class="n">number</span><span class="p">[</span><span class="n">k</span><span class="p">]</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
                <span class="k">if</span> <span class="n">number</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">number</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">+</span> <span class="n">number</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
                    <span class="n">cnt</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">cnt</span>
<span class="p">}</span>
</code></pre></div></div>
<h1 id="다른-사람-풀이">다른 사람 풀이</h1>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">Foundation</span>

<span class="kd">func</span> <span class="nf">solution</span><span class="p">(</span><span class="n">_</span> <span class="nv">number</span><span class="p">:[</span><span class="kt">Int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">ans</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span><span class="o">..&lt;</span><span class="n">number</span><span class="o">.</span><span class="n">count</span> <span class="p">{</span>
        <span class="k">for</span> <span class="n">j</span> <span class="k">in</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">..&lt;</span><span class="n">number</span><span class="o">.</span><span class="n">count</span> <span class="p">{</span>
            <span class="k">for</span> <span class="n">z</span> <span class="k">in</span> <span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="o">..&lt;</span><span class="n">number</span><span class="o">.</span><span class="n">count</span> <span class="p">{</span>
                <span class="k">if</span> <span class="n">number</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">number</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">+</span> <span class="n">number</span><span class="p">[</span><span class="n">z</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span> <span class="n">ans</span> <span class="o">+=</span> <span class="mi">1</span> <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">ans</span>
<span class="p">}</span>
</code></pre></div></div>

<h1 id="의견">의견</h1>
<ul>
  <li>for 문을 2개써야하나 하다가.. 종이로 써보고 3개로 수정했다. 나는 숫자 3개 때문에 범위를 수정했는데 다른 사람은 수정하지 않았다. 반복 횟수를 배열만큼 해도 if문까지 오지 않으니 … 다른 사람 코드를 보면서 반복 횟수에 대해서 다시 생각해보았다.</li>
</ul>]]></content><author><name>HyeongSub Lim</name></author><category term="Algorithm" /><category term="Algorithm" /><category term="coding test" /><category term="삼총사" /><summary type="html"><![CDATA[[프로그래머스/Swift] 삼총사]]></summary></entry></feed>