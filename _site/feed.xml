<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-03-18T19:16:33+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">limlogging Devlog</title><author><name>HyeongSub Lim</name></author><entry><title type="html">깃(git)과 깃허브(GitHub)란?</title><link href="http://localhost:4000/git/git/" rel="alternate" type="text/html" title="깃(git)과 깃허브(GitHub)란?" /><published>2024-03-16T00:00:00+09:00</published><updated>2024-03-16T00:00:00+09:00</updated><id>http://localhost:4000/git/git</id><content type="html" xml:base="http://localhost:4000/git/git/"><![CDATA[<h1 id="깃git이란">깃(Git)이란?</h1>
<ul>
  <li>Git은 분산 버전 관리 시스템(Distributed Version Control System)으로, 소프트웨어 개발에서 사용되는 파일들의 변경 사항을 추적하고 관리하는 도구입니다. 개발자들은 Git을 사용하여 프로젝트의 모든 버전을 기록하고, 여러 명의 개발자가 동시에 작업할 수 있도록 하며, 변경 사항을 추적하고 병합하는 등의 작업을 할 수 있습니다. Git은 분산형이기 때문에 모든 개발자가 전체 프로젝트의 복사본을 갖고 있으며, 중앙 서버에 의존하지 않고도 작업을 진행할 수 있습니다.</li>
</ul>

<h1 id="버전-관리란">버전 관리란?</h1>
<ul>
  <li>파일 변화를 시간에 따라 기록했다가 나중에 특정 시점의 버전을 다시 꺼내올 수 있도록 관리하는 것 입니다. 버전 관리를 위해 버전 관리 시스템(VCS, Version Control System)을 사용합니다.</li>
</ul>

<h2 id="로컬-버전-관리-local-vcs-local-version-control-system">로컬 버전 관리 (Local VCS, Local Version Control System)</h2>
<ul>
  <li>자신의 컴퓨터에 있는 파일의 변경 사항을 추적하고 관리할 수 있습니다.</li>
  <li>장점
    <ul>
      <li>파일의 변경 이력을 추적하고 관리할 수 있습니다.</li>
      <li>변경 사항을 롤백하거나 이전 버전으로 복구할 수 있어 실수를 최소화할 수 있습니다.</li>
    </ul>
  </li>
  <li>단점
    <ul>
      <li>중앙 서버가 필요하지 않기 때문에 협업이 어려울 수 있습니다.</li>
      <li>다수의 개발자가 동시에 작업할 때 충돌이 발생할 수 있고, 해결하기 어려울 수 있습니다.</li>
    </ul>
  </li>
  <li>관련 시스템
    <ul>
      <li>RCS (Revision Control System), CVS (Concurrent Versions System)</li>
    </ul>
  </li>
</ul>

<h2 id="중앙집중식-버전-관리-cvcs-centralized-version-control-system">중앙집중식 버전 관리 (CVCS, Centralized Version Control System)</h2>
<ul>
  <li>중앙집중식 버전 관리 시스템은 모든 파일의 변경 사항을 중앙 서버에 저장하고 개발자들이 중앙 서버에서 파일을 가져오고 커밋하는 방식입니다.</li>
  <li>장점
    <ul>
      <li>중앙 서버에서 모든 파일의 변경 사항을 관리하므로 협업이 간편합니다.</li>
      <li>버전 관리, 백업, 보안 등을 중앙에서 관리할 수 있습니다.</li>
    </ul>
  </li>
  <li>단점
    <ul>
      <li>중앙 서버에 의존하므로 중앙 서버에 문제가 발생하면 작업이 중단될 수 있습니다.</li>
      <li>네트워크 연결이 필요하므로 오프라인 상황에서 작업이 어렵습니다.</li>
    </ul>
  </li>
  <li>관련 시스템
    <ul>
      <li>VSS(Visual SourceSafe), SVN(Subversion)</li>
      <li>개인적으로는 VSS를 가장 많이 사용했습니다. 지방의 중소, 제조업 전산실에서는 VSS, SVN을 아직도 많이 사용합니다.</li>
    </ul>
  </li>
</ul>

<h2 id="분산-버전-관리-시스템-dvcs-distributed-version-control-system">분산 버전 관리 시스템 (DVCS, Distributed Version Control System)</h2>
<ul>
  <li>분산 버전 관리 시스템은 중앙 서버와 개발자들의 로컬 저장소 간에 변경 사항을 주고받는 시스템입니다. 각 개발자는 전체 저장소의 복사본을 갖고 있으므로 인터넷 연결 없이도 작업할 수 있습니다.</li>
  <li>장점
    <ul>
      <li>각 개발자가 로컬 저장소를 갖고 있으므로 네트워크 연결이 없어도 작업할 수 있습니다.</li>
      <li>분산 구조로 인해 중앙 서버에 의존하지 않으므로 중앙 서버의 장애에도 유연하게 대처할 수 있습니다.</li>
      <li>협업이 용이하고 병합 작업이 간편합니다.</li>
    </ul>
  </li>
  <li>단점
    <ul>
      <li>초보자에게는 초기 설정과 사용이 어려울 수 있습니다.</li>
      <li>중앙 서버가 없으므로 프로젝트의 모든 변경 사항을 추적하고 관리하기 어려울 수 있습니다.</li>
    </ul>
  </li>
  <li>관련 시스템
    <ul>
      <li>Git, Mercurial</li>
    </ul>
  </li>
</ul>

<h1 id="깃허브github란">깃허브(GitHub)란?</h1>
<ul>
  <li>Git을 기반으로 한 코드 호스팅 플랫폼입니다. 개발자들은 GitHub을 사용하여 Git으로 관리되는 프로젝트를 호스팅하고, 다른 사용자와 협업하며, 프로젝트에 기여할 수 있습니다. GitHub은 개인 및 기업용 소프트웨어 개발 프로젝트, 오픈 소스 프로젝트, 문서 등 다양한 형태의 프로젝트를 지원하며, 이슈 트래킹, 웹 호스팅, 코드 검토, CI/CD 등의 기능을 제공합니다.</li>
</ul>

<h1 id="git과-github는-다르다">Git과 GitHub는 다르다!</h1>
<ul>
  <li>Git은 버전 관리 도구</li>
  <li>GitHub은 Git을 기반으로 한 코드 호스팅 플랫폼</li>
</ul>

<p>Git을 사용하여 프로젝트를 관리하고, GitHub을 사용하여 프로젝트를 호스팅하고 협업할 수 있습니다.</p>]]></content><author><name>HyeongSub Lim</name></author><category term="git" /><category term="git" /><category term="github" /><summary type="html"><![CDATA[git, GitHub란?]]></summary></entry><entry><title type="html">[내배캠] 3주차 개인과제 - 야구게임</title><link href="http://localhost:4000/sparta/baseballGame/" rel="alternate" type="text/html" title="[내배캠] 3주차 개인과제 - 야구게임" /><published>2024-03-15T00:00:00+09:00</published><updated>2024-03-15T00:00:00+09:00</updated><id>http://localhost:4000/sparta/baseballGame</id><content type="html" xml:base="http://localhost:4000/sparta/baseballGame/"><![CDATA[<h1 id="개인과제-후기">개인과제 후기</h1>
<p>1주차 온보딩, 2,3 주차 문법강의가 끝났습니다. 
배운 내용을 바탕으로 과제를 만들어 제출하였습니다. 중복값을 제외하고 랜덤 값 뽑기, 스트라이크/볼 판단하는 부분에서 고민하는 시간이 많았습니다. 제출 시간이 촉박하여 우선 완성시켜놓고 최대한 기능별로 나누는 작업을 진행하였습니다. 배웠던 내용을 많이 적용하지 못한 것 같아 아쉬움이 남습니다.</p>

<h1 id="lv1-문제">Lv1 문제</h1>
<ul>
  <li>1에서 9까지의 서로 다른 임의의 수 3개를 정하고 맞추는 게임</li>
  <li>정답은 랜덤으로 만듭니다. 1에서 9까지의 서로 다른 임의의 수 3자리</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">Foundation</span>
<span class="kd">class</span> <span class="kt">Random</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">randomNumber</span><span class="p">(</span><span class="n">randomNumberCount</span> <span class="nv">cnt</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="p">{</span>
        <span class="c1">//1. 배열에 범위만큼의 숫자 할당</span>
        <span class="k">var</span> <span class="nv">arrNumber</span><span class="p">:</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="o">=</span> <span class="kt">Array</span><span class="p">(</span><span class="mi">1</span><span class="o">...</span><span class="mi">9</span><span class="p">)</span>
        <span class="k">var</span> <span class="nv">arrRandomNumber</span><span class="p">:</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
        
        <span class="c1">//임의 개수만큼 반복</span>
        <span class="k">for</span> <span class="n">_</span> <span class="k">in</span> <span class="mi">1</span><span class="o">...</span><span class="n">cnt</span> <span class="p">{</span>
            <span class="c1">//2. 배열 범위에서 랜덤 숫자 인덱스 할당</span>
            <span class="k">var</span> <span class="nv">index</span><span class="p">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="kt">Int</span><span class="o">.</span><span class="nf">random</span><span class="p">(</span><span class="nv">in</span><span class="p">:</span> <span class="mi">0</span><span class="o">...</span><span class="n">arrNumber</span><span class="o">.</span><span class="n">count</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
            <span class="c1">//3. 할당된 숫자를 새로운 배열에 저장</span>
            <span class="n">arrRandomNumber</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="n">arrNumber</span><span class="p">[</span><span class="n">index</span><span class="p">])</span>
            <span class="c1">//4. 할당된 숫자의 Index를 제거</span>
            <span class="n">arrNumber</span><span class="o">.</span><span class="nf">remove</span><span class="p">(</span><span class="nv">at</span><span class="p">:</span> <span class="n">index</span><span class="p">)</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">arrRandomNumber</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="c1">//정답 확인</span>
<span class="kd">func</span> <span class="nf">answerCheck</span><span class="p">(</span><span class="n">comArr</span> <span class="nv">comArrNum</span><span class="p">:</span> <span class="p">[</span><span class="kt">Int</span><span class="p">],</span> <span class="n">myArr</span> <span class="nv">myArrNum</span><span class="p">:</span> <span class="p">[</span><span class="kt">Int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="kt">String</span> <span class="p">{</span>
    <span class="c1">//맞춘 개수 확인</span>
    <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span><span class="o">...</span><span class="n">myArrNum</span><span class="o">.</span><span class="n">count</span> <span class="o">-</span> <span class="mi">1</span> <span class="p">{</span>
        <span class="k">if</span> <span class="n">myArrNum</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">comArrNum</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="p">{</span>
            <span class="n">rightCnt</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="n">rightCnt</span> <span class="o">==</span> <span class="mi">3</span> <span class="p">?</span> <span class="s">"정답입니다."</span> <span class="p">:</span> <span class="s">"틀렸습니다! (</span><span class="se">\(</span><span class="n">rightCnt</span><span class="se">)</span><span class="s">개 맞췄습니다.)"</span>
<span class="p">}</span>

<span class="k">var</span> <span class="nv">comRandom</span><span class="p">:</span> <span class="kt">Random</span> <span class="o">=</span> <span class="kt">Random</span><span class="p">()</span>
<span class="k">var</span> <span class="nv">comArrNum</span><span class="p">:</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="o">=</span> <span class="n">comRandom</span><span class="o">.</span><span class="nf">randomNumber</span><span class="p">(</span><span class="nv">randomNumberCount</span><span class="p">:</span> <span class="mi">3</span><span class="p">)</span><span class="o">.</span><span class="nf">sorted</span><span class="p">()</span>
<span class="k">var</span> <span class="nv">myRandom</span><span class="p">:</span> <span class="kt">Random</span> <span class="o">=</span> <span class="kt">Random</span><span class="p">()</span>
<span class="k">var</span> <span class="nv">myArrNum</span><span class="p">:</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="o">=</span> <span class="n">myRandom</span><span class="o">.</span><span class="nf">randomNumber</span><span class="p">(</span><span class="nv">randomNumberCount</span><span class="p">:</span> <span class="mi">3</span><span class="p">)</span><span class="o">.</span><span class="nf">sorted</span><span class="p">()</span>
<span class="k">var</span> <span class="nv">result</span><span class="p">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="s">""</span>
<span class="k">var</span> <span class="nv">rightCnt</span><span class="p">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">0</span>

<span class="nf">print</span><span class="p">(</span><span class="s">"컴퓨터 선택: </span><span class="se">\(</span><span class="n">comArrNum</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="s">"내 선택: </span><span class="se">\(</span><span class="n">myArrNum</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">answerCheck</span><span class="p">(</span><span class="nv">comArr</span><span class="p">:</span> <span class="n">comArrNum</span><span class="p">,</span> <span class="nv">myArr</span><span class="p">:</span> <span class="n">myArrNum</span><span class="p">))</span>
</code></pre></div></div>

<h1 id="lv2-문제">Lv2 문제</h1>
<ul>
  <li>정답을 맞추기 위해 3자리수를 입력하고 힌트를 받습니다
    <ul>
      <li>힌트는 야구용어인 볼과 스트라이크입니다.</li>
      <li>같은 자리에 같은 숫자가 있는 경우 스트라이크, 다른 자리에 숫자가 있는 경우 볼입니다.</li>
    </ul>
  </li>
  <li>ex) 정답 : 456 인 경우
    <ul>
      <li>435를 입력한 경우 → 1스트라이크 1볼</li>
      <li>357를 입력한 경우 → 1스트라이크</li>
      <li>678를 입력한 경우 → 1볼</li>
      <li>123를 입력한 경우 → Nothing</li>
    </ul>
  </li>
  <li>ex) 정답 : 456 인 경우
    <ul>
      <li>435를 입력한 경우 → 1스트라이크 1볼</li>
      <li>357를 입력한 경우 → 1스트라이크</li>
      <li>678를 입력한 경우 → 1볼</li>
      <li>123를 입력한 경우 → Nothing</li>
    </ul>
  </li>
  <li>만약 올바르지 않은 입력값에 대해서는 오류 문구를 보여주세요</li>
  <li>3자리 숫자가 정답과 같은 경우 게임이 종료됩니다</li>
  <li>실행 예시(정답 : 456)</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span> <span class="n">게임을</span> <span class="n">시작합니다</span> <span class="o">&gt;</span>
<span class="n">숫자를</span> <span class="n">입력하세요</span>
<span class="mi">435</span>
<span class="mi">1</span><span class="n">스트라이크</span> <span class="mi">1</span><span class="n">볼</span>

<span class="n">숫자를</span> <span class="n">입력하세요</span>
<span class="mi">357</span>
<span class="mi">1</span><span class="n">스트라이크</span>

<span class="n">숫자를</span> <span class="n">입력하세요</span>
<span class="mi">123</span>
<span class="kt">Nothing</span>

<span class="n">숫자를</span> <span class="n">입력하세요</span>
<span class="n">dfg</span> <span class="c1">// 세 자리 숫자가 아니어서 올바르지 않은 입력값</span>
<span class="n">올바르지</span> <span class="n">않은</span> <span class="n">입력값입니다</span>

<span class="n">숫자를</span> <span class="n">입력하세요</span>
<span class="mi">199</span> <span class="c1">// 9가 두번 사용되어 올바르지 않은 입력값</span>
<span class="n">올바르지</span> <span class="n">않은</span> <span class="n">입력값입니다</span>

<span class="n">숫자를</span> <span class="n">입력하세요</span>
<span class="mi">103</span> <span class="c1">// 0이 사용되어 올바르지 않은 입력값</span>
<span class="n">올바르지</span> <span class="n">않은</span> <span class="n">입력값입니다</span>

<span class="n">숫자를</span> <span class="n">입력하세요</span>
<span class="mi">456</span>
<span class="n">정답입니다</span><span class="o">!</span>
</code></pre></div></div>

<h1 id="lv3-문제">Lv3 문제</h1>
<ul>
  <li>정답이 되는 숫자를 0에서 9까지의 서로 다른 3자리의 숫자로 바꿔주세요
    <ul>
      <li>맨 앞자리에 0이 오는 것은 불가능합니다
        <ul>
          <li>092 → 불가능</li>
          <li>870 → 가능</li>
          <li>300 → 불가능</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h1 id="lv4-문제">Lv4 문제</h1>
<ul>
  <li>프로그램을 시작할 때 안내문구를 보여주세요
    <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 예시</span>
<span class="n">환영합니다</span><span class="o">!</span> <span class="n">원하시는</span> <span class="n">번호를</span> <span class="n">입력해주세요</span>
<span class="mi">1</span><span class="o">.</span> <span class="n">게임</span> <span class="n">시작하기</span>  <span class="mi">2</span><span class="o">.</span> <span class="n">게임</span> <span class="n">기록</span> <span class="n">보기</span>  <span class="mi">3</span><span class="o">.</span> <span class="n">종료하기</span>
</code></pre></div>    </div>
  </li>
  <li>1번 게임 시작하기의 경우 “필수 구현 기능” 의 예시처럼 게임이 진행됩니다
    <ul>
      <li>정답을 맞혀 게임이 종료된 경우 위 안내문구를 다시 보여주세요</li>
    </ul>
  </li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 예시</span>
<span class="n">환영합니다</span><span class="o">!</span> <span class="n">원하시는</span> <span class="n">번호를</span> <span class="n">입력해주세요</span>
<span class="mi">1</span><span class="o">.</span> <span class="n">게임</span> <span class="n">시작하기</span>  <span class="mi">2</span><span class="o">.</span> <span class="n">게임</span> <span class="n">기록</span> <span class="n">보기</span>  <span class="mi">3</span><span class="o">.</span> <span class="n">종료하기</span>
<span class="mi">1</span> <span class="c1">// 1번 게임 시작하기 입력</span>

<span class="o">&lt;</span> <span class="n">게임을</span> <span class="n">시작합니다</span> <span class="o">&gt;</span>
<span class="n">숫자를</span> <span class="n">입력하세요</span>
<span class="o">.</span>
<span class="o">.</span>
<span class="o">.</span>
</code></pre></div></div>

<h1 id="lv5-문제">Lv5 문제</h1>
<ul>
  <li>2번 게임 기록 보기의 경우 완료한 게임들에 대해 시도 횟수를 보여줍니다</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 예시</span>
<span class="n">환영합니다</span><span class="o">!</span> <span class="n">원하시는</span> <span class="n">번호를</span> <span class="n">입력해주세요</span>
<span class="mi">1</span><span class="o">.</span> <span class="n">게임</span> <span class="n">시작하기</span>  <span class="mi">2</span><span class="o">.</span> <span class="n">게임</span> <span class="n">기록</span> <span class="n">보기</span>  <span class="mi">3</span><span class="o">.</span> <span class="n">종료하기</span>
<span class="mi">2</span> <span class="c1">// 2번 게임 기록 보기 입력</span>

<span class="o">&lt;</span> <span class="n">게임</span> <span class="n">기록</span> <span class="n">보기</span> <span class="o">&gt;</span>
<span class="mi">1</span><span class="n">번째</span> <span class="nv">게임</span> <span class="p">:</span> <span class="n">시도</span> <span class="n">횟수</span> <span class="o">-</span> <span class="mi">14</span>
<span class="mi">2</span><span class="n">번째</span> <span class="nv">게임</span> <span class="p">:</span> <span class="n">시도</span> <span class="n">횟수</span> <span class="o">-</span> <span class="mi">9</span>
<span class="mi">3</span><span class="n">번째</span> <span class="nv">게임</span> <span class="p">:</span> <span class="n">시도</span> <span class="n">횟수</span> <span class="o">-</span> <span class="mi">12</span>
<span class="o">.</span>
<span class="o">.</span>
<span class="o">.</span>
</code></pre></div></div>

<h1 id="lv6-문제">Lv6 문제</h1>
<ul>
  <li>3번 종료하기의 경우 프로그램이 종료됩니다</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 예시</span>
<span class="n">환영합니다</span><span class="o">!</span> <span class="n">원하시는</span> <span class="n">번호를</span> <span class="n">입력해주세요</span>
<span class="mi">1</span><span class="o">.</span> <span class="n">게임</span> <span class="n">시작하기</span>  <span class="mi">2</span><span class="o">.</span> <span class="n">게임</span> <span class="n">기록</span> <span class="n">보기</span>  <span class="mi">3</span><span class="o">.</span> <span class="n">종료하기</span>
<span class="mi">3</span> <span class="c1">// 3번 종료하기 입력</span>

<span class="o">&lt;</span> <span class="n">숫자</span> <span class="n">야구</span> <span class="n">게임을</span> <span class="n">종료합니다</span> <span class="o">&gt;</span>
</code></pre></div></div>

<ul>
  <li>1, 2, 3 이외의 입력값에 대해서는 오류 메시지를 보여주세요</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 예시</span>
<span class="n">환영합니다</span><span class="o">!</span> <span class="n">원하시는</span> <span class="n">번호를</span> <span class="n">입력해주세요</span>
<span class="mi">1</span><span class="o">.</span> <span class="n">게임</span> <span class="n">시작하기</span>  <span class="mi">2</span><span class="o">.</span> <span class="n">게임</span> <span class="n">기록</span> <span class="n">보기</span>  <span class="mi">3</span><span class="o">.</span> <span class="n">종료하기</span>
<span class="mi">4</span>

<span class="n">올바른</span> <span class="n">숫자를</span> <span class="n">입력해주세요</span><span class="o">!</span>
</code></pre></div></div>

<p><br /></p>

<h1 id="제출-코드">제출 코드</h1>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">Foundation</span>
<span class="kd">class</span> <span class="kt">BaseballGame</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">comNum</span><span class="p">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="s">""</span> <span class="c1">//컴퓨터 랜덤 값</span>
    <span class="k">var</span> <span class="nv">strike</span><span class="p">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">0</span>     <span class="c1">//스트라이크 개수</span>
    <span class="k">var</span> <span class="nv">ball</span><span class="p">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">0</span>       <span class="c1">//볼 개수</span>
    <span class="k">var</span> <span class="nv">flag</span><span class="p">:</span> <span class="kt">Bool</span> <span class="o">=</span> <span class="kc">false</span>  <span class="c1">//게임 정답 유무 확인</span>
    
    <span class="k">var</span> <span class="nv">inputCnt</span><span class="p">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">0</span>   <span class="c1">//입력횟수</span>
    
    <span class="nf">init</span><span class="p">()</span> <span class="p">{</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">"&lt; 게임을 시작합니다. &gt;"</span><span class="p">)</span>
        <span class="k">self</span><span class="o">.</span><span class="n">comNum</span> <span class="o">=</span> <span class="nf">randomNum</span><span class="p">()</span>   <span class="c1">//컴퓨터 기본 값 셋팅</span>
    <span class="p">}</span>
    
    <span class="c1">//컴퓨터 초기 값 셋팅</span>
    <span class="kd">func</span> <span class="nf">randomNum</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">String</span> <span class="p">{</span>
        <span class="k">var</span> <span class="nv">index</span><span class="p">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">var</span> <span class="nv">ranNum</span><span class="p">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="s">""</span>
        <span class="k">var</span> <span class="nv">arr</span><span class="p">:</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="o">=</span> <span class="kt">Array</span><span class="p">(</span><span class="mi">0</span><span class="o">...</span><span class="mi">9</span><span class="p">)</span>
        
        <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span><span class="o">...</span><span class="mi">2</span> <span class="p">{</span>
            <span class="k">repeat</span> <span class="p">{</span>
                <span class="n">index</span> <span class="o">=</span> <span class="kt">Int</span><span class="o">.</span><span class="nf">random</span><span class="p">(</span><span class="nv">in</span><span class="p">:</span> <span class="mi">0</span><span class="o">...</span><span class="n">arr</span><span class="o">.</span><span class="n">count</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
            <span class="p">}</span> <span class="k">while</span><span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">index</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="c1">//index가 0(첫번째 숫자가 0)이면 다른 숫자가 나올때까지 반복</span>
            <span class="n">ranNum</span> <span class="o">+=</span> <span class="kt">String</span><span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="n">index</span><span class="p">])</span>
            <span class="n">arr</span><span class="o">.</span><span class="nf">remove</span><span class="p">(</span><span class="nv">at</span><span class="p">:</span> <span class="n">index</span><span class="p">)</span>
        <span class="p">}</span>
        
        <span class="k">return</span> <span class="n">ranNum</span>
    <span class="p">}</span>
    
    <span class="c1">//입력 값 받아오기</span>
    <span class="kd">func</span> <span class="nf">inputData</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">String</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="n">inputCnt</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">"-------------------------------"</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">"숫자를 입력하세요"</span><span class="p">)</span>
        <span class="k">if</span> <span class="k">let</span> <span class="nv">inputData</span> <span class="o">=</span> <span class="nf">readLine</span><span class="p">()</span> <span class="p">{</span>
            <span class="k">return</span> <span class="n">inputData</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">return</span> <span class="s">""</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="c1">//데이터 체크</span>
    <span class="kd">func</span> <span class="nf">inputDataValidation</span><span class="p">(</span><span class="n">_</span> <span class="nv">inputData</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Bool</span> <span class="p">{</span>
        <span class="k">if</span> <span class="n">inputData</span><span class="o">.</span><span class="n">count</span> <span class="o">!=</span> <span class="mi">3</span> <span class="p">{</span>
            <span class="nf">print</span><span class="p">(</span><span class="s">"올바르지 않은 입력값입니다. (3자리 입력)"</span><span class="p">)</span>
            <span class="k">return</span> <span class="kc">false</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="c1">//숫자/문자 체크</span>
            <span class="k">if</span> <span class="k">let</span> <span class="nv">number</span> <span class="o">=</span> <span class="kt">Int</span><span class="p">(</span><span class="n">inputData</span><span class="p">)</span> <span class="p">{</span>
                <span class="c1">//숫자 중복값 체크</span>
                <span class="k">if</span> <span class="kt">Set</span><span class="p">(</span><span class="kt">String</span><span class="p">(</span><span class="n">number</span><span class="p">))</span><span class="o">.</span><span class="n">count</span> <span class="o">==</span> <span class="mi">3</span> <span class="p">{</span>
                    <span class="k">return</span> <span class="kc">true</span>
                <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                    <span class="nf">print</span><span class="p">(</span><span class="s">"올바르지 않은 입력값입니다. (중복 값)"</span><span class="p">)</span>
                    <span class="k">return</span> <span class="kc">false</span>
                <span class="p">}</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="nf">print</span><span class="p">(</span><span class="s">"올바르지 않은 입력값입니다. (문자 포함)"</span><span class="p">)</span>
                <span class="k">return</span> <span class="kc">false</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="kd">func</span> <span class="nf">gameStart</span><span class="p">(</span><span class="n">_</span> <span class="nv">myNum</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">//print("내입력값: \(myNum), 컴터입력값: \(comNum)")</span>
        <span class="k">let</span> <span class="nv">myNumArr</span><span class="p">:</span> <span class="p">[</span><span class="kt">String</span><span class="p">]</span> <span class="o">=</span> <span class="n">myNum</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="kt">String</span><span class="p">(</span><span class="nv">$0</span><span class="p">)</span> <span class="p">}</span>
        <span class="k">let</span> <span class="nv">comNumArr</span><span class="p">:</span> <span class="p">[</span><span class="kt">String</span><span class="p">]</span> <span class="o">=</span> <span class="n">comNum</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="kt">String</span><span class="p">(</span><span class="nv">$0</span><span class="p">)</span> <span class="p">}</span>

        <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span><span class="o">...</span><span class="n">myNumArr</span><span class="o">.</span><span class="n">count</span> <span class="o">-</span> <span class="mi">1</span> <span class="p">{</span>
            <span class="c1">//숫자가 일치하면 스트라이크</span>
            <span class="k">for</span> <span class="n">j</span> <span class="k">in</span> <span class="mi">0</span><span class="o">...</span><span class="n">myNumArr</span><span class="o">.</span><span class="n">count</span> <span class="o">-</span> <span class="mi">1</span> <span class="p">{</span>
                <span class="c1">//print("i: \(i), j: \(j), comNumArr[\(i)]: \(comNumArr[i]), myNumArr[\(j)]: \(myNumArr[j])")</span>

                <span class="c1">//index와 값이 일치하면 스트라이크</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="n">j</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">comNumArr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">myNumArr</span><span class="p">[</span><span class="n">j</span><span class="p">])</span> <span class="p">{</span>
                    <span class="n">strike</span> <span class="o">+=</span> <span class="mi">1</span>
                    <span class="c1">//값이 일치하지만 index가 다르면 ball</span>
                <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">!=</span> <span class="n">j</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">comNumArr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">myNumArr</span><span class="p">[</span><span class="n">j</span><span class="p">])</span> <span class="p">{</span>
                    <span class="n">ball</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="c1">//결과 확인</span>
    <span class="kd">func</span> <span class="nf">gameResult</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">Bool</span> <span class="p">{</span>
        <span class="k">if</span> <span class="n">strike</span> <span class="o">==</span> <span class="mi">3</span> <span class="p">{</span>
            <span class="nf">print</span><span class="p">(</span><span class="s">"정답입니다!!!!!!!!!!!!!!!!!!!!!!!!"</span><span class="p">)</span>
            <span class="nf">print</span><span class="p">(</span><span class="s">"-------------------------------"</span><span class="p">)</span>
            <span class="k">return</span> <span class="kc">true</span>
        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="n">strike</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">ball</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
            <span class="nf">print</span><span class="p">(</span><span class="s">"Nothing"</span><span class="p">)</span>
            <span class="k">return</span> <span class="kc">false</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="nf">print</span><span class="p">(</span><span class="s">"</span><span class="se">\(</span><span class="k">self</span><span class="o">.</span><span class="n">strike</span><span class="se">)</span><span class="s"> 스트라이크, </span><span class="se">\(</span><span class="k">self</span><span class="o">.</span><span class="n">ball</span><span class="se">)</span><span class="s"> 볼"</span><span class="p">)</span>
            <span class="k">return</span> <span class="kc">false</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="kd">func</span> <span class="nf">recordClear</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="n">strike</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">self</span><span class="o">.</span><span class="n">ball</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="kt">GameRecord</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">gameRecordDictionary</span> <span class="o">=</span> <span class="p">[</span><span class="kt">Int</span><span class="p">:</span><span class="kt">Int</span><span class="p">]()</span>
<span class="p">}</span>

<span class="c1">//게임 횟수 저장</span>
<span class="k">let</span> <span class="nv">gameRecord</span><span class="p">:</span> <span class="kt">GameRecord</span> <span class="o">=</span> <span class="kt">GameRecord</span><span class="p">()</span>

<span class="k">while</span> <span class="kc">true</span> <span class="p">{</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"환영합니다! 원하시는 번호를 입력해주세요."</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"1. 게임 시작하기 2. 게임 기록 보기 3. 종료하기"</span><span class="p">)</span>
    <span class="k">if</span> <span class="k">let</span> <span class="nv">inputData</span> <span class="o">=</span> <span class="nf">readLine</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">if</span> <span class="k">let</span> <span class="nv">number</span> <span class="o">=</span> <span class="kt">Int</span><span class="p">(</span><span class="n">inputData</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">switch</span> <span class="n">number</span> <span class="p">{</span>
            <span class="k">case</span> <span class="mi">1</span><span class="p">:</span>
                <span class="c1">//컴퓨터 숫자 초기화</span>
                <span class="k">let</span> <span class="nv">baseballGame</span><span class="p">:</span> <span class="kt">BaseballGame</span> <span class="o">=</span> <span class="kt">BaseballGame</span><span class="p">()</span>
                
                <span class="c1">//print("컴터 선택 값: \(baseballGame.num)")</span>
                <span class="k">repeat</span> <span class="p">{</span>
                    <span class="k">let</span> <span class="nv">myNum</span> <span class="o">=</span> <span class="n">baseballGame</span><span class="o">.</span><span class="nf">inputData</span><span class="p">()</span> <span class="c1">//내 입력 숫자</span>
                
                    <span class="c1">//입력값 체크</span>
                    <span class="k">if</span> <span class="n">baseballGame</span><span class="o">.</span><span class="nf">inputDataValidation</span><span class="p">(</span><span class="n">myNum</span><span class="p">)</span> <span class="p">{</span>
                        <span class="c1">//게임 시작</span>
                        <span class="n">baseballGame</span><span class="o">.</span><span class="nf">gameStart</span><span class="p">(</span><span class="n">myNum</span><span class="p">)</span>
                        <span class="c1">//결과보기</span>
                        <span class="n">baseballGame</span><span class="o">.</span><span class="n">flag</span> <span class="o">=</span> <span class="n">baseballGame</span><span class="o">.</span><span class="nf">gameResult</span><span class="p">()</span>
                        
                        <span class="k">if</span> <span class="n">baseballGame</span><span class="o">.</span><span class="n">flag</span> <span class="p">{</span>
                            <span class="c1">//정답시 게임 기록</span>
                            <span class="k">if</span> <span class="n">gameRecord</span><span class="o">.</span><span class="n">gameRecordDictionary</span><span class="o">.</span><span class="n">keys</span><span class="o">.</span><span class="n">isEmpty</span> <span class="p">{</span>
                                <span class="n">gameRecord</span><span class="o">.</span><span class="n">gameRecordDictionary</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">baseballGame</span><span class="o">.</span><span class="n">inputCnt</span>
                            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                                <span class="n">gameRecord</span><span class="o">.</span><span class="n">gameRecordDictionary</span><span class="p">[</span><span class="n">gameRecord</span><span class="o">.</span><span class="n">gameRecordDictionary</span><span class="o">.</span><span class="n">keys</span><span class="o">.</span><span class="nf">max</span><span class="p">()</span><span class="o">!</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">baseballGame</span><span class="o">.</span><span class="n">inputCnt</span>
                            <span class="p">}</span>
                            <span class="n">baseballGame</span><span class="o">.</span><span class="n">inputCnt</span> <span class="o">=</span> <span class="mi">0</span>   <span class="c1">//입력 횟수 초기화</span>
                        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                            <span class="c1">//오답 시 초기화</span>
                            <span class="n">baseballGame</span><span class="o">.</span><span class="nf">recordClear</span><span class="p">()</span>
                        <span class="p">}</span>
                    <span class="p">}</span>
                <span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="n">baseballGame</span><span class="o">.</span><span class="n">flag</span> <span class="o">!=</span> <span class="kc">true</span><span class="p">)</span> <span class="c1">//true가 될때까지 반복</span>
                
                <span class="k">break</span>
            <span class="k">case</span> <span class="mi">2</span><span class="p">:</span>
                <span class="nf">print</span><span class="p">(</span><span class="s">"----------------------------------"</span><span class="p">)</span>
                <span class="nf">print</span><span class="p">(</span><span class="s">"게임 기록 보기"</span><span class="p">)</span>
                <span class="k">if</span><span class="p">(</span><span class="n">gameRecord</span><span class="o">.</span><span class="n">gameRecordDictionary</span><span class="o">.</span><span class="n">count</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
                    <span class="nf">print</span><span class="p">(</span><span class="s">"진행한 게임이 없습니다."</span><span class="p">)</span>
                <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                    <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="n">gameRecord</span><span class="o">.</span><span class="n">gameRecordDictionary</span><span class="o">.</span><span class="n">keys</span><span class="o">.</span><span class="nf">sorted</span><span class="p">()</span> <span class="p">{</span>
                        <span class="nf">print</span><span class="p">(</span><span class="s">"</span><span class="se">\(</span><span class="n">i</span><span class="se">)</span><span class="s">번째 게임 : 시도 횟수 - </span><span class="se">\(</span><span class="n">gameRecord</span><span class="o">.</span><span class="n">gameRecordDictionary</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">!</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
                    <span class="p">}</span>
                <span class="p">}</span>
                <span class="nf">print</span><span class="p">(</span><span class="s">"----------------------------------"</span><span class="p">)</span>
                <span class="k">break</span>
            <span class="k">case</span> <span class="mi">3</span><span class="p">:</span>
                <span class="nf">print</span><span class="p">(</span><span class="s">"&lt;숫자 야구 게임을 종료합니다.&gt;"</span><span class="p">)</span>
                <span class="nf">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
            <span class="k">default</span><span class="p">:</span>
                <span class="nf">print</span><span class="p">(</span><span class="s">"올바른 숫자를 입력해주세요!"</span><span class="p">)</span>
            <span class="p">}</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="nf">print</span><span class="p">(</span><span class="s">"올바른 숫자를 입력해주세요!"</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>]]></content><author><name>HyeongSub Lim</name></author><category term="sparta" /><category term="야구게임" /><summary type="html"><![CDATA[3주차 개인과제 - 야구게임]]></summary></entry><entry><title type="html">[TIL] 내배캠 iOS앱 개발 공부 14일차</title><link href="http://localhost:4000/TIL/til14/" rel="alternate" type="text/html" title="[TIL] 내배캠 iOS앱 개발 공부 14일차" /><published>2024-03-15T00:00:00+09:00</published><updated>2024-03-15T00:00:00+09:00</updated><id>http://localhost:4000/TIL/til14</id><content type="html" xml:base="http://localhost:4000/TIL/til14/"><![CDATA[<h3 id="데일리-스크럼">데일리 스크럼</h3>
<p><img src="/assets/images/categories/til/2024-03-15-til14.png" alt="" /></p>

<h3 id="개인과제">개인과제</h3>
<p>맑은 정신으로 오전에 후다닥 과제를 마무리했다. 하루를 시작하는 오전에 집중이 가장 잘되는 느낌! 우선 레벨 6번까지 완성하고 제출하고 이후 공개된 해설 영상을 보았다. 랜덤 숫자를 뽑아내는 과정에서 shuffle을 사용할 수 있다는 것과 배열의 Index를 뽑아내기 위해서 항상 for문을 사용했는데 enumerated를 사용하면 인덱스와 값을 함께 출력할 수 있다는 것을 알았다!</p>

<h3 id="알고리즘">알고리즘</h3>
<p>오늘은 개인과제와 해설 강의를 확인한다고 알고리즘 문제를 깜빡했다. 주말에 몇개 풀어야겠다.</p>

<h3 id="내배캠-지금까지">내배캠 지금까지</h3>
<p>온보딩 1주, 문법강의 2주, 3주가 너무 빨리 흘렀다. 집중력을 잃을때 쯤 zep에서 공부중인 팀원들과 사람들, slack에 올라오는 각종 질문들로 정신을 차릴 수 있었다. 취업해서 서울로 갈때까지 파이팅 해야겠다 🔥</p>

<h3 id="다음주">다음주?</h3>
<p>본격적으로 UIKit으로 앱 만들기 강의가 시작 되는데 각종 버튼, 컨트롤 등 추가해보는 과정이 문법 강의보다 더 재미있을 것 같아 기대된다.</p>]]></content><author><name>HyeongSub Lim</name></author><category term="TIL" /><category term="TIL" /><summary type="html"><![CDATA[내배캠 iOS앱 개발 공부 14일차 이야기]]></summary></entry><entry><title type="html">[TIL] 내배캠 iOS앱 개발 공부 13일차</title><link href="http://localhost:4000/TIL/til13/" rel="alternate" type="text/html" title="[TIL] 내배캠 iOS앱 개발 공부 13일차" /><published>2024-03-14T00:00:00+09:00</published><updated>2024-03-14T00:00:00+09:00</updated><id>http://localhost:4000/TIL/til13</id><content type="html" xml:base="http://localhost:4000/TIL/til13/"><![CDATA[<h3 id="데일리-스크럼">데일리 스크럼</h3>
<p><img src="/assets/images/categories/til/2024-03-14-til13.png" alt="" /></p>

<h3 id="알고리즘">알고리즘</h3>
<p>어제 풀지 못했던 알고리즘 시저 암호 문제를 오전에 해결했다! 자고 일어났더니 문제가 풀린 기분, 원인은 내가 먼저 알파벳을 이동 시키고 알파벳 범위를 넘어가면 다시 a부터 시작하도록 -26을 빼줬는데 이동을 많이 시키는 경우 대문자가 소문자로 변경되어 다시 A부터 시작해야하는데 정상범위라고 판단하여 발생한 문제였다.</p>

<h3 id="개인과제">개인과제</h3>
<p>내일 정오까지 과제 제출해야하는데 아직 1번밖에 풀지 못했다. 
클래스, 함수, 반복문 어떻게 하면 잘 활용할 수 있을까 고민했는데 시간이 너무 많이 지났다. 내일 오전까지 우선 완성은 시켜놓고 조금씩 코드 리펙토링을 진행해야겠다.</p>

<h3 id="내일은">내일은?</h3>
<p>다음주 부터는 UIKit으로 앱 만들기 강의가 시작 되는데 개인 2주간의 문법강의를 마무리하면서 복습하는 시간을 가져야겠다.</p>]]></content><author><name>HyeongSub Lim</name></author><category term="TIL" /><category term="TIL" /><summary type="html"><![CDATA[내배캠 iOS앱 개발 공부 13일차 이야기]]></summary></entry><entry><title type="html">[프로그래머스/Swift] 숫자 문자열과 영단어</title><link href="http://localhost:4000/algorithm/%EC%88%AB%EC%9E%90%EB%AC%B8%EC%9E%90%EC%97%B4%EA%B3%BC%EC%98%81%EB%8B%A8%EC%96%B4/" rel="alternate" type="text/html" title="[프로그래머스/Swift] 숫자 문자열과 영단어" /><published>2024-03-14T00:00:00+09:00</published><updated>2024-03-14T00:00:00+09:00</updated><id>http://localhost:4000/algorithm/%EC%88%AB%EC%9E%90%EB%AC%B8%EC%9E%90%EC%97%B4%EA%B3%BC%EC%98%81%EB%8B%A8%EC%96%B4</id><content type="html" xml:base="http://localhost:4000/algorithm/%EC%88%AB%EC%9E%90%EB%AC%B8%EC%9E%90%EC%97%B4%EA%B3%BC%EC%98%81%EB%8B%A8%EC%96%B4/"><![CDATA[<h1 id="문제-설명">문제 설명</h1>
<ul>
  <li>
    <p>네오와 프로도가 숫자놀이를 하고 있습니다. 네오가 프로도에게 숫자를 건넬 때 일부 자릿수를 영단어로 바꾼 카드를 건네주면 프로도는 원래 숫자를 찾는 게임입니다.</p>
  </li>
  <li>다음은 숫자의 일부 자릿수를 영단어로 바꾸는 예시입니다.
    <ul>
      <li>1478 → “one4seveneight”</li>
      <li>234567 → “23four5six7”</li>
      <li>10203 → “1zerotwozero3”</li>
    </ul>
  </li>
  <li>이렇게 숫자의 일부 자릿수가 영단어로 바뀌어졌거나, 혹은 바뀌지 않고 그대로인 문자열 s가 매개변수로 주어집니다. s가 의미하는 원래 숫자를 return 하도록 solution 함수를 완성해주세요.</li>
  <li>참고로 각 숫자에 대응되는 영단어는 다음 표와 같습니다.</li>
</ul>

<table>
  <thead>
    <tr>
      <th>숫자</th>
      <th>영단어</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>zero</td>
    </tr>
    <tr>
      <td>1</td>
      <td>one</td>
    </tr>
    <tr>
      <td>2</td>
      <td>two</td>
    </tr>
    <tr>
      <td>3</td>
      <td>three</td>
    </tr>
    <tr>
      <td>4</td>
      <td>four</td>
    </tr>
    <tr>
      <td>5</td>
      <td>five</td>
    </tr>
    <tr>
      <td>6</td>
      <td>six</td>
    </tr>
    <tr>
      <td>7</td>
      <td>seven</td>
    </tr>
    <tr>
      <td>8</td>
      <td>eight</td>
    </tr>
    <tr>
      <td>9</td>
      <td>nine</td>
    </tr>
  </tbody>
</table>

<ul>
  <li><a href="https://school.programmers.co.kr/learn/courses/30/lessons/81301" target="_blank">문제 풀기</a></li>
</ul>

<h1 id="제한사항">제한사항</h1>
<ul>
  <li>1 ≤ s의 길이 ≤ 50</li>
  <li>s가 “zero” 또는 “0”으로 시작하는 경우는 주어지지 않습니다.</li>
  <li>return 값이 1 이상 2,000,000,000 이하의 정수가 되는 올바른 입력만 s로 주어집니다.</li>
</ul>

<h1 id="입출력-예">입출력 예</h1>

<table>
  <thead>
    <tr>
      <th>s</th>
      <th>result</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>“one4seveneight”</td>
      <td>1478</td>
    </tr>
    <tr>
      <td>“23four5six7”</td>
      <td>234567</td>
    </tr>
    <tr>
      <td>“2three45sixseven”</td>
      <td>234567</td>
    </tr>
    <tr>
      <td>“123”</td>
      <td>123</td>
    </tr>
  </tbody>
</table>

<h2 id="입출력-예-1">입출력 예 #1</h2>
<ul>
  <li>문제 예시와 같습니다.</li>
</ul>

<h2 id="입출력-예-2">입출력 예 #2</h2>
<ul>
  <li>문제 예시와 같습니다.</li>
</ul>

<h2 id="입출력-예-3">입출력 예 #3</h2>
<ul>
  <li>“three”는 3, “six”는 6, “seven”은 7에 대응되기 때문에 정답은 입출력 예 #2와 같은 234567이 됩니다.</li>
  <li>입출력 예 #2와 #3과 같이 같은 정답을 가리키는 문자열이 여러 가지가 나올 수 있습니다.</li>
</ul>

<h1 id="나의-풀이">나의 풀이</h1>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">Foundation</span>

<span class="kd">func</span> <span class="nf">solution</span><span class="p">(</span><span class="n">_</span> <span class="nv">s</span><span class="p">:</span><span class="kt">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">numDictionary</span><span class="p">:</span> <span class="p">[</span><span class="kt">String</span><span class="p">:</span><span class="kt">Int</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="s">"zero"</span><span class="p">:</span><span class="mi">0</span><span class="p">,</span><span class="s">"one"</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span><span class="s">"two"</span><span class="p">:</span><span class="mi">2</span><span class="p">,</span><span class="s">"three"</span><span class="p">:</span><span class="mi">3</span><span class="p">,</span><span class="s">"four"</span><span class="p">:</span><span class="mi">4</span><span class="p">,</span><span class="s">"five"</span><span class="p">:</span><span class="mi">5</span><span class="p">,</span><span class="s">"six"</span><span class="p">:</span><span class="mi">6</span><span class="p">,</span><span class="s">"seven"</span><span class="p">:</span><span class="mi">7</span><span class="p">,</span><span class="s">"eight"</span><span class="p">:</span><span class="mi">8</span><span class="p">,</span><span class="s">"nine"</span><span class="p">:</span><span class="mi">9</span><span class="p">]</span>
    
    <span class="k">var</span> <span class="nv">temp</span><span class="p">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="s">""</span>
    <span class="k">var</span> <span class="nv">num</span><span class="p">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="s">""</span>
    
    <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="n">s</span> <span class="p">{</span>
        <span class="n">temp</span> <span class="o">+=</span> <span class="kt">String</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">j</span> <span class="k">in</span> <span class="n">numDictionary</span> <span class="p">{</span>
            <span class="c1">//키에 해당하는 값 찾기</span>
            <span class="k">if</span> <span class="n">j</span><span class="o">.</span><span class="n">key</span> <span class="o">==</span> <span class="n">temp</span> <span class="p">{</span>
                <span class="c1">//print("temp: \(temp), temp 초기화")</span>
                <span class="c1">//print("값: \(j.value)")</span>
                <span class="n">num</span> <span class="o">+=</span> <span class="kt">String</span><span class="p">(</span><span class="n">j</span><span class="o">.</span><span class="n">value</span><span class="p">)</span>
                <span class="n">temp</span> <span class="o">=</span> <span class="s">""</span>
            <span class="c1">//값이면 값 출력</span>
            <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="kt">String</span><span class="p">(</span><span class="n">j</span><span class="o">.</span><span class="n">value</span><span class="p">)</span> <span class="o">==</span> <span class="n">temp</span> <span class="p">{</span>
                <span class="c1">//print(j.value)</span>
                <span class="n">num</span> <span class="o">+=</span> <span class="kt">String</span><span class="p">(</span><span class="n">j</span><span class="o">.</span><span class="n">value</span><span class="p">)</span>
                <span class="n">temp</span> <span class="o">=</span> <span class="s">""</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="kt">Int</span><span class="p">(</span><span class="n">num</span><span class="p">)</span><span class="o">!</span>
<span class="p">}</span>
</code></pre></div></div>
<h1 id="다른-사람-풀이">다른 사람 풀이</h1>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">Foundation</span>

<span class="kd">func</span> <span class="nf">solution</span><span class="p">(</span><span class="n">_</span> <span class="nv">s</span><span class="p">:</span><span class="kt">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">arr</span> <span class="o">=</span> <span class="p">[</span><span class="s">"zero"</span><span class="p">,</span><span class="s">"one"</span><span class="p">,</span><span class="s">"two"</span><span class="p">,</span><span class="s">"three"</span><span class="p">,</span><span class="s">"four"</span><span class="p">,</span><span class="s">"five"</span><span class="p">,</span><span class="s">"six"</span><span class="p">,</span><span class="s">"seven"</span><span class="p">,</span><span class="s">"eight"</span><span class="p">,</span><span class="s">"nine"</span><span class="p">]</span>
    <span class="k">var</span> <span class="nv">str</span> <span class="o">=</span> <span class="n">s</span>
    <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span><span class="o">..&lt;</span><span class="n">arr</span><span class="o">.</span><span class="n">count</span> <span class="p">{</span>
        <span class="n">str</span> <span class="o">=</span> <span class="n">str</span><span class="o">.</span><span class="nf">replacingOccurrences</span><span class="p">(</span><span class="nv">of</span><span class="p">:</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="nv">with</span><span class="p">:</span> <span class="kt">String</span><span class="p">(</span><span class="n">i</span><span class="p">))</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="kt">Int</span><span class="p">(</span><span class="n">str</span><span class="p">)</span><span class="o">!</span>
<span class="p">}</span>
</code></pre></div></div>

<h1 id="의견">의견</h1>
<ul>
  <li>문제설명을 보고 딕셔너리로 찾을 수 있겠구나 생각하고 생각보다 쉽게 풀었다. 다른 사람의 풀이를 보니 문자열 배열을 만들고 index로 숫자 값을 줄 수도 있다는걸 깨닳음 ㅠ 플레이 그라운드에서 한번 해보고 답 입력하는데 아직 플레이그라운드 없이 풀긴 어렵네</li>
  <li>replacingOccurrences 가 있다는 걸 알았다.
    <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">replacingOccurrences</span><span class="p">(</span><span class="n">of</span> <span class="nv">target</span><span class="p">:</span> <span class="kt">String</span><span class="p">,</span> <span class="n">with</span> <span class="nv">replacement</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">String</span>
<span class="c1">//여기서 target은 대체하고자 하는 문자열이나 패턴을 의미하며, replacement은 target을 대체할 문자열</span>
<span class="k">let</span> <span class="nv">originalString</span> <span class="o">=</span> <span class="s">"Hello, World!"</span>
<span class="k">let</span> <span class="nv">modifiedString</span> <span class="o">=</span> <span class="n">originalString</span><span class="o">.</span><span class="nf">replacingOccurrences</span><span class="p">(</span><span class="nv">of</span><span class="p">:</span> <span class="s">"World"</span><span class="p">,</span> <span class="nv">with</span><span class="p">:</span> <span class="s">"Swift"</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">modifiedString</span><span class="p">)</span> <span class="c1">// 출력: "Hello, Swift!"</span>
</code></pre></div>    </div>
  </li>
</ul>]]></content><author><name>HyeongSub Lim</name></author><category term="Algorithm" /><category term="Algorithm" /><category term="coding test" /><category term="숫자 문자열과 영단어" /><summary type="html"><![CDATA[[프로그래머스/Swift] 숫자 문자열과 영단어]]></summary></entry><entry><title type="html">[TIL] 내배캠 iOS앱 개발 공부 12일차</title><link href="http://localhost:4000/TIL/til12/" rel="alternate" type="text/html" title="[TIL] 내배캠 iOS앱 개발 공부 12일차" /><published>2024-03-13T00:00:00+09:00</published><updated>2024-03-13T00:00:00+09:00</updated><id>http://localhost:4000/TIL/til12</id><content type="html" xml:base="http://localhost:4000/TIL/til12/"><![CDATA[<h3 id="데일리-스크럼">데일리 스크럼</h3>
<p><img src="/assets/images/categories/til/2024-03-13-til12.png" alt="" /></p>

<h3 id="알고리즘">알고리즘</h3>
<p>오늘의 오전 알고리즘은 시간이 꽤 오래걸렸는데 아직 제출하지 못했다. 문자를 아스키 코드로 변환하는 방법이 swift에서 낯설어 문법을 찾아서 해결했다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="nv">str</span><span class="p">:</span> <span class="kt">Character</span> <span class="o">=</span> <span class="s">"a"</span>

<span class="c1">//문자를 아스키 코드로 변환</span>
<span class="n">str</span><span class="o">.</span><span class="n">asciiValue</span><span class="o">!</span> <span class="c1">//출력: 97 </span>

<span class="c1">//아스키 코드에 1을 더하고 아스키 코드를 문자로 변환</span>
<span class="kt">Character</span><span class="p">(</span><span class="kt">UnicodeScalar</span><span class="p">(</span><span class="n">str</span><span class="o">.</span><span class="n">asciiValue</span><span class="o">!</span> <span class="o">+</span> <span class="mi">1</span><span class="p">))</span> <span class="c1">//출력: b </span>
</code></pre></div></div>

<p>문제 풀고 적용했는데 중간에 실패가 계속 떴다 ㅠ 강의듣고 과제해야하니까 우선 저녁에 다시 해보는걸로 .. 
<img src="/assets/images/categories/til/2024-03-13-til12-2.png" alt="" /></p>

<h3 id="심화-강의">심화 강의</h3>
<p>심화 강의는 완강 했으나 한 파트를 10분에 끝내니 한번에 숙지 못하는건 어쩌면 당연한걸까? 과제하고 다시 보는걸로!</p>

<h3 id="내일은">내일은?</h3>
<p>오늘은 개인과제 1번을 제출했는데 내일도 과제를 우선 풀고 남은 내용은 블로그 작성하기</p>]]></content><author><name>HyeongSub Lim</name></author><category term="TIL" /><category term="TIL" /><summary type="html"><![CDATA[내배캠 iOS앱 개발 공부 12일차 이야기]]></summary></entry><entry><title type="html">[프로그래머스/Swift] 시저 암호</title><link href="http://localhost:4000/algorithm/%EC%8B%9C%EC%A0%80-%EC%95%94%ED%98%B8/" rel="alternate" type="text/html" title="[프로그래머스/Swift] 시저 암호" /><published>2024-03-13T00:00:00+09:00</published><updated>2024-03-13T00:00:00+09:00</updated><id>http://localhost:4000/algorithm/%EC%8B%9C%EC%A0%80%20%EC%95%94%ED%98%B8</id><content type="html" xml:base="http://localhost:4000/algorithm/%EC%8B%9C%EC%A0%80-%EC%95%94%ED%98%B8/"><![CDATA[<h1 id="문제-설명">문제 설명</h1>
<ul>
  <li>
    <p>어떤 문장의 각 알파벳을 일정한 거리만큼 밀어서 다른 알파벳으로 바꾸는 암호화 방식을 시저 암호라고 합니다. 예를 들어 “AB”는 1만큼 밀면 “BC”가 되고, 3만큼 밀면 “DE”가 됩니다. “z”는 1만큼 밀면 “a”가 됩니다. 문자열 s와 거리 n을 입력받아 s를 n만큼 민 암호문을 만드는 함수, solution을 완성해 보세요.</p>
  </li>
  <li>
    <p><a href="https://school.programmers.co.kr/learn/courses/30/lessons/12926" target="_blank">문제 풀기</a></p>
  </li>
</ul>

<h1 id="제한사항">제한사항</h1>
<ul>
  <li>공백은 아무리 밀어도 공백입니다.</li>
  <li>s는 알파벳 소문자, 대문자, 공백으로만 이루어져 있습니다.</li>
  <li>s의 길이는 8000이하입니다.</li>
  <li>n은 1 이상, 25이하인 자연수입니다.</li>
</ul>

<h1 id="입출력-예">입출력 예</h1>

<table>
  <thead>
    <tr>
      <th>s</th>
      <th>n</th>
      <th>result</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>“AB”</td>
      <td>1</td>
      <td>“BC”</td>
    </tr>
    <tr>
      <td>“z”</td>
      <td>1</td>
      <td>“a”</td>
    </tr>
    <tr>
      <td>“a B z”</td>
      <td>4</td>
      <td>“e F d”</td>
    </tr>
  </tbody>
</table>

<h2 id="입출력-예-1">입출력 예 #1</h2>
<ul>
  <li>문제 예시와 같습니다.</li>
</ul>

<h1 id="나의-풀이">나의 풀이</h1>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">Foundation</span>

<span class="kd">func</span> <span class="nf">solution</span><span class="p">(</span><span class="n">_</span> <span class="nv">s</span><span class="p">:</span><span class="kt">String</span><span class="p">,</span> <span class="n">_</span> <span class="nv">n</span><span class="p">:</span><span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">String</span> <span class="p">{</span>  
    <span class="k">let</span> <span class="nv">arr</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">item</span> <span class="k">in</span>
        <span class="k">if</span> <span class="n">item</span> <span class="o">==</span> <span class="s">" "</span> <span class="p">{</span>
            <span class="k">return</span> <span class="s">" "</span>
        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="n">item</span> <span class="o">&gt;=</span> <span class="s">"a"</span> <span class="o">&amp;&amp;</span> <span class="n">item</span> <span class="o">&lt;=</span> <span class="s">"z"</span> <span class="p">{</span>
            <span class="k">if</span> <span class="kt">String</span><span class="p">(</span><span class="kt">UnicodeScalar</span><span class="p">(</span><span class="n">item</span><span class="o">.</span><span class="n">asciiValue</span><span class="o">!</span> <span class="o">+</span> <span class="kt">UInt8</span><span class="p">(</span><span class="n">n</span><span class="p">)))</span> <span class="o">&gt;</span> <span class="s">"z"</span> <span class="p">{</span>
                <span class="k">return</span> <span class="kt">String</span><span class="p">(</span><span class="kt">UnicodeScalar</span><span class="p">(</span><span class="n">item</span><span class="o">.</span><span class="n">asciiValue</span><span class="o">!</span> <span class="o">+</span> <span class="kt">UInt8</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="o">-</span> <span class="mi">26</span><span class="p">))</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="k">return</span> <span class="kt">String</span><span class="p">(</span><span class="kt">UnicodeScalar</span><span class="p">(</span><span class="n">item</span><span class="o">.</span><span class="n">asciiValue</span><span class="o">!</span> <span class="o">+</span> <span class="kt">UInt8</span><span class="p">(</span><span class="n">n</span><span class="p">)))</span>
            <span class="p">}</span>
        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="n">item</span> <span class="o">&gt;=</span> <span class="s">"A"</span> <span class="o">&amp;&amp;</span> <span class="n">item</span> <span class="o">&lt;=</span> <span class="s">"Z"</span> <span class="p">{</span>
            <span class="k">if</span> <span class="kt">String</span><span class="p">(</span><span class="kt">UnicodeScalar</span><span class="p">(</span><span class="n">item</span><span class="o">.</span><span class="n">asciiValue</span><span class="o">!</span> <span class="o">+</span> <span class="kt">UInt8</span><span class="p">(</span><span class="n">n</span><span class="p">)))</span> <span class="o">&gt;</span> <span class="s">"Z"</span> <span class="p">{</span>
                <span class="k">return</span> <span class="kt">String</span><span class="p">(</span><span class="kt">UnicodeScalar</span><span class="p">(</span><span class="n">item</span><span class="o">.</span><span class="n">asciiValue</span><span class="o">!</span> <span class="o">+</span> <span class="kt">UInt8</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="o">-</span> <span class="mi">26</span><span class="p">))</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="k">return</span> <span class="kt">String</span><span class="p">(</span><span class="kt">UnicodeScalar</span><span class="p">(</span><span class="n">item</span><span class="o">.</span><span class="n">asciiValue</span><span class="o">!</span> <span class="o">+</span> <span class="kt">UInt8</span><span class="p">(</span><span class="n">n</span><span class="p">)))</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="s">""</span>
    <span class="p">}</span><span class="o">.</span><span class="nf">reduce</span><span class="p">(</span><span class="s">""</span><span class="p">)</span> <span class="p">{</span> <span class="nv">$0</span> <span class="o">+</span> <span class="nv">$1</span> <span class="p">}</span> 
    
    <span class="k">return</span> <span class="n">arr</span>
<span class="p">}</span>
</code></pre></div></div>
<h1 id="다른-사람-풀이">다른 사람 풀이</h1>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">solution</span><span class="p">(</span><span class="n">_</span> <span class="nv">s</span><span class="p">:</span><span class="kt">String</span><span class="p">,</span> <span class="n">_</span> <span class="nv">n</span><span class="p">:</span><span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">String</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">alphabets</span> <span class="o">=</span> <span class="s">"abcdefghijklmnopqrstuvwxyz"</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="nv">$0</span> <span class="p">}</span>
    <span class="k">return</span> <span class="kt">String</span><span class="p">(</span><span class="n">s</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span>
        <span class="k">guard</span> <span class="k">let</span> <span class="nv">index</span> <span class="o">=</span> <span class="n">alphabets</span><span class="o">.</span><span class="nf">firstIndex</span><span class="p">(</span><span class="nv">of</span><span class="p">:</span> <span class="kt">Character</span><span class="p">(</span><span class="nv">$0</span><span class="o">.</span><span class="nf">lowercased</span><span class="p">()))</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="nv">$0</span> <span class="p">}</span>
        <span class="k">let</span> <span class="nv">letter</span> <span class="o">=</span> <span class="n">alphabets</span><span class="p">[(</span><span class="n">index</span> <span class="o">+</span> <span class="n">n</span><span class="p">)</span> <span class="o">%</span> <span class="n">alphabets</span><span class="o">.</span><span class="n">count</span><span class="p">]</span>
        <span class="k">return</span> <span class="nv">$0</span><span class="o">.</span><span class="n">isUppercase</span> <span class="p">?</span> <span class="kt">Character</span><span class="p">(</span><span class="n">letter</span><span class="o">.</span><span class="nf">uppercased</span><span class="p">())</span> <span class="p">:</span> <span class="n">letter</span>
    <span class="p">})</span>
<span class="p">}</span>
</code></pre></div></div>

<h1 id="의견">의견</h1>
<ul>
  <li>최초 코드 작성 시 무조건 이동시키고 a-z / A-Z 범위인지 확인하고 범위를 넘으면 -26을 시켜주었다. 테스트 문제까지 이상없었고 답안 제출때 오답으로 나왔다. a-z 아스키코드는 97-122, A-Z는 65-90 대문자에서 이동을 많이시키면 a-z 소문자로 변경되어 -26이 안되는 문제를 확인하였다.</li>
  <li>좋아요 많이 받은 다른 사람 코드를 봤는데 역시 대단… 다양하게 생각하는 것이 어려운 것 같다.</li>
</ul>]]></content><author><name>HyeongSub Lim</name></author><category term="Algorithm" /><category term="Algorithm" /><category term="coding test" /><category term="시저 암호" /><summary type="html"><![CDATA[[프로그래머스/Swift] 시저 암호]]></summary></entry><entry><title type="html">[Swift] 아스키 코드</title><link href="http://localhost:4000/swift/%EC%95%84%EC%8A%A4%ED%82%A4%EC%BD%94%EB%93%9C/" rel="alternate" type="text/html" title="[Swift] 아스키 코드" /><published>2024-03-13T00:00:00+09:00</published><updated>2024-03-13T00:00:00+09:00</updated><id>http://localhost:4000/swift/%EC%95%84%EC%8A%A4%ED%82%A4%EC%BD%94%EB%93%9C</id><content type="html" xml:base="http://localhost:4000/swift/%EC%95%84%EC%8A%A4%ED%82%A4%EC%BD%94%EB%93%9C/"><![CDATA[<h1 id="아스키ascii">아스키(ASCII)</h1>
<ul>
  <li>ASCII(American Standard Code for Information Interchange, 미국 정보 교환 표준 부호)는 컴퓨터와 통신 장비에서 텍스트를 표현하기 위해 사용되는 표준 문자 인코딩 방식</li>
  <li><a href="https://namu.wiki/w/%EC%95%84%EC%8A%A4%ED%82%A4%20%EC%BD%94%EB%93%9C" target="_blank">나무위키 아스키코드 바로가기</a></li>
</ul>

<h1 id="아스키-코드---문자">아스키 코드 -&gt; 문자</h1>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="nv">asciiValue</span><span class="p">:</span> <span class="kt">UInt8</span> <span class="o">=</span> <span class="mi">65</span>
<span class="k">let</span> <span class="nv">character</span> <span class="o">=</span> <span class="kt">Character</span><span class="p">(</span><span class="kt">UnicodeScalar</span><span class="p">(</span><span class="n">asciiValue</span><span class="p">))</span>
<span class="nf">print</span><span class="p">(</span><span class="n">character</span><span class="p">)</span> <span class="c1">// 출력: "A"</span>
</code></pre></div></div>

<h1 id="문자---아스키-코드">문자 -&gt; 아스키 코드</h1>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="nv">character</span><span class="p">:</span> <span class="kt">Character</span> <span class="o">=</span> <span class="s">"A"</span>
<span class="k">if</span> <span class="k">let</span> <span class="nv">asciiValue</span> <span class="o">=</span> <span class="n">character</span><span class="o">.</span><span class="n">asciiValue</span> <span class="p">{</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">asciiValue</span><span class="p">)</span> <span class="c1">// 출력: 65</span>
<span class="p">}</span>
</code></pre></div></div>

<h1 id="swift에서-아스키코드-uint8-타입-사용">Swift에서 아스키코드 UInt8 타입 사용</h1>
<ul>
  <li>Swift에서 ASCII 문자를 처리할 때 일반적으로 UInt8 타입을 사용하는 이유입니다.</li>
</ul>

<ol>
  <li>아스키 코드의 범위: 아스키 코드는 0부터 127까지의 값을 가집니다. 이는 7비트로 표현되는 숫자입니다. 따라서 UInt8은 0부터 255까지의 값을 가지므로 아스키 코드의 범위 내에 있습니다.</li>
  <li>메모리 사용량: UInt8은 1바이트의 메모리를 사용하므로 ASCII 문자를 표현하는 데 최소한의 메모리를 사용합니다. 이는 메모리 사용량을 최적화하고 메모리 소비를 줄이는 데 도움이 됩니다.</li>
  <li>타입 안정성: UInt8은 부호 없는 8비트 정수를 나타내므로 음수 값을 가질 수 없습니다. 이는 아스키 코드 값의 범위가 0부터 127까지이므로 부호 없는 타입을 사용하는 것이 논리적입니다.</li>
</ol>

<p>따라서 UInt8을 사용하는 것은 메모리 사용량을 최소화하고 아스키 코드를 나타내기에 적절한 데이터 타입을 선택하는 것입니다.</p>]]></content><author><name>HyeongSub Lim</name></author><category term="swift" /><category term="swift" /><category term="아스키 코드" /><summary type="html"><![CDATA[swift에서 아스키 코드 사용 방법]]></summary></entry><entry><title type="html">[TIL] 내배캠 iOS앱 개발 공부 11일차</title><link href="http://localhost:4000/TIL/til11/" rel="alternate" type="text/html" title="[TIL] 내배캠 iOS앱 개발 공부 11일차" /><published>2024-03-12T00:00:00+09:00</published><updated>2024-03-12T00:00:00+09:00</updated><id>http://localhost:4000/TIL/til11</id><content type="html" xml:base="http://localhost:4000/TIL/til11/"><![CDATA[<h3 id="데일리-스크럼">데일리 스크럼</h3>
<p><img src="/assets/images/categories/til/2024-03-12-til11.png" alt="" /></p>

<h3 id="알고리즘">알고리즘</h3>
<p>함수형 프로그래밍과 클로저, 고차함수를 생각하면서 무작정 for문을 쓰지 않으려고 신경써서 풀었다. 정렬은 sort 함수로 썼는데 너무 편하고 좋더라. 무작정 푸는게 아니라 생각해보고 풀어야겠다.</p>

<h3 id="타입캐스팅">타입캐스팅</h3>
<p>팀원들하고 타입캐스팅 관련해서 어려운 점을 이야기하고 각자 공부해서 이야기하는 시간으로 도움이 많이 됐던 것 같다.</p>

<h3 id="심화-강의">심화 강의</h3>
<p>심화 강의는 절반 정도 봤는데 전부 이해하지 못해도 완강하고 과제 하면서 다시 봐야겠다.</p>

<h3 id="내일은">내일은?</h3>
<p>강의를 완강하고 개인과제를 다시 읽어보고 풀어볼예정 !!</p>]]></content><author><name>HyeongSub Lim</name></author><category term="TIL" /><category term="TIL" /><summary type="html"><![CDATA[내배캠 iOS앱 개발 공부 11일차 이야기]]></summary></entry><entry><title type="html">[Swift] 클로저(Closure)</title><link href="http://localhost:4000/swift/closure/" rel="alternate" type="text/html" title="[Swift] 클로저(Closure)" /><published>2024-03-12T00:00:00+09:00</published><updated>2024-03-12T00:00:00+09:00</updated><id>http://localhost:4000/swift/closure</id><content type="html" xml:base="http://localhost:4000/swift/closure/"><![CDATA[<h1 id="1-클로저란">1. 클로저란?</h1>
<ul>
  <li>일정 기능을 하는 코드를 하나의 블록(중괄호)으로 모아놓은 것을 말합니다.</li>
  <li>함수는 클로저의 한 형태입니다. (이름 없는 함수입니다.)</li>
  <li>클로저는 변수나 상수가 선언된 위치에서 참조를 획득하고 저장할 수 있습니다. 이를 변수나 상수의 클로징(잠금)이라고 하며 클로저는 여기서 착안된 이름입니다. 
<img src="/assets/images/categories/swift/2024-03-08-closure.png" alt="" /></li>
</ul>

<p><br /></p>

<h1 id="2-클로저는-일급-객체-first-class-object">2. 클로저는 일급 객체 (First-class object)</h1>
<p>1급 객체란 다음 세 가지 조건을 만족하는 객체를 가리킵니다.</p>
<ol>
  <li>변수나 데이터 구조 안에 담을 수 있어야 합니다.
    <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">sayHello</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">Void</span> <span class="p">{</span>
 <span class="nf">print</span><span class="p">(</span><span class="s">"Hello!"</span><span class="p">)</span>
<span class="p">}</span>
<span class="c1">//변수에 할당 </span>
<span class="k">let</span> <span class="nv">myFunction</span> <span class="o">=</span> <span class="n">sayHello</span>
<span class="nf">myFunction</span><span class="p">()</span> <span class="c1">// "Hello!"를 출력합니다.</span>
</code></pre></div>    </div>
  </li>
  <li>파라미터로 전달할 수 있어야 합니다.
    <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">sayHello</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">Void</span> <span class="p">{</span>
 <span class="nf">print</span><span class="p">(</span><span class="s">"Hello!"</span><span class="p">)</span>
<span class="p">}</span>
<span class="kd">func</span> <span class="nf">performAction</span><span class="p">(</span><span class="nv">action</span><span class="p">:</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">Void</span><span class="p">)</span> <span class="p">{</span>
 <span class="nf">action</span><span class="p">()</span>
<span class="p">}</span>
<span class="c1">//다른 함수의 인자로 전달</span>
<span class="nf">performAction</span><span class="p">(</span><span class="nv">action</span><span class="p">:</span> <span class="n">sayHello</span><span class="p">)</span> <span class="c1">// "Hello!"를 출력합니다.</span>
</code></pre></div>    </div>
  </li>
  <li>함수에서 반환값으로 사용할 수 있어야 합니다.
    <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">sayHello</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">Void</span> <span class="p">{</span>
 <span class="nf">print</span><span class="p">(</span><span class="s">"Hello!"</span><span class="p">)</span>
<span class="p">}</span>
<span class="kd">func</span> <span class="nf">createGreetingFunction</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">Void</span> <span class="p">{</span>
 <span class="c1">//함수의 반환값으로 사용</span>
 <span class="k">return</span> <span class="n">sayHello</span>
<span class="p">}</span>
<span class="k">let</span> <span class="nv">greetingFunction</span> <span class="o">=</span> <span class="nf">createGreetingFunction</span><span class="p">()</span>
<span class="nf">greetingFunction</span><span class="p">()</span> <span class="c1">// "Hello!"를 출력합니다.</span>
</code></pre></div>    </div>
  </li>
</ol>

<p><br /></p>

<h1 id="3-클로저-사용-이유">3. 클로저 사용 이유</h1>
<ol>
  <li>코드 간결성
    <ul>
      <li>클로저를 사용하면 간단한 작업을 짧은 문법으로 처리할 수 있습니다. 특히 함수형 프로그래밍 스타일을 채택한 경우에는 더욱 간결한 코드를 작성할 수 있습니다.</li>
    </ul>
  </li>
  <li>유연성
    <ul>
      <li>클로저를 사용하면 함수를 변수나 상수에 할당하거나, 함수의 인자로 전달할 수 있습니다. 이는 함수를 다른 함수의 인자로 전달하거나 함수를 반환하는 고차 함수를 구현하는 데 유용합니다.</li>
    </ul>
  </li>
  <li>캡처링
    <ul>
      <li>클로저는 자신을 둘러싼 범위에 있는 변수나 상수를 캡처할 수 있습니다. 이는 클로저가 생성된 시점의 상태를 유지하거나 변경할 수 있게 해줍니다.</li>
    </ul>
  </li>
  <li>비동기 작업
    <ul>
      <li>비동기 작업을 처리할 때 클로저를 사용하면 코드를 간결하게 작성할 수 있습니다. 주로 Grand Central Dispatch (GCD)나 Operation Queue와 함께 사용되어 비동기 작업을 처리합니다.</li>
    </ul>
  </li>
  <li>콜백 함수
    <ul>
      <li>주로 이벤트 처리나 네트워크 요청과 같은 비동기 작업에서 콜백 함수로 활용됩니다. 클로저를 사용하여 이러한 작업을 처리하면 코드의 일관성을 유지하면서도 비동기적인 작업을 처리할 수 있습니다.</li>
    </ul>
  </li>
  <li>컬렉션의 변형
    <ul>
      <li>Swift에서는 클로저를 사용하여 배열이나 딕셔너리 등의 컬렉션을 변형하는 메서드에 전달할 수 있습니다. 이를 통해 컬렉션을 필터링, 매핑, 정렬하는 등의 작업을 수행할 수 있습니다.</li>
    </ul>
  </li>
</ol>

<p><br /></p>

<h1 id="4-클로저의-형태">4. 클로저의 형태</h1>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//클로저의 형태</span>
<span class="p">{</span> <span class="p">(</span><span class="o">&lt;</span><span class="k">#parameters</span><span class="err">#</span><span class="o">&gt;</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="o">&lt;</span><span class="k">#return</span> <span class="n">type</span><span class="err">#</span><span class="o">&gt;</span> <span class="k">in</span>
    <span class="o">&lt;</span><span class="k">#statements</span><span class="err">#</span><span class="o">&gt;</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="클로저-형태-예시">클로저 형태 예시</h2>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="nv">closure</span> <span class="o">=</span> <span class="p">{</span> <span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">String</span> <span class="k">in</span> 
    <span class="k">return</span> <span class="s">"Hello </span><span class="se">\(</span><span class="n">name</span><span class="se">)</span><span class="s">"</span>
<span class="p">}</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">closure</span><span class="p">(</span><span class="s">"철수"</span><span class="p">))</span> <span class="c1">//출력: Hello 철수 </span>

<span class="c1">//컴파일러가 타입 추론 가능한 경우 리턴형에 대한 표기를 생략 가능 </span>
<span class="c1">//Hello + 이름으로 문자열로 리턴하기 때문에 타입 추론 가능하여 String 생략 </span>
<span class="k">let</span> <span class="nv">closure</span> <span class="o">=</span> <span class="p">{</span> <span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="k">in</span> 
    <span class="k">return</span> <span class="s">"Hello </span><span class="se">\(</span><span class="n">name</span><span class="se">)</span><span class="s">"</span>
<span class="p">}</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">closure</span><span class="p">(</span><span class="s">"철수"</span><span class="p">))</span> <span class="c1">//출력: Hello 철수 </span>

<span class="c1">// 컴파일러가 타입 추론 가능한 경우 생략 가능</span>
<span class="k">let</span> <span class="nv">closure</span> <span class="o">=</span> <span class="p">{</span> <span class="n">name</span> <span class="k">in</span>
    <span class="k">return</span> <span class="s">"Hello ~ "</span> <span class="o">+</span> <span class="n">name</span>
<span class="p">}</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">closure</span><span class="p">(</span><span class="s">"철수"</span><span class="p">))</span>  <span class="c1">//출력: Hello ~ 철수</span>

<span class="c1">//void 생략</span>
<span class="c1">//let closure = { () -&gt; () in</span>
<span class="k">let</span> <span class="nv">closure</span> <span class="p">{}</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"Hello 클로저"</span><span class="p">)</span>
<span class="p">}</span>
<span class="nf">closure</span><span class="p">()</span>   <span class="c1">//출력: Hello 클로저</span>
</code></pre></div></div>

<p><br /></p>

<h1 id="5-함수를-클로저로-변경">5. 함수를 클로저로 변경</h1>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//함수의 형태 </span>
<span class="kd">func</span> <span class="nf">nameFunction</span><span class="p">(</span><span class="nv">str</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">String</span> <span class="p">{</span>
    <span class="k">return</span> <span class="s">"Hello, </span><span class="se">\(</span><span class="n">str</span><span class="se">)</span><span class="s">"</span>
<span class="p">}</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">nameFunction</span><span class="p">(</span><span class="nv">str</span><span class="p">:</span> <span class="s">"imhs"</span><span class="p">))</span>   <span class="c1">//출력: Hello, imhs</span>

<span class="c1">// 클로저로 변경 (nameFunction 함수를 클로저로 변경)</span>
<span class="c1">//name 변수에 함수를 담을 수 있음 </span>
<span class="k">var</span> <span class="nv">name</span> <span class="o">=</span> <span class="p">{(</span><span class="nv">str</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">String</span> <span class="k">in</span>
    <span class="k">return</span> <span class="s">"Hello, </span><span class="se">\(</span><span class="n">str</span><span class="se">)</span><span class="s">"</span>
<span class="p">}</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">name</span><span class="p">(</span><span class="s">"imhs"</span><span class="p">))</span> <span class="c1">//출력: Hello, imhs</span>
</code></pre></div></div>

<p><br /></p>

<h1 id="6-문법-최적화간소화">6. 문법 최적화(간소화)</h1>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//함수 정의</span>
<span class="kd">func</span> <span class="nf">closureFunction</span><span class="p">(</span><span class="nv">closure</span><span class="p">:</span> <span class="p">(</span><span class="kt">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span><span class="p">)</span> <span class="p">{</span>
    <span class="nf">closure</span><span class="p">(</span><span class="s">"swift"</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>
<h2 id="타입-추론type-inference">타입 추론(Type Inference)</h2>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">closureFunction</span><span class="p">(</span><span class="nv">closure</span><span class="p">:</span> <span class="p">{</span> <span class="p">(</span><span class="nv">str</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="k">in</span>
    <span class="k">return</span> <span class="n">str</span><span class="o">.</span><span class="n">count</span>
<span class="p">})</span>
<span class="nf">closureFunction</span><span class="p">(</span><span class="nv">closure</span><span class="p">:</span> <span class="p">{</span> <span class="n">str</span> <span class="k">in</span>
    <span class="k">return</span> <span class="n">str</span><span class="o">.</span><span class="n">count</span>
<span class="p">})</span>
</code></pre></div></div>
<h2 id="싱글-익스프레션인-경우한줄-리턴을-생략-가능-implicit-return">싱글 익스프레션인 경우(한줄), 리턴을 생략 가능 (Implicit Return)</h2>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">closureFunction</span><span class="p">(</span><span class="nv">closure</span><span class="p">:</span> <span class="p">{</span> <span class="n">str</span> <span class="k">in</span>
    <span class="n">str</span><span class="o">.</span><span class="n">count</span>
<span class="p">})</span>
</code></pre></div></div>

<h2 id="아규먼트-이름-축약shorthand-argements">아규먼트 이름 축약(Shorthand Argements)</h2>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">closureFunction</span><span class="p">(</span><span class="nv">closure</span><span class="p">:</span> <span class="p">{</span> 
    <span class="nv">$0</span><span class="o">.</span><span class="n">count</span>
<span class="p">})</span>
</code></pre></div></div>

<h2 id="트레일링trailing-클로저-문법후행-클로저-문법">트레일링(Trailing) 클로저 문법(후행 클로저 문법)</h2>
<ul>
  <li>함수의 마지막 전달 인자(Argements)로 클로저 전달되는 경우, 소괄호를 생략 가능</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">closureFunction</span><span class="p">(</span><span class="nv">closure</span><span class="p">:</span> <span class="p">{</span>
    <span class="nv">$0</span><span class="o">.</span><span class="n">count</span>
<span class="p">})</span>
<span class="nf">closureFunction</span><span class="p">()</span> <span class="p">{</span>
    <span class="nv">$0</span><span class="o">.</span><span class="n">count</span>
<span class="p">}</span>
<span class="n">closureFunction</span> <span class="p">{</span> <span class="nv">$0</span><span class="o">.</span><span class="n">count</span> <span class="p">}</span>
</code></pre></div></div>

<h3 id="트레일링-클로저-예시">트레일링 클로저 예시</h3>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//1. 클로저를 파라미터로 받는 함수 정의</span>
<span class="kd">func</span> <span class="nf">closureFunction</span><span class="p">(</span><span class="nv">closure</span><span class="p">:</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">Void</span><span class="p">)</span> <span class="p">{</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"함수 시작"</span><span class="p">)</span>
    <span class="nf">closure</span><span class="p">()</span>
<span class="p">}</span>
<span class="c1">//2. 함수를 실행할때 마지막 전달 인자를 클로저 형태로 전달(소괄호를 생략 가능)</span>
<span class="nf">closureFunction</span><span class="p">(</span><span class="nv">closure</span><span class="p">:</span> <span class="p">{</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"함수 종료"</span><span class="p">)</span>
<span class="p">})</span>
<span class="nf">closureFunction</span><span class="p">(</span><span class="nv">closure</span><span class="p">:</span> <span class="p">)</span> <span class="p">{</span>      <span class="c1">// 소괄호를 앞으로 가져오기</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"함수 종료"</span><span class="p">)</span>
<span class="p">}</span>
<span class="nf">closureFunction</span><span class="p">()</span> <span class="p">{</span>               <span class="c1">// 아규먼트 생략가능</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"함수 종료"</span><span class="p">)</span>
<span class="p">}</span>
<span class="c1">// 소괄호 생략 </span>
<span class="n">closureFunction</span> <span class="p">{</span> <span class="c1">//함수를 실행하고 마지막 아규먼트로 클로저를 전달했다는걸 익숙해지기 </span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"함수 종료"</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p><br /></p>

<h1 id="7-캡처-현상">7. 캡처 현상</h1>
<h2 id="값value-캡처">값(value) 캡처</h2>
<ul>
  <li>클로저가 변수나 상수의 값을 캡처합니다. 이때, 클로저 내부에서 캡처한 값이 변경되어도 원본 값은 변경되지 않습니다.</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">makeIncrementer</span><span class="p">(</span><span class="n">forIncrement</span> <span class="nv">amount</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">total</span> <span class="o">=</span> <span class="mi">0</span>
    
    <span class="c1">// 클로저를 반환합니다.</span>
    <span class="k">let</span> <span class="nv">incrementer</span><span class="p">:</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="o">=</span> <span class="p">{</span>
        <span class="c1">// total 변수를 캡처하여 저장합니다.</span>
        <span class="n">total</span> <span class="o">+=</span> <span class="n">amount</span>
        <span class="k">return</span> <span class="n">total</span>
    <span class="p">}</span>
    
    <span class="k">return</span> <span class="n">incrementer</span>
<span class="p">}</span>
<span class="k">let</span> <span class="nv">incrementByTen</span> <span class="o">=</span> <span class="nf">makeIncrementer</span><span class="p">(</span><span class="nv">forIncrement</span><span class="p">:</span> <span class="mi">10</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">incrementByTen</span><span class="p">())</span> <span class="c1">// total = 10, 결과: 10</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">incrementByTen</span><span class="p">())</span> <span class="c1">// total = 20, 결과: 20</span>
</code></pre></div></div>

<h2 id="참조reference-캡처">참조(reference) 캡처</h2>
<ul>
  <li>클로저가 변수나 상수의 참조를 캡처합니다. 따라서 클로저 내에서 해당 변수나 상수를 변경하면 원본 값도 변경됩니다.</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">SimpleClass</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">value</span><span class="p">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">10</span>
<span class="p">}</span>
<span class="kd">func</span> <span class="nf">createClosure</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="p">(()</span> <span class="o">-&gt;</span> <span class="kt">Int</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">instance</span> <span class="o">=</span> <span class="kt">SimpleClass</span><span class="p">()</span>
    
    <span class="c1">// 참조 캡처를 사용하여 SimpleClass의 인스턴스를 캡처합니다.</span>
    <span class="k">let</span> <span class="nv">closure</span><span class="p">:</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="o">=</span> <span class="p">{</span>
        <span class="c1">// 클로저가 참조하는 인스턴스의 속성을 업데이트합니다.</span>
        <span class="n">instance</span><span class="o">.</span><span class="n">value</span> <span class="o">*=</span> <span class="mi">2</span>
        <span class="k">return</span> <span class="n">instance</span><span class="o">.</span><span class="n">value</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">closure</span>
<span class="p">}</span>
</code></pre></div></div>

<p><br /></p>

<h1 id="8-탈출escaping-클로저">8. 탈출(escaping) 클로저</h1>
<h2 id="순차적-실행">순차적 실행</h2>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">sequentialExecutionExample</span><span class="p">()</span> <span class="p">{</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"Start"</span><span class="p">)</span>

    <span class="c1">// 1. 첫 번째 작업</span>
    <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">1</span><span class="o">...</span><span class="mi">3</span> <span class="p">{</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">"Task </span><span class="se">\(</span><span class="n">i</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="c1">// 2. 두 번째 작업</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"Next Task"</span><span class="p">)</span>

    <span class="c1">// 3. 세 번째 작업</span>
    <span class="k">let</span> <span class="nv">result</span> <span class="o">=</span> <span class="mi">5</span> <span class="o">+</span> <span class="mi">3</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"Result: </span><span class="se">\(</span><span class="n">result</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>

    <span class="nf">print</span><span class="p">(</span><span class="s">"End"</span><span class="p">)</span>
<span class="p">}</span>

<span class="nf">sequentialExecutionExample</span><span class="p">()</span>
<span class="cm">/*
위의 코드는 함수 sequentialExecutionExample 내에서 순차적으로 실행됩니다.
각각의 작업은 순서대로 실행되며, 한 작업이 끝나야 다음 작업이 실행됩니다. 
이 예시에서는 
'Start', 'Task 1', 'Task 2', 'Task 3', 'Next Task', 'Result: 8', 'End'
와 같은 순서로 출력됩니다.
*/</span>
</code></pre></div></div>

<h2 id="비동기-실행">비동기 실행</h2>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">asynchronousExecutionExample</span><span class="p">()</span> <span class="p">{</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"Start"</span><span class="p">)</span>

    <span class="c1">// 1. 비동기로 실행되는 작업</span>
    <span class="kt">DispatchQueue</span><span class="o">.</span><span class="nf">global</span><span class="p">()</span><span class="o">.</span><span class="k">async</span> <span class="p">{</span>
        <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">1</span><span class="o">...</span><span class="mi">3</span> <span class="p">{</span>
            <span class="nf">print</span><span class="p">(</span><span class="s">"Async Task </span><span class="se">\(</span><span class="n">i</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="c1">// 2. 순차적으로 실행되는 작업</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"Next Task"</span><span class="p">)</span>

    <span class="c1">// 3. 또 다른 비동기 작업</span>
    <span class="kt">DispatchQueue</span><span class="o">.</span><span class="nf">global</span><span class="p">()</span><span class="o">.</span><span class="k">async</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">result</span> <span class="o">=</span> <span class="mi">5</span> <span class="o">+</span> <span class="mi">3</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">"Async Result: </span><span class="se">\(</span><span class="n">result</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="c1">// 4. 끝 부분</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"End"</span><span class="p">)</span>
<span class="p">}</span>
<span class="nf">asynchronousExecutionExample</span><span class="p">()</span>
<span class="cm">/*
위의 코드는 비동기적으로 실행되는 예시입니다. 
DispatchQueue.global().async를 사용하여 클로저가 다른 스레드에서 비동기적으로 실행됩니다. 
따라서 비동기 작업은 순차적인 흐름을 방해하지 않고 별도의 스레드에서 실행됩니다.

실행 결과는 
'Start', 'Next Task', 'End' 순서로 출력되고, 
비동기 작업은 나중에 완료되어 
'Async Task 1', 'Async Task 2', 'Async Task 3', 'Async Result: 8'와 같이 
순서는 보장되지 않는 시점에 출력됩니다. 
이는 비동기 작업이 별도의 스레드에서 동작하기 때문에, 
주 스레드의 작업과 병행적으로 실행됨을 보여줍니다.
*/</span>
</code></pre></div></div>

<h2 id="탈출-클로저escaping-closure">탈출 클로저(escaping closure)</h2>
<ul>
  <li>파라미터 타입 앞에 @escaping이라는 키워드를 명시</li>
  <li>어떤 함수의 내부에 존재하는 클로저(함수)를 외부 변수에 저장하는 경우
    <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="nv">defaultFunction</span><span class="p">:</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="p">()</span> <span class="o">=</span> <span class="p">{</span> <span class="nf">print</span><span class="p">(</span><span class="s">"출력"</span><span class="p">)</span> <span class="p">}</span>
<span class="kd">func</span> <span class="nf">escapingFunc</span><span class="p">(</span><span class="nv">closure</span><span class="p">:</span> <span class="kd">@escaping</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="p">())</span> <span class="p">{</span>
  <span class="c1">// 클로저를 실행하는 것이 아니라  aSavedFunction 변수에 저장. </span>
  <span class="c1">// 함수는 변수와 달리 기본적으로 외부 할당이 불가능</span>
  <span class="n">defaultFunction</span> <span class="o">=</span> <span class="n">closure</span>        
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>이스케이핑 클로저는 클로저가 메서드의 인자로 전달됐을 때, 메서드의 실행이 종료된 후 실행되는 클로저(비동기)
    <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">asyncEscaping</span><span class="p">(</span><span class="nv">closure</span><span class="p">:</span> <span class="kd">@escaping</span> <span class="p">(</span><span class="kt">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">())</span> <span class="p">{</span>
  <span class="k">var</span> <span class="nv">name</span> <span class="o">=</span> <span class="s">"철수"</span>
    
  <span class="kt">DispatchQueue</span><span class="o">.</span><span class="n">main</span><span class="o">.</span><span class="nf">asyncAfter</span><span class="p">(</span><span class="nv">deadline</span><span class="p">:</span> <span class="o">.</span><span class="nf">now</span><span class="p">()</span> <span class="o">+</span> <span class="mi">3</span><span class="p">)</span> <span class="p">{</span> <span class="c1">//3초뒤에 실행하도록 만들기</span>
      <span class="nf">closure</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="n">asyncEscaping</span> <span class="p">{</span> 
  <span class="nf">print</span><span class="p">(</span><span class="s">"name : </span><span class="se">\(</span><span class="nv">$0</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>@escaping 를 사용하는 클로저에서 self의 요소를 사용할 경우, self를 명시적으로 언급해야 합니다.
    <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="nv">completionHandlers</span><span class="p">:</span> <span class="p">[()</span> <span class="o">-&gt;</span> <span class="kt">Void</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
<span class="kd">func</span> <span class="nf">someFunctionWithEscapingClosure</span><span class="p">(</span><span class="nv">completionHandler</span><span class="p">:</span> <span class="kd">@escaping</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">Void</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">completionHandlers</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="n">completionHandler</span><span class="p">)</span>
<span class="p">}</span>
<span class="kd">func</span> <span class="nf">someFunctionWithNonescapingClosure</span><span class="p">(</span><span class="nv">closure</span><span class="p">:</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">Void</span><span class="p">)</span> <span class="p">{</span>
  <span class="nf">closure</span><span class="p">()</span>    <span class="c1">// 함수 안에서 끝나는 클로저</span>
<span class="p">}</span>
<span class="kd">class</span> <span class="kt">SomeClass</span> <span class="p">{</span>
  <span class="k">var</span> <span class="nv">x</span> <span class="o">=</span> <span class="mi">10</span>
  <span class="kd">func</span> <span class="nf">doSomething</span><span class="p">()</span> <span class="p">{</span>
      <span class="n">someFunctionWithEscapingClosure</span> <span class="p">{</span> <span class="k">self</span><span class="o">.</span><span class="n">x</span> <span class="o">=</span> <span class="mi">100</span> <span class="p">}</span> <span class="c1">// 명시적으로 self를 적어줘야 합니다.</span>
      <span class="n">someFunctionWithNonescapingClosure</span> <span class="p">{</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">200</span> <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="k">let</span> <span class="nv">instance</span> <span class="o">=</span> <span class="kt">SomeClass</span><span class="p">()</span>
<span class="n">instance</span><span class="o">.</span><span class="nf">doSomething</span><span class="p">()</span>
<span class="nf">print</span><span class="p">(</span><span class="n">instance</span><span class="o">.</span><span class="n">x</span><span class="p">)</span>
<span class="c1">// Prints "200"</span>
<span class="n">completionHandlers</span><span class="o">.</span><span class="nf">first</span><span class="p">?()</span>
<span class="nf">print</span><span class="p">(</span><span class="n">instance</span><span class="o">.</span><span class="n">x</span><span class="p">)</span>
<span class="c1">// Prints "100"</span>
</code></pre></div>    </div>
  </li>
</ul>]]></content><author><name>HyeongSub Lim</name></author><category term="swift" /><category term="swift" /><category term="Closure" /><summary type="html"><![CDATA[클로저(Closure)는 함수]]></summary></entry></feed>