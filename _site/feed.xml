<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-04-16T20:24:23+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">limlogging Devlog</title><author><name>HyeongSub Lim</name></author><entry><title type="html">[내배캠] iOS 앱 개발 숙련 개인 과제 - WishList 앱 만들기 1</title><link href="http://localhost:4000/sparta/wishList1/" rel="alternate" type="text/html" title="[내배캠] iOS 앱 개발 숙련 개인 과제 - WishList 앱 만들기 1" /><published>2024-04-16T00:00:00+09:00</published><updated>2024-04-16T00:00:00+09:00</updated><id>http://localhost:4000/sparta/wishList1</id><content type="html" xml:base="http://localhost:4000/sparta/wishList1/"><![CDATA[<h1 id="wishlist-앱-만들기">WishList 앱 만들기</h1>
<ul>
  <li>네트워크 통신과 내부 저장소를 사용하여 WishList 앱 만들기입니다.</li>
</ul>

<p><br /></p>

<h1 id="과제-요구사항">과제 요구사항</h1>
<ul>
  <li>필수과제
    <ul>
      <li>Lv1. 데이터 모델링하기</li>
      <li>Lv2. 위시 리스트 메인 페이지 구현</li>
      <li>Lv3. “위시 리스트 보기” 페이지 구현</li>
    </ul>
  </li>
  <li>선택과제
    <ul>
      <li>Lv4. TableView에서 스와이프하여 삭제기능 구현</li>
      <li>Lv5. UIRefreshControl을 사용한 새로고침 구현</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<h1 id="스토리보드를-사용해서-시작">스토리보드를 사용해서 시작</h1>
<ul>
  <li>코드베이스로 시작했다가 버튼 위치 조절하고 이것 저것 하다보니 개발 속도가 더뎌 스토리보드로 바꿔서 새로 시작했습니다. ㅠ</li>
</ul>

<p><br /></p>

<h1 id="기능-구현">기능 구현</h1>
<h2 id="1-스토리보드에-ui-구성하기">1. 스토리보드에 UI 구성하기</h2>
<ul>
  <li>확실히 코드로 하나씩 하는것보다 빠릅니다. ㅠ ㅠ</li>
</ul>

<p><img src="../../assets/images/categories/sparta/2024-04-16-wishList1.png" alt="스토리보드" /></p>

<h2 id="2-data-가져오기">2. Data 가져오기</h2>
<ul>
  <li>dummyjson 사이트에서 랜덤하게 데이터를 받아옵니다.</li>
  <li>원래 주석처리된 부분처럼 사용했는데 경고 메시지가 많이 발생해서 튜터님 가이드에 따라 속성감시자로 수정했습니다.</li>
</ul>

<h3 id="getdata">getData()</h3>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">getData</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">productID</span><span class="p">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="kt">Int</span><span class="o">.</span><span class="nf">random</span><span class="p">(</span><span class="nv">in</span><span class="p">:</span> <span class="mi">1</span><span class="o">...</span><span class="mi">100</span><span class="p">)</span>

    <span class="k">if</span> <span class="k">let</span> <span class="nv">url</span> <span class="o">=</span> <span class="kt">URL</span><span class="p">(</span><span class="nv">string</span><span class="p">:</span> <span class="s">"https://dummyjson.com/products/</span><span class="se">\(</span><span class="n">productID</span><span class="se">)</span><span class="s">"</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">"url: </span><span class="se">\(</span><span class="n">url</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
        <span class="c1">//URLSessionDataTask를 사용하여 비동기적으로 데이터 요청</span>
        <span class="k">let</span> <span class="nv">task</span> <span class="o">=</span> <span class="kt">URLSession</span><span class="o">.</span><span class="n">shared</span><span class="o">.</span><span class="nf">dataTask</span><span class="p">(</span><span class="nv">with</span><span class="p">:</span> <span class="n">url</span><span class="p">)</span> <span class="p">{</span> <span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">response</span><span class="p">,</span> <span class="n">error</span><span class="p">)</span> <span class="k">in</span>
            <span class="k">if</span> <span class="k">let</span> <span class="nv">error</span> <span class="o">=</span> <span class="n">error</span> <span class="p">{</span>
                <span class="nf">print</span><span class="p">(</span><span class="s">"Error: </span><span class="se">\(</span><span class="n">error</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
            <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="k">let</span> <span class="nv">data</span> <span class="o">=</span> <span class="n">data</span> <span class="p">{</span>
                <span class="k">do</span> <span class="p">{</span>
                    <span class="k">let</span> <span class="nv">product</span> <span class="o">=</span> <span class="k">try</span> <span class="kt">JSONDecoder</span><span class="p">()</span><span class="o">.</span><span class="nf">decode</span><span class="p">(</span><span class="kt">ProductsManager</span><span class="o">.</span><span class="k">self</span><span class="p">,</span> <span class="nv">from</span><span class="p">:</span> <span class="n">data</span><span class="p">)</span>
            
                    <span class="k">self</span><span class="o">.</span><span class="n">currentProduct</span> <span class="o">=</span> <span class="n">product</span>   <span class="c1">//데이터 설정 </span>

<span class="c1">//                        DispatchQueue.main.async {</span>
<span class="c1">//                            self.productPriceLabel.text = String(product.price)</span>
<span class="c1">//                            self.productTitleLabel.text = product.title</span>
<span class="c1">//                            self.productDescriptionLabel.text = product.description</span>
<span class="c1">//                            </span>
<span class="c1">//                        }</span>
<span class="c1">//                        DispatchQueue.main.async {</span>
<span class="c1">//                            //이미지 URL 가져오기</span>
<span class="c1">//                            if let productUrlString = product.thumbnail as? String,</span>
<span class="c1">//                               let productImageUrl = URL(string: productUrlString) {</span>
<span class="c1">//                                // 이미지 데이터를 다운로드하여 이미지 뷰에 표시</span>
<span class="c1">//                                if let imageData = try? Data(contentsOf: productImageUrl) {</span>
<span class="c1">//                                    //DispatchQueue.main.async {</span>
<span class="c1">//                                    self.productImageView.image = UIImage(data: imageData)</span>
<span class="c1">//                                    //}</span>
<span class="c1">//                                }</span>
<span class="c1">//                            }</span>
<span class="c1">//                        }</span>
                <span class="p">}</span> <span class="k">catch</span> <span class="p">{</span>
                    <span class="nf">print</span><span class="p">(</span><span class="s">"Decode Error: </span><span class="se">\(</span><span class="n">error</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="n">task</span><span class="o">.</span><span class="nf">resume</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><br /></p>

<h3 id="속성감시자-설정">속성감시자 설정</h3>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">private</span> <span class="k">var</span> <span class="nv">currentProduct</span><span class="p">:</span> <span class="kt">ProductsManager</span><span class="p">?</span> <span class="o">=</span> <span class="kc">nil</span> <span class="p">{</span>
    <span class="k">didSet</span> <span class="p">{</span>
        <span class="c1">//currentProduct가 nil이 아닌지 확인하고 종료하기 </span>
        <span class="k">guard</span> <span class="k">let</span> <span class="nv">currentProduct</span> <span class="o">=</span> <span class="k">self</span><span class="o">.</span><span class="n">currentProduct</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
        
        <span class="c1">//메인 스레드에서 UI 업데이트를 수행</span>
        <span class="kt">DispatchQueue</span><span class="o">.</span><span class="n">main</span><span class="o">.</span><span class="k">async</span> <span class="p">{</span>
            <span class="k">self</span><span class="o">.</span><span class="n">productImageView</span><span class="o">.</span><span class="n">image</span> <span class="o">=</span> <span class="kc">nil</span>
            <span class="k">self</span><span class="o">.</span><span class="n">productTitleLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">currentProduct</span><span class="o">.</span><span class="n">title</span>
            <span class="k">self</span><span class="o">.</span><span class="n">productDescriptionLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">currentProduct</span><span class="o">.</span><span class="n">description</span>
            <span class="k">self</span><span class="o">.</span><span class="n">productPriceLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">"</span><span class="se">\(</span><span class="n">currentProduct</span><span class="o">.</span><span class="n">price</span><span class="se">)</span><span class="s">$"</span>
        <span class="p">}</span>
        
        <span class="c1">// 백그라운드 스레드에서 제품의 섬네일 이미지를 비동기적으로 가져오기 </span>
        <span class="kt">DispatchQueue</span><span class="o">.</span><span class="nf">global</span><span class="p">()</span><span class="o">.</span><span class="k">async</span> <span class="p">{</span> <span class="p">[</span><span class="k">weak</span> <span class="k">self</span><span class="p">]</span> <span class="k">in</span>
            <span class="c1">// 제품의 섬네일 이미지 데이터를 가져와 UIImage로 변환</span>
            <span class="k">if</span> <span class="k">let</span> <span class="nv">data</span> <span class="o">=</span> <span class="k">try</span><span class="p">?</span> <span class="kt">Data</span><span class="p">(</span><span class="nv">contentsOf</span><span class="p">:</span> <span class="n">currentProduct</span><span class="o">.</span><span class="n">thumbnail</span><span class="p">),</span> <span class="k">let</span> <span class="nv">image</span> <span class="o">=</span> <span class="kt">UIImage</span><span class="p">(</span><span class="nv">data</span><span class="p">:</span> <span class="n">data</span><span class="p">)</span> <span class="p">{</span>
                <span class="c1">// 가져온 이미지를 메인 스레드에서 productImageView에 설정하여 이미지 출력 </span>
                <span class="kt">DispatchQueue</span><span class="o">.</span><span class="n">main</span><span class="o">.</span><span class="k">async</span> <span class="p">{</span> <span class="k">self</span><span class="p">?</span><span class="o">.</span><span class="n">productImageView</span><span class="o">.</span><span class="n">image</span> <span class="o">=</span> <span class="n">image</span> <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="3-coredata-저장하기">3. CoreData 저장하기</h2>
<ul>
  <li>coredata 설정이 데이터베이스 테이블을 만들고 컬럼을 추가하는 것과 비슷한 것 같다.</li>
</ul>

<h3 id="entities-추가-및-attributes-추가">Entities 추가 및 Attributes 추가</h3>
<p><img src="../../assets/images/categories/sparta/2024-04-16-wishList2.png" alt="Entities 추가 및 Attributes 추가" /></p>

<h3 id="appdelegateswift-파일-수정">AppDelegate.swift 파일 수정</h3>
<ul>
  <li>처음 프로젝트 만들때 코어데이터를 추가하고 만들면 자동으로 코드가 추가됩니다.</li>
  <li>import CoreData, persistentContainer 메서드, saveContext 메서드를 추가합니다.</li>
  <li>core Data를 나중에 추가하는 경우 파일 추가에서 Data Model로 생성하면 됩니다.</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">UIKit</span>
<span class="kd">import</span> <span class="kt">CoreData</span> <span class="c1">//필수 </span>

<span class="kd">@main</span>
<span class="kd">class</span> <span class="kt">AppDelegate</span><span class="p">:</span> <span class="kt">UIResponder</span><span class="p">,</span> <span class="kt">UIApplicationDelegate</span> <span class="p">{</span>
    <span class="c1">//중간코드 생략 </span>

    <span class="c1">// MARK: - Core Data stack</span>
    <span class="kd">lazy</span> <span class="k">var</span> <span class="nv">persistentContainer</span><span class="p">:</span> <span class="kt">NSPersistentContainer</span> <span class="o">=</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">container</span> <span class="o">=</span> <span class="kt">NSPersistentContainer</span><span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="s">"MyWishList"</span><span class="p">)</span>   <span class="c1">//core data 이름 </span>
        <span class="n">container</span><span class="o">.</span><span class="nf">loadPersistentStores</span><span class="p">(</span><span class="nv">completionHandler</span><span class="p">:</span> <span class="p">{</span> <span class="p">(</span><span class="n">storeDescription</span><span class="p">,</span> <span class="n">error</span><span class="p">)</span> <span class="k">in</span>
            <span class="k">if</span> <span class="k">let</span> <span class="nv">error</span> <span class="o">=</span> <span class="n">error</span> <span class="k">as</span> <span class="kt">NSError</span><span class="p">?</span> <span class="p">{</span>
                <span class="nf">fatalError</span><span class="p">(</span><span class="s">"Unresolved error </span><span class="se">\(</span><span class="n">error</span><span class="se">)</span><span class="s">, </span><span class="se">\(</span><span class="n">error</span><span class="o">.</span><span class="n">userInfo</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
            <span class="p">}</span>
        <span class="p">})</span>
        <span class="k">return</span> <span class="n">container</span>
    <span class="p">}()</span>

    <span class="c1">// MARK: - Core Data Saving support</span>
    <span class="kd">func</span> <span class="nf">saveContext</span> <span class="p">()</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">context</span> <span class="o">=</span> <span class="n">persistentContainer</span><span class="o">.</span><span class="n">viewContext</span>
        <span class="k">if</span> <span class="n">context</span><span class="o">.</span><span class="n">hasChanges</span> <span class="p">{</span>
            <span class="k">do</span> <span class="p">{</span>
                <span class="k">try</span> <span class="n">context</span><span class="o">.</span><span class="nf">save</span><span class="p">()</span>
            <span class="p">}</span> <span class="k">catch</span> <span class="p">{</span>
                <span class="k">let</span> <span class="nv">nserror</span> <span class="o">=</span> <span class="n">error</span> <span class="k">as</span> <span class="kt">NSError</span>
                <span class="nf">fatalError</span><span class="p">(</span><span class="s">"Unresolved error </span><span class="se">\(</span><span class="n">nserror</span><span class="se">)</span><span class="s">, </span><span class="se">\(</span><span class="n">nserror</span><span class="o">.</span><span class="n">userInfo</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><br /></p>

<h3 id="viewcontroller-수정">viewController 수정</h3>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">CoreData</span> <span class="c1">//필수 </span>

<span class="kd">class</span> <span class="kt">ViewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>
    <span class="c1">//UIApplication의 shared 인스턴스를 통해 AppDelegate에 접근하고 persistentContainer 속성 반환</span>
    <span class="k">var</span> <span class="nv">persistentContainer</span><span class="p">:</span> <span class="kt">NSPersistentContainer</span><span class="p">?</span> <span class="p">{</span>
        <span class="p">(</span><span class="kt">UIApplication</span><span class="o">.</span><span class="n">shared</span><span class="o">.</span><span class="n">delegate</span> <span class="k">as?</span> <span class="kt">AppDelegate</span><span class="p">)?</span><span class="o">.</span><span class="n">persistentContainer</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<h3 id="위시리스트-담기-버튼-수정">위시리스트 담기 버튼 수정</h3>
<ul>
  <li>alert를 사용하여 입력 확인, 중복 데이터인 경우 알림창을 띄우도록 하였습니다.</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="c1">// MARK: - 위시 리스트 담기 버튼 선택</span>
    <span class="kd">@IBAction</span> <span class="kd">func</span> <span class="nf">addToWishListButtonTapped</span><span class="p">(</span><span class="n">_</span> <span class="nv">sender</span><span class="p">:</span> <span class="kt">UIButton</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">guard</span> <span class="k">let</span> <span class="nv">product</span> <span class="o">=</span> <span class="k">self</span><span class="o">.</span><span class="n">currentProduct</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
        
        <span class="c1">// 위시리스트 담기 전 중복 확인</span>
        <span class="k">if</span> <span class="nf">checkId</span><span class="p">(</span><span class="kt">String</span><span class="p">(</span><span class="n">product</span><span class="o">.</span><span class="n">id</span><span class="p">))</span> <span class="p">{</span>
            <span class="k">let</span> <span class="nv">alertController</span> <span class="o">=</span> <span class="kt">UIAlertController</span><span class="p">(</span><span class="nv">title</span><span class="p">:</span> <span class="s">"중복 확인"</span><span class="p">,</span> <span class="nv">message</span><span class="p">:</span> <span class="s">"이미 위시 리스트에 포함되어 있습니다."</span><span class="p">,</span> <span class="nv">preferredStyle</span><span class="p">:</span> <span class="o">.</span><span class="n">alert</span><span class="p">)</span>
            <span class="k">let</span> <span class="nv">cancel</span> <span class="o">=</span> <span class="kt">UIAlertAction</span><span class="p">(</span><span class="nv">title</span><span class="p">:</span> <span class="s">"확인"</span><span class="p">,</span> <span class="nv">style</span><span class="p">:</span> <span class="o">.</span><span class="n">cancel</span><span class="p">,</span> <span class="nv">handler</span><span class="p">:</span> <span class="p">{</span> <span class="n">_</span> <span class="k">in</span> <span class="k">return</span> <span class="p">})</span>
            
            <span class="n">alertController</span><span class="o">.</span><span class="nf">addAction</span><span class="p">(</span><span class="n">cancel</span><span class="p">)</span>
            <span class="nf">present</span><span class="p">(</span><span class="n">alertController</span><span class="p">,</span> <span class="nv">animated</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="nv">completion</span><span class="p">:</span> <span class="kc">nil</span><span class="p">)</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="c1">//코어데이터에 저장</span>
            <span class="k">guard</span> <span class="k">let</span> <span class="nv">context</span> <span class="o">=</span> <span class="k">self</span><span class="o">.</span><span class="n">persistentContainer</span><span class="p">?</span><span class="o">.</span><span class="n">viewContext</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
            <span class="k">let</span> <span class="nv">myWishList</span> <span class="o">=</span> <span class="kt">MyWishList</span><span class="p">(</span><span class="nv">context</span><span class="p">:</span> <span class="n">context</span><span class="p">)</span>
            
            <span class="n">myWishList</span><span class="o">.</span><span class="n">id</span> <span class="o">=</span> <span class="kt">String</span><span class="p">(</span><span class="n">product</span><span class="o">.</span><span class="n">id</span><span class="p">)</span>
            <span class="n">myWishList</span><span class="o">.</span><span class="n">title</span> <span class="o">=</span> <span class="n">product</span><span class="o">.</span><span class="n">title</span>
            <span class="n">myWishList</span><span class="o">.</span><span class="n">price</span> <span class="o">=</span> <span class="kt">String</span><span class="p">(</span><span class="n">product</span><span class="o">.</span><span class="n">price</span><span class="p">)</span>
            <span class="c1">//저장</span>
            <span class="k">try</span><span class="p">?</span> <span class="n">context</span><span class="o">.</span><span class="nf">save</span><span class="p">()</span>
            
            <span class="k">let</span> <span class="nv">alertController</span> <span class="o">=</span> <span class="kt">UIAlertController</span><span class="p">(</span><span class="nv">title</span><span class="p">:</span> <span class="s">"위시 리스트 담기"</span><span class="p">,</span> <span class="nv">message</span><span class="p">:</span> <span class="s">"해당 상품을 위시 리스트에 담았습니다."</span><span class="p">,</span> <span class="nv">preferredStyle</span><span class="p">:</span> <span class="o">.</span><span class="n">alert</span><span class="p">)</span>
            <span class="k">let</span> <span class="nv">addToWishList</span> <span class="o">=</span> <span class="kt">UIAlertAction</span><span class="p">(</span><span class="nv">title</span><span class="p">:</span> <span class="s">"확인"</span><span class="p">,</span> <span class="nv">style</span><span class="p">:</span> <span class="o">.</span><span class="k">default</span><span class="p">,</span> <span class="nv">handler</span><span class="p">:</span> <span class="p">{</span> <span class="n">_</span> <span class="k">in</span> <span class="k">return</span> <span class="p">})</span>
            
            <span class="n">alertController</span><span class="o">.</span><span class="nf">addAction</span><span class="p">(</span><span class="n">addToWishList</span><span class="p">)</span>
            <span class="nf">present</span><span class="p">(</span><span class="n">alertController</span><span class="p">,</span> <span class="nv">animated</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="nv">completion</span><span class="p">:</span> <span class="kc">nil</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
</code></pre></div></div>

<h3 id="중복-id-체크">중복 ID 체크</h3>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="c1">// MARK: - 중복 ID 체크</span>
    <span class="kd">func</span> <span class="nf">checkId</span><span class="p">(</span><span class="n">_</span> <span class="nv">id</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Bool</span> <span class="p">{</span>
        <span class="c1">//true 중복, false 중복아님</span>
        <span class="k">guard</span> <span class="k">let</span> <span class="nv">context</span> <span class="o">=</span> <span class="k">self</span><span class="o">.</span><span class="n">persistentContainer</span><span class="p">?</span><span class="o">.</span><span class="n">viewContext</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="kc">true</span> <span class="p">}</span>
        <span class="k">let</span> <span class="nv">request</span> <span class="o">=</span> <span class="kt">MyWishList</span><span class="o">.</span><span class="nf">fetchRequest</span><span class="p">()</span>
        <span class="k">guard</span> <span class="k">let</span> <span class="nv">myWishList</span> <span class="o">=</span> <span class="k">try</span><span class="p">?</span> <span class="n">context</span><span class="o">.</span><span class="nf">fetch</span><span class="p">(</span><span class="n">request</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="kc">true</span> <span class="p">}</span>
        
        <span class="k">if</span> <span class="n">myWishList</span><span class="o">.</span><span class="nf">filter</span><span class="p">({</span> <span class="nv">$0</span><span class="o">.</span><span class="n">id</span> <span class="o">==</span> <span class="n">id</span><span class="p">})</span><span class="o">.</span><span class="n">count</span> <span class="o">!=</span> <span class="mi">0</span> <span class="p">{</span>
            <span class="c1">//중복</span>
            <span class="k">return</span> <span class="kc">true</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="c1">//중복 아님</span>
            <span class="k">return</span> <span class="kc">false</span>
        <span class="p">}</span>
    <span class="p">}</span>
</code></pre></div></div>

<p><br /></p>

<h2 id="4-다른-상품-보기">4. 다른 상품 보기</h2>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="c1">// MARK: - 다른 상품 보기 버튼 선택</span>
    <span class="kd">@IBAction</span> <span class="kd">func</span> <span class="nf">otherProductButtonTapped</span><span class="p">(</span><span class="n">_</span> <span class="nv">sender</span><span class="p">:</span> <span class="kt">UIButton</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="nf">getData</span><span class="p">()</span>
    <span class="p">}</span>
</code></pre></div></div>

<h2 id="5-위시리스트보기">5. 위시리스트보기</h2>
<ul>
  <li>viewController와 별개로 WishListViewController파일을 추가하였습니다.</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">CoreData</span>

<span class="kd">class</span> <span class="kt">WishListViewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>
    <span class="c1">// MARK: - 코어데이터를 사용하기 위한 설정</span>
    <span class="k">var</span> <span class="nv">persistentContainer</span><span class="p">:</span> <span class="kt">NSPersistentContainer</span><span class="p">?</span> <span class="p">{</span>
        <span class="p">(</span><span class="kt">UIApplication</span><span class="o">.</span><span class="n">shared</span><span class="o">.</span><span class="n">delegate</span> <span class="k">as?</span> <span class="kt">AppDelegate</span><span class="p">)?</span><span class="o">.</span><span class="n">persistentContainer</span>
    <span class="p">}</span>
    <span class="k">var</span> <span class="nv">productList</span><span class="p">:</span> <span class="p">[</span><span class="kt">MyWishList</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>  <span class="c1">//코어데이터를 가져와 배열에 담기 </span>
    
    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">wishListTableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="o">!</span>
    
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>
        <span class="n">wishListTableView</span><span class="o">.</span><span class="n">dataSource</span> <span class="o">=</span> <span class="k">self</span> <span class="c1">//데이터소스 설정 </span>
                
        <span class="nf">getCoreData</span><span class="p">()</span>   <span class="c1">//데이터가져오기 </span>
    <span class="p">}</span>
    <span class="c1">//나머지 코드 생략 </span>
<span class="p">}</span>
</code></pre></div></div>

<p><br /></p>

<h3 id="코어데이터-가져오기">코어데이터 가져오기</h3>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="c1">// MARK: - CoreData에서 데이터 가져오기</span>
    <span class="kd">func</span> <span class="nf">getCoreData</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">guard</span> <span class="k">let</span> <span class="nv">context</span> <span class="o">=</span> <span class="k">self</span><span class="o">.</span><span class="n">persistentContainer</span><span class="p">?</span><span class="o">.</span><span class="n">viewContext</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
    
        <span class="k">let</span> <span class="nv">request</span> <span class="o">=</span> <span class="kt">MyWishList</span><span class="o">.</span><span class="nf">fetchRequest</span><span class="p">()</span>
    
        <span class="k">if</span> <span class="k">let</span> <span class="nv">products</span> <span class="o">=</span> <span class="k">try</span><span class="p">?</span> <span class="n">context</span><span class="o">.</span><span class="nf">fetch</span><span class="p">(</span><span class="n">request</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">self</span><span class="o">.</span><span class="n">productList</span> <span class="o">=</span> <span class="n">products</span>
        <span class="p">}</span>
    <span class="p">}</span>
</code></pre></div></div>

<h3 id="tableview-data-source-추가">tableView Data Source 추가</h3>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">extension</span> <span class="kt">WishListViewController</span><span class="p">:</span> <span class="kt">UITableViewDataSource</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">numberOfRowsInSection</span> <span class="nv">section</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">productList</span><span class="o">.</span><span class="n">count</span>
    <span class="p">}</span>
    
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">cellForRowAt</span> <span class="nv">indexPath</span><span class="p">:</span> <span class="kt">IndexPath</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">UITableViewCell</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">cell</span> <span class="o">=</span> <span class="n">tableView</span><span class="o">.</span><span class="nf">dequeueReusableCell</span><span class="p">(</span><span class="nv">withIdentifier</span><span class="p">:</span> <span class="s">"WishListTableViewCell"</span><span class="p">,</span> <span class="nv">for</span><span class="p">:</span> <span class="n">indexPath</span><span class="p">)</span> <span class="k">as?</span> <span class="kt">WishListTableViewCell</span>
                
        <span class="k">let</span> <span class="nv">id</span> <span class="o">=</span> <span class="s">"["</span> <span class="o">+</span> <span class="p">(</span><span class="n">productList</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="p">]</span><span class="o">.</span><span class="n">id</span> <span class="p">??</span> <span class="s">""</span><span class="p">)</span> <span class="o">+</span> <span class="s">"]"</span>
        <span class="k">let</span> <span class="nv">title</span> <span class="o">=</span> <span class="n">productList</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="p">]</span><span class="o">.</span><span class="n">title</span>
        <span class="k">let</span> <span class="nv">price</span> <span class="o">=</span> <span class="n">productList</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="p">]</span><span class="o">.</span><span class="n">price</span>
        
        <span class="n">cell</span><span class="p">?</span><span class="o">.</span><span class="n">productIdLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">id</span>
        <span class="n">cell</span><span class="p">?</span><span class="o">.</span><span class="n">productTitleLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">title</span>
        <span class="n">cell</span><span class="p">?</span><span class="o">.</span><span class="n">productPriceLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">price</span>
        
        <span class="k">return</span> <span class="n">cell</span> <span class="p">??</span> <span class="kt">UITableViewCell</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h1 id="실행화면">실행화면</h1>
<ul>
  <li>메인화면, 다른상품보기, 위시리스트 확인 화면입니다.</li>
</ul>

<p><img src="../../assets/images/categories/sparta/2024-04-16-wishList3.png" art="메인" width="200" />
<img src="../../assets/images/categories/sparta/2024-04-16-wishList4.png" art="다른상품보기" width="200" />
<img src="../../assets/images/categories/sparta/2024-04-16-wishList5.png" art="위시리스트확인" width="200" /></p>

<p><br /></p>

<h1 id="실행영상">실행영상</h1>
<video width="640" height="360" controls="">
    <source src="../../assets/video/categories/sparta/2024-04-16-wishList1.mov" type="video/mp4" />
</video>

<p><br /></p>

<h1 id="마무리">마무리</h1>
<ul>
  <li>가격에 , 추가해야하는데 빼먹어버렸다. 내일 다시 추가할 예정</li>
  <li>필수 과제까지는 완료했는데 선택과제도 내일 다시 구현 에정</li>
  <li>⭐️⭐️ 데이터가져오기 및 코어데이터 사용은 강의 예제와 동일해서 많이 사용해보고 익숙해져야겠다. ⭐️⭐️</li>
</ul>]]></content><author><name>HyeongSub Lim</name></author><category term="sparta" /><category term="sparta" /><category term="앱 개발 숙련" /><category term="WishList" /><category term="ios" /><category term="uikit" /><category term="swift" /><summary type="html"><![CDATA[iOS 앱 개발 숙련 개인 과제 - WishList 앱 만들기 1]]></summary></entry><entry><title type="html">[UIKit] URLSession이란?</title><link href="http://localhost:4000/UIKit/URLSession/" rel="alternate" type="text/html" title="[UIKit] URLSession이란?" /><published>2024-04-13T00:00:00+09:00</published><updated>2024-04-13T00:00:00+09:00</updated><id>http://localhost:4000/UIKit/URLSession</id><content type="html" xml:base="http://localhost:4000/UIKit/URLSession/"><![CDATA[<h1 id="urlsession이란">URLSession이란?</h1>
<ul>
  <li>Swift에서 URLSession은 네트워크 작업을 수행하기 위한 핵심 클래스입니다. 이 클래스를 사용하여 HTTP 및 HTTPS를 통한 데이터를 전송하고, 데이터를 다운로드하거나 업로드하며, 기타 네트워크 관련 작업을 처리할 수 있습니다.</li>
</ul>

<h1 id="urlsession의-주요-특징">URLSession의 주요 특징</h1>
<ul>
  <li><strong>비동기적 네트워킹 (Asynchronous Networking)</strong>
URLSession은 비동기적으로 네트워크 요청을 처리하므로, 네트워크 작업이 백그라운드에서 수행될 수 있습니다. 
이는 앱의 성능을 향상시키고 응답성을 유지하는 데 도움이 됩니다.</li>
  <li><strong>다양한 데이터 전송 방식 지원</strong>
URLSession을 사용하여 데이터를 업로드하거나 다운로드할 수 있으며, JSON, 이미지, 파일 등 다양한 데이터 형식을 처리할 수 있습니다. 
이번 숙련 챕터에서의 예제는 JSON 데이터를 다운로드하여 사용합니다.</li>
  <li><strong>캐시와 쿠키 관리</strong>
URLSession은 네트워크 응답을 캐싱하고 쿠키를 관리할 수 있는 기능을 제공합니다.</li>
</ul>

<h1 id="예제코드">예제코드</h1>
<ul>
  <li>깃허브 API를 통해 JSON형식으로 구성된 깃허브 프로필 정보 가져와 Xcode에서 출력하는 예제입니다.</li>
</ul>

<h2 id="1-github-프로필-정보-확인">1. GitHub 프로필 정보 확인</h2>
<ul>
  <li>아래 주소로 접속하면 데이터를 확인할 수 있습니다.</li>
  <li>https://api.github.com/users/깃허브아이디</li>
</ul>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"login"</span><span class="p">:</span><span class="w"> </span><span class="s2">"limlogging"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="mi">156410026</span><span class="p">,</span><span class="w">
  </span><span class="nl">"node_id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"U_kgDOCVKgqg"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"avatar_url"</span><span class="p">:</span><span class="w"> </span><span class="s2">"https://avatars.githubusercontent.com/u/156410026?v=4"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"gravatar_id"</span><span class="p">:</span><span class="w"> </span><span class="s2">""</span><span class="p">,</span><span class="w">
  </span><span class="nl">"url"</span><span class="p">:</span><span class="w"> </span><span class="s2">"https://api.github.com/users/limlogging"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"html_url"</span><span class="p">:</span><span class="w"> </span><span class="s2">"https://github.com/limlogging"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"followers_url"</span><span class="p">:</span><span class="w"> </span><span class="s2">"https://api.github.com/users/limlogging/followers"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"following_url"</span><span class="p">:</span><span class="w"> </span><span class="s2">"https://api.github.com/users/limlogging/following{/other_user}"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"gists_url"</span><span class="p">:</span><span class="w"> </span><span class="s2">"https://api.github.com/users/limlogging/gists{/gist_id}"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"starred_url"</span><span class="p">:</span><span class="w"> </span><span class="s2">"https://api.github.com/users/limlogging/starred{/owner}{/repo}"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"subscriptions_url"</span><span class="p">:</span><span class="w"> </span><span class="s2">"https://api.github.com/users/limlogging/subscriptions"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"organizations_url"</span><span class="p">:</span><span class="w"> </span><span class="s2">"https://api.github.com/users/limlogging/orgs"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"repos_url"</span><span class="p">:</span><span class="w"> </span><span class="s2">"https://api.github.com/users/limlogging/repos"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"events_url"</span><span class="p">:</span><span class="w"> </span><span class="s2">"https://api.github.com/users/limlogging/events{/privacy}"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"received_events_url"</span><span class="p">:</span><span class="w"> </span><span class="s2">"https://api.github.com/users/limlogging/received_events"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"User"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"site_admin"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
  </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"HyeongSub Lim"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"company"</span><span class="p">:</span><span class="w"> </span><span class="kc">null</span><span class="p">,</span><span class="w">
  </span><span class="nl">"blog"</span><span class="p">:</span><span class="w"> </span><span class="s2">""</span><span class="p">,</span><span class="w">
  </span><span class="nl">"location"</span><span class="p">:</span><span class="w"> </span><span class="kc">null</span><span class="p">,</span><span class="w">
  </span><span class="nl">"email"</span><span class="p">:</span><span class="w"> </span><span class="kc">null</span><span class="p">,</span><span class="w">
  </span><span class="nl">"hireable"</span><span class="p">:</span><span class="w"> </span><span class="kc">null</span><span class="p">,</span><span class="w">
  </span><span class="nl">"bio"</span><span class="p">:</span><span class="w"> </span><span class="kc">null</span><span class="p">,</span><span class="w">
  </span><span class="nl">"twitter_username"</span><span class="p">:</span><span class="w"> </span><span class="kc">null</span><span class="p">,</span><span class="w">
  </span><span class="nl">"public_repos"</span><span class="p">:</span><span class="w"> </span><span class="mi">10</span><span class="p">,</span><span class="w">
  </span><span class="nl">"public_gists"</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w">
  </span><span class="nl">"followers"</span><span class="p">:</span><span class="w"> </span><span class="mi">5</span><span class="p">,</span><span class="w">
  </span><span class="nl">"following"</span><span class="p">:</span><span class="w"> </span><span class="mi">8</span><span class="p">,</span><span class="w">
  </span><span class="nl">"created_at"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2024-01-12T07:38:28Z"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"updated_at"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2024-03-31T05:44:31Z"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<h2 id="2-프로필-정보를-담을-구조체-정의">2. 프로필 정보를 담을 구조체 정의</h2>
<ul>
  <li>깃허브 api주소에서 확인한 key 값으로 구조체 변수를 정의합니다.</li>
  <li>swift에서 카멜케이스를 사용하는데 image의 경우 키 값이 avatar_url이라 CodingKey를 사용하여 카멜케이스로 변경합니다.</li>
  <li>프로토콜
    <ul>
      <li>Codable
        <ul>
          <li>Codable은 Swift 4에서 추가된 프로토콜</li>
          <li>Codable은 Encodable과 Decodable을 결합한 것</li>
          <li>데이터를 쉽게 인코딩(직렬화) 및 디코딩(역직렬화)할 수 있도록 도와줌</li>
        </ul>
      </li>
      <li>Encodable
        <ul>
          <li>타입을 JSON이나 다른 형식으로 인코딩할 수 있도록 함</li>
        </ul>
      </li>
      <li>Decodable
        <ul>
          <li>JSON이나 다른 형식의 데이터를 타입으로 디코딩할 수 있도록 함</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">struct</span> <span class="kt">GitHubProfile</span><span class="p">:</span> <span class="kt">Codable</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">login</span><span class="p">:</span> <span class="kt">String</span>           <span class="c1">// GitHub 사용자의 로그인 이름</span>
    <span class="k">let</span> <span class="nv">profileImage</span><span class="p">:</span> <span class="kt">String</span>    <span class="c1">// GitHub 사용자의 프로필 이미지 URL</span>

    <span class="c1">// CodingKeys 열거형: JSON 데이터와 구조체 속성 간의 매핑을 지정</span>
    <span class="kd">enum</span> <span class="kt">CodingKeys</span><span class="p">:</span> <span class="kt">String</span><span class="p">,</span> <span class="kt">CodingKey</span> <span class="p">{</span>
        <span class="k">case</span> <span class="n">login</span> <span class="c1">// login 속성은 JSON의 login 키와 매핑</span>
        <span class="k">case</span> <span class="n">profileImage</span> <span class="o">=</span> <span class="s">"avatar_url"</span> <span class="c1">// profileImage 속성은 JSON의 avatar_url 키와 매핑</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="3-데이터를-받아오고-저장하기">3. 데이터를 받아오고 저장하기</h2>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">GitHubProfileViewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>
    <span class="c1">// GitHub 사용자 프로필 정보를 가져올 URL</span>
    <span class="k">let</span> <span class="nv">url</span><span class="p">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="s">"https://api.github.com/users/limlogging"</span>
    
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>
        <span class="c1">// GitHub 프로필 정보를 가져오는 함수 호출</span>
        <span class="nf">getGitHubProfile</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
    <span class="p">}</span>
    
    <span class="c1">// GitHub 프로필 정보를 가져오는 함수 정의</span>
    <span class="kd">func</span> <span class="nf">getGitHubProfile</span><span class="p">(</span><span class="n">_</span> <span class="nv">urlString</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// URL 문자열을 URL 객체로 변환</span>
        <span class="k">guard</span> <span class="k">let</span> <span class="nv">url</span> <span class="o">=</span> <span class="kt">URL</span><span class="p">(</span><span class="nv">string</span><span class="p">:</span> <span class="n">urlString</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
        
        <span class="c1">// URLSession 객체 생성: HTTP 요청을 수행하기 위한 세션</span>
        <span class="k">let</span> <span class="nv">session</span> <span class="o">=</span> <span class="kt">URLSession</span><span class="p">(</span><span class="nv">configuration</span><span class="p">:</span> <span class="o">.</span><span class="k">default</span><span class="p">)</span>
        
        <span class="c1">// 데이터 태스크 생성: 비동기적으로 URL로부터 데이터를 가져옴</span>
        <span class="k">let</span> <span class="nv">task</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="nf">dataTask</span><span class="p">(</span><span class="nv">with</span><span class="p">:</span> <span class="n">url</span><span class="p">)</span> <span class="p">{</span>
            <span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">response</span><span class="p">,</span> <span class="n">error</span><span class="p">)</span> <span class="k">in</span>
            <span class="k">if</span> <span class="k">let</span> <span class="nv">error</span> <span class="o">=</span> <span class="n">error</span> <span class="p">{</span>
                <span class="c1">// 에러가 발생한 경우 에러 메시지 출력</span>
                <span class="nf">print</span><span class="p">(</span><span class="n">error</span><span class="p">)</span>
            <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="k">let</span> <span class="nv">data</span> <span class="o">=</span> <span class="n">data</span> <span class="p">{</span>
                <span class="k">do</span> <span class="p">{</span>
                    <span class="c1">// JSON 데이터를 GitHubProfile 구조체로 디코딩</span>
                    <span class="k">let</span> <span class="nv">gitHubProfile</span> <span class="o">=</span> <span class="k">try</span> <span class="kt">JSONDecoder</span><span class="p">()</span><span class="o">.</span><span class="nf">decode</span><span class="p">(</span><span class="kt">GitHubProfile</span><span class="o">.</span><span class="k">self</span><span class="p">,</span> <span class="nv">from</span><span class="p">:</span> <span class="n">data</span><span class="p">)</span>
                    <span class="c1">// 디코딩된 GitHub 프로필 정보 출력</span>
                    <span class="nf">print</span><span class="p">(</span><span class="s">"login: </span><span class="se">\(</span><span class="n">gitHubProfile</span><span class="o">.</span><span class="n">login</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
                    <span class="nf">print</span><span class="p">(</span><span class="s">"profileImage: </span><span class="se">\(</span><span class="n">gitHubProfile</span><span class="o">.</span><span class="n">profileImage</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
                <span class="p">}</span> <span class="k">catch</span> <span class="p">{</span>
                    <span class="c1">// 디코딩 실패 시 에러 메시지 출력</span>
                    <span class="nf">print</span><span class="p">(</span><span class="s">"Decode Error: </span><span class="se">\(</span><span class="n">error</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="c1">// 데이터 태스크 시작</span>
        <span class="n">task</span><span class="o">.</span><span class="nf">resume</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="4-출력결과">4. 출력결과</h2>
<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">login: limlogging
profileImage: https://avatars.githubusercontent.com/u/156410026?v=4
</span></code></pre></div></div>

<h1 id="마무리">마무리</h1>
<ul>
  <li>URL: 요청할 URL 생성, GitHub API의 사용자 프로필 정보를 가져올 URL을 저장</li>
  <li>session: URLSession 객체를 생성하여 HTTP 요청을 수행하기 위한 세션을 설정</li>
  <li>dataTask: URLSession 객체를 사용하여 비동기적으로 데이터를 가져오는 데이터 태스크를 생성. 클로저를 활용하여 데이터를 받아온 후의 동작을 지정</li>
  <li>resume: 데이터 태스크를 시작하여 비동기적으로 데이터를 가져오는 작업을 실행</li>
</ul>]]></content><author><name>HyeongSub Lim</name></author><category term="UIKit" /><category term="swift" /><category term="iOS" /><category term="URLSession" /><summary type="html"><![CDATA[URLSession과 예제코드]]></summary></entry><entry><title type="html">[프로그래머스/Swift] 옹알이(2)</title><link href="http://localhost:4000/algorithm/%EC%98%B9%EC%95%8C%EC%9D%B4(2)/" rel="alternate" type="text/html" title="[프로그래머스/Swift] 옹알이(2)" /><published>2024-04-13T00:00:00+09:00</published><updated>2024-04-13T00:00:00+09:00</updated><id>http://localhost:4000/algorithm/%EC%98%B9%EC%95%8C%EC%9D%B4(2)</id><content type="html" xml:base="http://localhost:4000/algorithm/%EC%98%B9%EC%95%8C%EC%9D%B4(2)/"><![CDATA[<h1 id="문제-설명">문제 설명</h1>
<ul>
  <li>
    <p>머쓱이는 태어난 지 11개월 된 조카를 돌보고 있습니다. 조카는 아직 “aya”, “ye”, “woo”, “ma” 네 가지 발음과 네 가지 발음을 조합해서 만들 수 있는 발음밖에 하지 못하고 연속해서 같은 발음을 하는 것을 어려워합니다. 문자열 배열 babbling이 매개변수로 주어질 때, 머쓱이의 조카가 발음할 수 있는 단어의 개수를 return하도록 solution 함수를 완성해주세요.</p>
  </li>
  <li>
    <p><a href="https://school.programmers.co.kr/learn/courses/30/lessons/133499" target="_blank">문제 풀기</a></p>
  </li>
</ul>

<h1 id="제한사항">제한사항</h1>
<ul>
  <li>1 ≤ babbling의 길이 ≤ 100</li>
  <li>1 ≤ babbling[i]의 길이 ≤ 30</li>
  <li>문자열은 알파벳 소문자로만 이루어져 있습니다.</li>
</ul>

<h1 id="입출력-예">입출력 예</h1>

<table>
  <thead>
    <tr>
      <th style="text-align: center">babbling</th>
      <th style="text-align: center">result</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">[“aya”, “yee”, “u”, “maa”]</td>
      <td style="text-align: center">1</td>
    </tr>
    <tr>
      <td style="text-align: center">[“ayaye”, “uuu”, “yeye”, “yemawoo”, “ayaayaa”]</td>
      <td style="text-align: center">2</td>
    </tr>
  </tbody>
</table>

<h2 id="입출력-예-설명">입출력 예 설명</h2>
<h3 id="입출력-예-1">입출력 예 #1</h3>
<ul>
  <li>[“aya”, “yee”, “u”, “maa”]에서 발음할 수 있는 것은 “aya”뿐입니다. 따라서 1을 return합니다.</li>
</ul>

<h3 id="입출력-예-2">입출력 예 #2</h3>
<ul>
  <li>[“ayaye”, “uuu”, “yeye”, “yemawoo”, “ayaayaa”]에서 발음할 수 있는 것은 “aya” + “ye” = “ayaye”, “ye” + “ma” + “woo” = “yemawoo”로 2개입니다. “yeye”는 같은 발음이 연속되므로 발음할 수 없습니다. 따라서 2를 return합니다.</li>
</ul>

<h1 id="유의사항">유의사항</h1>
<ul>
  <li>네 가지를 붙여 만들 수 있는 발음 이외에는 어떤 발음도 할 수 없는 것으로 규정합니다. 예를 들어 “woowo”는 “woo”는 발음할 수 있지만 “wo”를 발음할 수 없기 때문에 할 수 없는 발음입니다.</li>
</ul>

<h1 id="나의-풀이">나의 풀이</h1>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">Foundation</span>

<span class="kd">func</span> <span class="nf">solution</span><span class="p">(</span><span class="n">_</span> <span class="nv">babbling</span><span class="p">:[</span><span class="kt">String</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">mussuk</span><span class="p">:</span> <span class="p">[</span><span class="kt">String</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="s">"aya"</span><span class="p">,</span> <span class="s">"ye"</span><span class="p">,</span> <span class="s">"woo"</span><span class="p">,</span> <span class="s">"ma"</span><span class="p">]</span>
    <span class="k">var</span> <span class="nv">overlapFlag</span><span class="p">:</span> <span class="kt">Bool</span> <span class="o">=</span> <span class="kc">false</span>
    <span class="k">var</span> <span class="nv">cnt</span><span class="p">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">0</span>
    
    <span class="k">for</span> <span class="n">word</span> <span class="k">in</span> <span class="n">babbling</span> <span class="p">{</span>
        <span class="k">for</span> <span class="n">babyWord</span> <span class="k">in</span> <span class="n">mussuk</span> <span class="p">{</span>
            <span class="c1">//중복 확인</span>
            <span class="k">if</span> <span class="n">word</span><span class="o">.</span><span class="nf">contains</span><span class="p">(</span><span class="n">babyWord</span> <span class="o">+</span> <span class="n">babyWord</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">overlapFlag</span> <span class="o">=</span> <span class="kc">true</span>
            <span class="p">}</span>
        <span class="p">}</span>
        
        <span class="k">if</span> <span class="n">overlapFlag</span> <span class="p">{</span>
            <span class="n">overlapFlag</span> <span class="o">=</span> <span class="kc">false</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="c1">//중복이 아니면 단어체크</span>
            <span class="c1">//print("체크할 단어: \(word)")</span>
            <span class="k">var</span> <span class="nv">tempWord</span><span class="p">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="n">word</span>
            <span class="k">for</span> <span class="n">babyWord</span> <span class="k">in</span> <span class="n">mussuk</span> <span class="p">{</span>
                <span class="n">tempWord</span> <span class="o">=</span> <span class="n">tempWord</span><span class="o">.</span><span class="nf">replacingOccurrences</span><span class="p">(</span><span class="nv">of</span><span class="p">:</span> <span class="n">babyWord</span><span class="p">,</span> <span class="nv">with</span><span class="p">:</span> <span class="s">"."</span><span class="p">)</span>
            <span class="p">}</span>
            
            <span class="c1">//.으로만 된 단어는 발음 가능</span>
            <span class="k">if</span> <span class="n">tempWord</span><span class="o">.</span><span class="nf">allSatisfy</span><span class="p">({</span> <span class="nv">$0</span> <span class="o">==</span> <span class="s">"."</span> <span class="p">})</span> <span class="p">{</span>
                <span class="n">cnt</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="k">return</span> <span class="n">cnt</span>
<span class="p">}</span>
</code></pre></div></div>

<h1 id="다른-사람-풀이">다른 사람 풀이</h1>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">Foundation</span>

<span class="kd">func</span> <span class="nf">solution</span><span class="p">(</span><span class="n">_</span> <span class="nv">babbling</span><span class="p">:[</span><span class="kt">String</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">count</span><span class="p">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">element</span> <span class="k">in</span> <span class="n">babbling</span> <span class="p">{</span>
        <span class="k">var</span> <span class="nv">str</span> <span class="o">=</span> <span class="kt">String</span><span class="p">(</span><span class="n">element</span><span class="p">)</span>
        <span class="n">str</span> <span class="o">=</span> <span class="n">str</span><span class="o">.</span><span class="nf">replacingOccurrences</span><span class="p">(</span><span class="nv">of</span><span class="p">:</span> <span class="s">"aya"</span><span class="p">,</span> <span class="nv">with</span><span class="p">:</span> <span class="s">"1"</span><span class="p">)</span>
        <span class="n">str</span> <span class="o">=</span> <span class="n">str</span><span class="o">.</span><span class="nf">replacingOccurrences</span><span class="p">(</span><span class="nv">of</span><span class="p">:</span> <span class="s">"ye"</span><span class="p">,</span> <span class="nv">with</span><span class="p">:</span> <span class="s">"2"</span><span class="p">)</span>
        <span class="n">str</span> <span class="o">=</span> <span class="n">str</span><span class="o">.</span><span class="nf">replacingOccurrences</span><span class="p">(</span><span class="nv">of</span><span class="p">:</span> <span class="s">"woo"</span><span class="p">,</span> <span class="nv">with</span><span class="p">:</span> <span class="s">"3"</span><span class="p">)</span>
        <span class="n">str</span> <span class="o">=</span> <span class="n">str</span><span class="o">.</span><span class="nf">replacingOccurrences</span><span class="p">(</span><span class="nv">of</span><span class="p">:</span> <span class="s">"ma"</span><span class="p">,</span> <span class="nv">with</span><span class="p">:</span> <span class="s">"4"</span><span class="p">)</span>
        <span class="k">if</span> <span class="kt">Int</span><span class="p">(</span><span class="n">str</span><span class="p">)</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">str</span><span class="o">.</span><span class="nf">contains</span><span class="p">(</span><span class="s">"11"</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">str</span><span class="o">.</span><span class="nf">contains</span><span class="p">(</span><span class="s">"22"</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">str</span><span class="o">.</span><span class="nf">contains</span><span class="p">(</span><span class="s">"33"</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">str</span><span class="o">.</span><span class="nf">contains</span><span class="p">(</span><span class="s">"44"</span><span class="p">){</span>
            <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="p">}</span>
    <span class="p">}</span>    
    <span class="k">return</span> <span class="n">count</span>
<span class="p">}</span>
</code></pre></div></div>

<h1 id="나의-풀이방법">나의 풀이방법</h1>
<ul>
  <li>중복해서 나오는 단어를 찾아서 발음할 수 있는 단어에서 제외시키기</li>
  <li>발음 가능한 단어를 .으로 바꿔버리기</li>
  <li>문자열을 이루는 문자가 .으로만 이루어진 경우 발음 가능 카운트</li>
  <li>contains, replacingOccurrences, allSatisfy 컬렉션에 대해 작동하는 메서드를 잘 사용한것 같아 개인적으로는 만족스러웠다.</li>
</ul>

<p><br /></p>

<h1 id="다른사람-풀이">다른사람 풀이</h1>
<ul>
  <li>다른 풀이도 replacingOccurrences을 사용해서 많이 푼 것 같다.</li>
</ul>]]></content><author><name>HyeongSub Lim</name></author><category term="Algorithm" /><category term="Algorithm" /><category term="swift" /><category term="coding test" /><category term="프로그래머스" /><category term="알고리즘" /><category term="옹알이" /><summary type="html"><![CDATA[[프로그래머스/Swift] 옹알이(2)]]></summary></entry><entry><title type="html">[TIL] 내배캠 iOS앱 개발 공부 33일차 - 2024.04.12</title><link href="http://localhost:4000/TIL/til33/" rel="alternate" type="text/html" title="[TIL] 내배캠 iOS앱 개발 공부 33일차 - 2024.04.12" /><published>2024-04-12T00:00:00+09:00</published><updated>2024-04-12T00:00:00+09:00</updated><id>http://localhost:4000/TIL/til33</id><content type="html" xml:base="http://localhost:4000/TIL/til33/"><![CDATA[<h3 id="알고리즘">알고리즘</h3>
<ul>
  <li>오늘의 알고리즘 문제는 1시간정도 고민했는데 생각보다 풀리지 않아서 못 풀었다.</li>
  <li>갈수록 어려워지는건지 .. 밑천이 들어나는건지 .. 고차함수를 다시 복습해야겠다.</li>
</ul>

<h3 id="챌린지반-과제">챌린지반 과제</h3>
<ul>
  <li>1차 제출은 했는데 튜터님이 피드백을 주셨다. 피드백 주신내용으로 다시 수정해볼예정 ㅠ ㅠ</li>
  <li><a href="https://limlogging.github.io/sparta/%EC%B1%8C%EB%A6%B0%EC%A7%80%EB%B0%98%EA%B3%BC%EC%A0%9C1-1/" target="_blank">챌린지반 과제 1차 제출</a></li>
</ul>

<h3 id="내일-목표">내일 목표</h3>
<ul>
  <li>개인 과제 시작하기 , 챌린지 과제 마저 수정하기 , 깃 ,, 알고리즘 …</li>
</ul>]]></content><author><name>HyeongSub Lim</name></author><category term="TIL" /><category term="TIL" /><summary type="html"><![CDATA[내배캠 iOS앱 개발 공부 33일차 이야기 - 2024.04.12]]></summary></entry><entry><title type="html">[내배캠] 챌린지반 과제 1차 제출 - GitHub App 만들기</title><link href="http://localhost:4000/sparta/%EC%B1%8C%EB%A6%B0%EC%A7%80%EB%B0%98%EA%B3%BC%EC%A0%9C1-1/" rel="alternate" type="text/html" title="[내배캠] 챌린지반 과제 1차 제출 - GitHub App 만들기" /><published>2024-04-12T00:00:00+09:00</published><updated>2024-04-12T00:00:00+09:00</updated><id>http://localhost:4000/sparta/%EC%B1%8C%EB%A6%B0%EC%A7%80%EB%B0%98%EA%B3%BC%EC%A0%9C1-1</id><content type="html" xml:base="http://localhost:4000/sparta/%EC%B1%8C%EB%A6%B0%EC%A7%80%EB%B0%98%EA%B3%BC%EC%A0%9C1-1/"><![CDATA[<h1 id="챌린지반-과제-목표">챌린지반 과제 목표</h1>
<ul>
  <li>본인의 깃허브 프로필 페이지를 만들어주세요.</li>
  <li>화면 상단에는 프로필 상세 정보가 출력되고 아래는 Repository 목록이 출력되는 앱을 만들어주세요.</li>
  <li>Repository 목록은 페이징 처리를 위하여 본인 Repository를 가져온 후 apple의 Repository를 붙여주세요.</li>
</ul>

<p><br /></p>

<h1 id="요구사항">요구사항</h1>
<ul>
  <li>iOS 15 이상</li>
  <li>Swift 5 이상</li>
  <li>git을 사용해주세요.</li>
  <li>README를 작성해주세요.</li>
  <li>가능하다면 MVC 아키텍처를 사용해주세요.
    <ul>
      <li>기본 iOS에서 제공하는 ViewController를 사용하면 됩니다.</li>
    </ul>
  </li>
  <li>오픈소스 라이브러리는 아래의 룰을 따라주세요.
    <ul>
      <li>필수 사용
        <ul>
          <li>Alamofire</li>
          <li>KingFisher or SDWebImage</li>
        </ul>
      </li>
      <li>아래의 라이브러리는 사용하지 마세요.
        <ul>
          <li>RxSwift, RxCocoa, Rx…..</li>
          <li>Moya</li>
          <li>SnapKit</li>
        </ul>
      </li>
      <li>그 외의 라이브러리는 사용하셔도 됩니다. 단 사용하시면 나중에 이유를 설명할 수 있어야 합니다.</li>
    </ul>
  </li>
  <li>Pull To Refresh 기능 구현해주세요.</li>
  <li>다음 페이지 스크롤링 가능하게 해주세요.(페이징처리)</li>
  <li>디자인은 Code, Storyboard 편하신 방법으로 하시면 됩니다.
    <ul>
      <li>단 Code 작성할 때 Frame 기반은 지양해주세요.</li>
    </ul>
  </li>
  <li>TableView나 CollectionView를 사용해주세요.
    <ul>
      <li>Delegate, DataSource를 사용해주세요.</li>
    </ul>
  </li>
  <li>디자인은 과제채점에 영향을 주지 않습니다.</li>
</ul>

<p><br /></p>

<h1 id="라이브러리-설치">라이브러리 설치</h1>
<ul>
  <li><a href="https://limlogging.github.io/UIKit/cocoapods/" target="_blank">코코아팟(cocoapods) 설치하기</a></li>
  <li><a href="https://limlogging.github.io/UIKit/alamofire/" target="_blank">알라모파이어(alamofire) 설치하기</a></li>
  <li><a href="https://limlogging.github.io/UIKit/SDWebImage/" target="_blank">SDWebImage 설치하기</a></li>
</ul>

<p><br /></p>

<h1 id="새로고침-기능">새로고침 기능</h1>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// MARK: - viewDidLoad()</span>
<span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>
    <span class="c1">//Pull to refresh 추가</span>
    <span class="nf">tableViewRefresh</span><span class="p">()</span>
<span class="p">}</span>

<span class="c1">// MARK: - Pull to refresh 컨트롤 추가</span>
<span class="kd">func</span> <span class="nf">tableViewRefresh</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">refreshControl</span> <span class="o">=</span> <span class="kt">UIRefreshControl</span><span class="p">()</span>
    <span class="n">refreshControl</span><span class="o">.</span><span class="n">attributedTitle</span> <span class="o">=</span> <span class="kt">NSAttributedString</span><span class="p">(</span><span class="nv">string</span><span class="p">:</span> <span class="s">"새로고침"</span><span class="p">)</span>
    <span class="n">refreshControl</span><span class="o">.</span><span class="nf">addTarget</span><span class="p">(</span><span class="k">self</span><span class="p">,</span> <span class="nv">action</span><span class="p">:</span> <span class="k">#selector</span><span class="p">(</span><span class="n">refreshData</span><span class="p">),</span> <span class="nv">for</span><span class="p">:</span> <span class="o">.</span><span class="n">valueChanged</span><span class="p">)</span>
    <span class="n">repositoriesTableView</span><span class="o">.</span><span class="n">refreshControl</span> <span class="o">=</span> <span class="n">refreshControl</span>
<span class="p">}</span>

<span class="c1">// MARK: - pull to refresh 메서드</span>
<span class="kd">@objc</span> <span class="kd">func</span> <span class="nf">refreshData</span><span class="p">()</span> <span class="p">{</span>
    <span class="kt">DispatchQueue</span><span class="o">.</span><span class="n">main</span><span class="o">.</span><span class="nf">asyncAfter</span><span class="p">(</span><span class="nv">deadline</span><span class="p">:</span> <span class="o">.</span><span class="nf">now</span><span class="p">()</span> <span class="o">+</span> <span class="mf">1.0</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// 테이블 뷰 리로드</span>
        <span class="k">self</span><span class="o">.</span><span class="n">repositoriesTableView</span><span class="o">.</span><span class="nf">reloadData</span><span class="p">()</span>
        <span class="c1">// UIRefreshControl 종료</span>
        <span class="k">self</span><span class="o">.</span><span class="n">repositoriesTableView</span><span class="o">.</span><span class="n">refreshControl</span><span class="p">?</span><span class="o">.</span><span class="nf">endRefreshing</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><br /></p>

<h1 id="깃허브에서-정보-가져오기">깃허브에서 정보 가져오기</h1>
<h2 id="프로필">프로필</h2>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// MARK: - 깃허브에서 프로필 정보 가져오기</span>
<span class="kd">func</span> <span class="nf">getGithubProfile</span><span class="p">()</span> <span class="p">{</span>
    <span class="kt">AF</span><span class="o">.</span><span class="nf">request</span><span class="p">(</span><span class="n">profileUrl</span><span class="p">)</span><span class="o">.</span><span class="n">responseJSON</span> <span class="p">{</span> <span class="n">response</span> <span class="k">in</span>
        <span class="k">switch</span> <span class="n">response</span><span class="o">.</span><span class="n">result</span> <span class="p">{</span>
        <span class="k">case</span><span class="o">.</span><span class="nf">success</span><span class="p">(</span><span class="k">let</span> <span class="nv">value</span><span class="p">):</span>
            <span class="k">if</span> <span class="k">let</span> <span class="nv">json</span> <span class="o">=</span> <span class="n">value</span> <span class="k">as?</span> <span class="p">[</span><span class="kt">String</span><span class="p">:</span> <span class="kt">Any</span><span class="p">],</span>
                <span class="k">let</span> <span class="nv">name</span> <span class="o">=</span> <span class="n">json</span><span class="p">[</span><span class="s">"name"</span><span class="p">]</span> <span class="k">as?</span> <span class="kt">String</span><span class="p">,</span>
                <span class="k">let</span> <span class="nv">login</span> <span class="o">=</span> <span class="n">json</span><span class="p">[</span><span class="s">"login"</span><span class="p">]</span> <span class="k">as?</span> <span class="kt">String</span><span class="p">,</span>
                <span class="k">let</span> <span class="nv">followers</span> <span class="o">=</span> <span class="n">json</span><span class="p">[</span><span class="s">"followers"</span><span class="p">]</span> <span class="k">as?</span> <span class="kt">Int</span><span class="p">,</span>
                <span class="k">let</span> <span class="nv">following</span> <span class="o">=</span> <span class="n">json</span><span class="p">[</span><span class="s">"following"</span><span class="p">]</span> <span class="k">as?</span> <span class="kt">Int</span><span class="p">,</span>
                <span class="k">let</span> <span class="nv">repoCnt</span> <span class="o">=</span> <span class="n">json</span><span class="p">[</span><span class="s">"public_repos"</span><span class="p">]</span> <span class="k">as?</span> <span class="kt">Int</span><span class="p">,</span>
                <span class="k">let</span> <span class="nv">avatarURLString</span> <span class="o">=</span> <span class="n">json</span><span class="p">[</span><span class="s">"avatar_url"</span><span class="p">]</span> <span class="k">as?</span> <span class="kt">String</span><span class="p">,</span>
                <span class="k">let</span> <span class="nv">avatarURL</span> <span class="o">=</span> <span class="kt">URL</span><span class="p">(</span><span class="nv">string</span><span class="p">:</span> <span class="n">avatarURLString</span><span class="p">)</span> <span class="p">{</span>
                
                <span class="k">let</span> <span class="nv">profile</span> <span class="o">=</span> <span class="kt">GithubProfile</span><span class="p">(</span><span class="nv">myImage</span><span class="p">:</span> <span class="n">avatarURL</span><span class="p">,</span> <span class="nv">name</span><span class="p">:</span> <span class="n">name</span><span class="p">,</span> <span class="nv">login</span><span class="p">:</span> <span class="n">login</span><span class="p">,</span> <span class="nv">followers</span><span class="p">:</span> <span class="n">followers</span><span class="p">,</span> <span class="nv">following</span><span class="p">:</span> <span class="n">following</span><span class="p">,</span> <span class="nv">repoCnt</span><span class="p">:</span> <span class="n">repoCnt</span><span class="p">)</span>
                
                <span class="k">self</span><span class="o">.</span><span class="nf">showProfileInfo</span><span class="p">(</span><span class="n">profile</span><span class="p">)</span>                    
            <span class="p">}</span>
        <span class="k">case</span> <span class="o">.</span><span class="nf">failure</span><span class="p">(</span><span class="k">let</span> <span class="nv">error</span><span class="p">):</span>
            <span class="nf">print</span><span class="p">(</span><span class="s">"error: </span><span class="se">\(</span><span class="n">error</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// 구조체에서 데이터를 가져와 label 및 imageView에 보여주는 함수</span>
<span class="kd">func</span> <span class="nf">showProfileInfo</span><span class="p">(</span><span class="n">_</span> <span class="nv">profile</span><span class="p">:</span> <span class="kt">GithubProfile</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">//SDWebImage를 사용하여 프로필 이미지 다운로드 및 출력</span>
    <span class="n">profileImageView</span><span class="o">.</span><span class="nf">sd_setImage</span><span class="p">(</span><span class="nv">with</span><span class="p">:</span> <span class="n">profile</span><span class="o">.</span><span class="n">myImage</span><span class="p">,</span> <span class="nv">placeholderImage</span><span class="p">:</span> <span class="kc">nil</span><span class="p">,</span> <span class="nv">options</span><span class="p">:</span> <span class="p">[],</span> <span class="nv">completed</span><span class="p">:</span> <span class="kc">nil</span><span class="p">)</span>
    
    <span class="n">profileName</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">profile</span><span class="o">.</span><span class="n">name</span>     <span class="c1">// 이름 출력</span>
    <span class="n">profileLogin</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">profile</span><span class="o">.</span><span class="n">login</span>   <span class="c1">// 로그인 출력</span>
    <span class="n">profileFollowers</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">"Followers: </span><span class="se">\(</span><span class="kt">String</span><span class="p">(</span><span class="n">profile</span><span class="o">.</span><span class="n">followers</span><span class="p">)</span><span class="se">)</span><span class="s">"</span>   <span class="c1">//followers</span>
    <span class="n">profileFollowing</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">"Following: </span><span class="se">\(</span><span class="kt">String</span><span class="p">(</span><span class="n">profile</span><span class="o">.</span><span class="n">following</span><span class="p">)</span><span class="se">)</span><span class="s">"</span>   <span class="c1">//following</span>
    
    <span class="k">self</span><span class="o">.</span><span class="n">repoCnt</span> <span class="o">=</span> <span class="n">profile</span><span class="o">.</span><span class="n">repoCnt</span>
    <span class="n">repositoriesTableView</span><span class="o">.</span><span class="nf">reloadData</span><span class="p">()</span>  <span class="c1">//최초 실행하면 numberOfRowsInSection를 먼저 실행하고 깃허브 데이터를 받아와서 row 수가 0임, row수를 깃허브 repo수 만큼 보이도록 새로고침 추가</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="레포지토리">레포지토리</h2>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// MARK: - 깃허브에서 리포지토리 정보 가져오기</span>
<span class="kd">func</span> <span class="nf">getGithubRepositories</span><span class="p">()</span> <span class="p">{</span>
    <span class="kt">AF</span><span class="o">.</span><span class="nf">request</span><span class="p">(</span><span class="n">repositoriesUrl</span><span class="p">)</span><span class="o">.</span><span class="n">responseJSON</span> <span class="p">{</span> <span class="n">response</span> <span class="k">in</span>
        <span class="k">switch</span> <span class="n">response</span><span class="o">.</span><span class="n">result</span> <span class="p">{</span>
        <span class="k">case</span><span class="o">.</span><span class="nf">success</span><span class="p">(</span><span class="k">let</span> <span class="nv">value</span><span class="p">):</span>
            <span class="k">if</span> <span class="k">let</span> <span class="nv">repositories</span> <span class="o">=</span> <span class="n">value</span> <span class="k">as?</span> <span class="p">[[</span><span class="kt">String</span><span class="p">:</span> <span class="kt">Any</span><span class="p">]]</span> <span class="p">{</span>
                <span class="k">for</span> <span class="n">repo</span> <span class="k">in</span> <span class="n">repositories</span> <span class="p">{</span>
                    <span class="k">if</span> <span class="k">let</span> <span class="nv">name</span> <span class="o">=</span> <span class="n">repo</span><span class="p">[</span><span class="s">"name"</span><span class="p">]</span> <span class="k">as?</span> <span class="kt">String</span><span class="p">,</span>
                        <span class="k">let</span> <span class="nv">htmlUrl</span> <span class="o">=</span> <span class="n">repo</span><span class="p">[</span><span class="s">"html_url"</span><span class="p">]</span> <span class="k">as?</span> <span class="kt">String</span> <span class="p">{</span>
                            <span class="c1">//description, language는 없거나 Null 값이 있어서 닐 코얼레싱 추가</span>
                            <span class="k">let</span> <span class="nv">description</span> <span class="o">=</span> <span class="n">repo</span><span class="p">[</span><span class="s">"description"</span><span class="p">]</span> <span class="k">as?</span> <span class="kt">String</span> <span class="p">??</span> <span class="s">""</span>
                            <span class="k">let</span> <span class="nv">language</span> <span class="o">=</span> <span class="n">repo</span><span class="p">[</span><span class="s">"language"</span><span class="p">]</span> <span class="k">as?</span> <span class="kt">String</span> <span class="p">??</span> <span class="s">""</span>
                            
                            <span class="c1">//배열에 저장</span>
                            <span class="k">self</span><span class="o">.</span><span class="n">repoArr</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="kt">GithubRepositories</span><span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="n">name</span><span class="p">,</span> <span class="nv">htmlUrl</span><span class="p">:</span> <span class="n">htmlUrl</span><span class="p">,</span> <span class="nv">description</span><span class="p">:</span> <span class="n">description</span><span class="p">,</span> <span class="nv">language</span><span class="p">:</span> <span class="n">language</span><span class="p">))</span>
                    <span class="p">}</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="k">case</span> <span class="o">.</span><span class="nf">failure</span><span class="p">(</span><span class="k">let</span> <span class="nv">error</span><span class="p">):</span>
            <span class="nf">print</span><span class="p">(</span><span class="s">"에러: </span><span class="se">\(</span><span class="n">error</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><br /></p>

<h1 id="실행화면">실행화면</h1>
<p><img src="../../assets/images/categories/sparta/2024-04-12-챌린지반과제1-1.png" alt="실행화면" /></p>

<p><br /></p>

<h1 id="실행영상">실행영상</h1>
<video width="640" height="360" controls="">
    <source src="../../assets/video/categories/sparta/2024-04-12-챌린지반과제1-1.mov" type="video/mp4" />
</video>

<p><br /></p>

<h1 id="마무리">마무리</h1>
<ul>
  <li>테이블뷰 row를 선택할때 배열의 row로 해야하는데 로딩하자마자 tableview에 데이터를 보여주기위해서 프로필에서 repoCnt를 구했다.</li>
  <li>로딩때 데이터를 보여주기위해 reload를 많이 사용했는데 다른 방법이 있을 것 같다.</li>
  <li>api를 사용할 때 아래 경고문이 떴는데 개선할 방법을 찾지 못했다. 다른 방법을 고민해야할 것 같다.
    <ul>
      <li>‘responseJSON(queue:dataPreprocessor:emptyResponseCodes:emptyRequestMethods:options:completionHandler:)’ is deprecated: responseJSON deprecated and will be removed in Alamofire 6. Use responseDecodable instead.</li>
    </ul>
  </li>
  <li>새로고침할때 배열을 다시 가져오는건데 배열을 초기화 하고 다시 불러야하나 고민했는데 우선 그냥 진행했다.</li>
  <li>페이징처리를 못해서 찾아보고 추가해야겠다.</li>
  <li>배운내용을 활용해서 구현하였고 라이브러리 설치와 api 사용을 경험해볼 수 있었다.</li>
  <li>튜터님 피드백 받고 다시 수정 해봐야겠다. 우선 제출! 🔥🔥🔥</li>
</ul>]]></content><author><name>HyeongSub Lim</name></author><category term="sparta" /><category term="챌린지" /><category term="과제" /><category term="깃허브앱" /><summary type="html"><![CDATA[챌린지반 과제 1차 제출 - GitHub App 만들기]]></summary></entry><entry><title type="html">[UIKit] prepare 코드로 화면 이동 (스토리보드에서 버튼과 view를 세그웨이로 연결, 추가 정보 전달)</title><link href="http://localhost:4000/uikit/%EC%BD%94%EB%93%9C%EB%A1%9C%ED%99%94%EB%A9%B4%EC%9D%B4%EB%8F%994/" rel="alternate" type="text/html" title="[UIKit] prepare 코드로 화면 이동 (스토리보드에서 버튼과 view를 세그웨이로 연결, 추가 정보 전달)" /><published>2024-04-11T00:00:00+09:00</published><updated>2024-04-11T00:00:00+09:00</updated><id>http://localhost:4000/uikit/%EC%BD%94%EB%93%9C%EB%A1%9C%ED%99%94%EB%A9%B4%EC%9D%B4%EB%8F%994</id><content type="html" xml:base="http://localhost:4000/uikit/%EC%BD%94%EB%93%9C%EB%A1%9C%ED%99%94%EB%A9%B4%EC%9D%B4%EB%8F%994/"><![CDATA[<h1 id="스토리보드-버튼과-view를-세그웨이로-연결하고-코드로-화면-이동">스토리보드 버튼과 View를 세그웨이로 연결하고 코드로 화면 이동</h1>
<ul>
  <li>세그웨이를 통해 연결됐지만 추가적인 정보를 전달 가능</li>
</ul>

<h1 id="1-view-controller에-버튼-추가-및-액션함수-생성">1. View Controller에 버튼 추가 및 액션함수 생성</h1>
<ul>
  <li>버튼을 추가하고 액션함수는 생성하지 않습니다.</li>
</ul>

<p><img src="../../assets/images/categories/uikit/2024-04-11-NextVC4-1.png" width="200" /></p>

<h1 id="2-view-controller-생성-하고-버튼과-연결">2. View Controller 생성 하고 버튼과 연결</h1>
<ul>
  <li>뷰 컨트롤러에서 버튼을 마우스 우클릭으로 드래그 후 옆에 새로 만든 뷰컨트롤러로 드래그하고 마우스를 떼면 Action Segue 창이 뜹니다.</li>
  <li>Show를 선택합니다.</li>
  <li>버튼을 누르면 View Controller로 바로 이동합니다.</li>
</ul>

<p><img src="../../assets/images/categories/uikit/2024-04-11-NextVC4-2.png" alt="" /></p>

<h1 id="3-세그웨이-식별자id를-추가">3. 세그웨이 식별자ID를 추가</h1>
<ul>
  <li>세그웨이는 화면 이동을 담당하는 객체입니다.</li>
  <li>세그웨이를 선택하고 식별자ID를 추가합니다. 
<img src="../../assets/images/categories/uikit/2024-04-11-NextVC4-3.png" alt="" /></li>
</ul>

<h1 id="4-이동하는-뷰컨트롤러에-label-추가">4. 이동하는 뷰컨트롤러에 Label 추가</h1>
<ul>
  <li>버튼으로 화면이동 시 Label의 text값을 변경하기 위함입니다. 
<img src="../../assets/images/categories/uikit/2024-04-11-NextVC4-4.png" alt="" /></li>
</ul>

<h1 id="5-next-view-controller-수정">5. Next View Controller 수정</h1>
<ul>
  <li>Label을 변경하기 위한 코드 수정</li>
  <li>전체코드</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">UIKit</span>

<span class="kd">class</span> <span class="kt">NextViewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>
    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">textLabel</span><span class="p">:</span> <span class="kt">UILabel</span><span class="o">!</span>
    <span class="k">var</span> <span class="nv">tempLabel</span><span class="p">:</span> <span class="kt">String</span><span class="p">?</span>
    
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>
        
        <span class="n">textLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">tempLabel</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h1 id="6-view-controller-prepare-함수-추가">6. View Controller prepare 함수 추가</h1>
<ul>
  <li>버튼으로 다음화면으로 이동하면서 Label의 값을 변경하기 위해 prepare 함수를 추가하고 코드를 작성합니다.</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">UIKit</span>

<span class="kd">class</span> <span class="kt">ViewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>
    <span class="p">}</span>
    
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">prepare</span><span class="p">(</span><span class="k">for</span> <span class="nv">segue</span><span class="p">:</span> <span class="kt">UIStoryboardSegue</span><span class="p">,</span> <span class="nv">sender</span><span class="p">:</span> <span class="kt">Any</span><span class="p">?)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="n">segue</span><span class="o">.</span><span class="n">identifier</span> <span class="o">==</span> <span class="s">"NextVCSegue"</span> <span class="p">{</span>
            <span class="nf">print</span><span class="p">(</span><span class="s">"prepare 함수 실행"</span><span class="p">)</span>
            <span class="k">let</span> <span class="nv">nextVC</span> <span class="o">=</span> <span class="n">segue</span><span class="o">.</span><span class="n">destination</span> <span class="k">as?</span> <span class="kt">NextViewController</span>
            <span class="n">nextVC</span><span class="p">?</span><span class="o">.</span><span class="n">tempLabel</span> <span class="o">=</span> <span class="s">"안녕하세요~~"</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h1 id="7-실행-화면">7. 실행 화면</h1>

<video width="640" height="360" controls="">
    <source src="../../assets/video/categories/uikit/2024-04-11-NextVC4.mov" type="video/mp4" />
</video>

<h1 id="마무리">마무리</h1>
<ul>
  <li>세그웨이를 통해 버튼과 뷰가 자동으로 연결되었으나 데이터 전달등 추가적인 작업을 위해 prepare 함수 추가</li>
</ul>]]></content><author><name>HyeongSub Lim</name></author><category term="UIKit" /><category term="swift" /><category term="iOS" /><category term="prepare" /><summary type="html"><![CDATA[스토리보드에서 버튼과 view를 세그웨이로 연결하고 코드로 추가 정보 전달]]></summary></entry><entry><title type="html">[UIKit] instantiateViewController 코드로 화면 이동 (다음 화면이 스토리보드에 있지만 세그웨이 연결이 아닌 경우)</title><link href="http://localhost:4000/uikit/%EC%BD%94%EB%93%9C%EB%A1%9C%ED%99%94%EB%A9%B4%EC%9D%B4%EB%8F%992/" rel="alternate" type="text/html" title="[UIKit] instantiateViewController 코드로 화면 이동 (다음 화면이 스토리보드에 있지만 세그웨이 연결이 아닌 경우)" /><published>2024-04-11T00:00:00+09:00</published><updated>2024-04-11T00:00:00+09:00</updated><id>http://localhost:4000/uikit/%EC%BD%94%EB%93%9C%EB%A1%9C%ED%99%94%EB%A9%B4%EC%9D%B4%EB%8F%992</id><content type="html" xml:base="http://localhost:4000/uikit/%EC%BD%94%EB%93%9C%EB%A1%9C%ED%99%94%EB%A9%B4%EC%9D%B4%EB%8F%992/"><![CDATA[<h1 id="세그웨이-없이-코드로-화면-이동">세그웨이 없이 코드로 화면 이동</h1>
<ul>
  <li>코드로 스토리보드 객체를 생성해서 화면을 이동하는 방법입니다.</li>
</ul>

<h1 id="1-view-controller에-버튼-추가-및-액션함수-생성">1. View Controller에 버튼 추가 및 액션함수 생성</h1>
<ul>
  <li>버튼 추가</li>
</ul>

<p><img src="../../assets/images/categories/uikit/2024-04-11-NextVC2-1.png" width="200" /></p>

<ul>
  <li>버튼 액션함수 생성</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// MARK: - 다음 화면으로 이동하는 버튼</span>
<span class="kd">@IBAction</span> <span class="kd">func</span> <span class="nf">nextButtonTapped</span><span class="p">(</span><span class="n">_</span> <span class="nv">sender</span><span class="p">:</span> <span class="kt">UIButton</span><span class="p">)</span> <span class="p">{</span>
<span class="p">}</span>
</code></pre></div></div>

<h1 id="2-viewcontroller-파일-생성">2. ViewController 파일 생성</h1>
<ul>
  <li>UIViewController를 상속받는 NextViewController 생성 
<img src="../../assets/images/categories/uikit/2024-04-11-NextVC2-2.png" alt="" /></li>
</ul>

<h1 id="3-스토리보드에-view-controller-추가-및-class파일-등록-스토리보드-id-등록">3. 스토리보드에 View Controller 추가 및 class파일 등록, 스토리보드 ID 등록</h1>
<p><img src="../../assets/images/categories/uikit/2024-04-11-NextVC2-3.png" alt="" /></p>

<h1 id="4-버튼-액션-함수-수정">4. 버튼 액션 함수 수정</h1>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// MARK: - 다음 화면으로 이동하는 버튼</span>
<span class="kd">@IBAction</span> <span class="kd">func</span> <span class="nf">nextButtonTapped</span><span class="p">(</span><span class="n">_</span> <span class="nv">sender</span><span class="p">:</span> <span class="kt">UIButton</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">//현재 스토리보드에서 "NextVC"라는 식별자로 뷰 컨트롤러를 인스턴스화를 시도</span>
    <span class="k">guard</span> <span class="k">let</span> <span class="nv">nextVC</span> <span class="o">=</span> <span class="n">storyboard</span><span class="p">?</span><span class="o">.</span><span class="nf">instantiateViewController</span><span class="p">(</span><span class="nv">identifier</span><span class="p">:</span> <span class="s">"NextVC"</span><span class="p">)</span> <span class="k">as?</span> <span class="kt">NextViewController</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
    <span class="c1">//인스턴스화가 성공하면 새로 생성된 뷰 컨트롤러를 모달로 표시</span>
    <span class="k">self</span><span class="o">.</span><span class="nf">present</span><span class="p">(</span><span class="n">nextVC</span><span class="p">,</span> <span class="nv">animated</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="nv">completion</span><span class="p">:</span> <span class="kc">nil</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<h1 id="5-실행-화면">5. 실행 화면</h1>

<video width="640" height="360" controls="">
    <source src="../../assets/video/categories/uikit/2024-04-11-NextVC2.mov" type="video/mp4" />
</video>

<h1 id="마무리">마무리</h1>
<ul>
  <li>세그웨이 없이 ViewController에 스토리보드ID를 지정하고 연결하기</li>
</ul>]]></content><author><name>HyeongSub Lim</name></author><category term="UIKit" /><category term="swift" /><category term="iOS" /><category term="instantiateViewController" /><summary type="html"><![CDATA[스토리보드에 있지만 세그웨이 연결이 되어 있지 않을때 화면 이동]]></summary></entry><entry><title type="html">[TIL] 내배캠 iOS앱 개발 공부 32일차 - 2024.04.11</title><link href="http://localhost:4000/TIL/til32/" rel="alternate" type="text/html" title="[TIL] 내배캠 iOS앱 개발 공부 32일차 - 2024.04.11" /><published>2024-04-11T00:00:00+09:00</published><updated>2024-04-11T00:00:00+09:00</updated><id>http://localhost:4000/TIL/til32</id><content type="html" xml:base="http://localhost:4000/TIL/til32/"><![CDATA[<h3 id="알고리즘">알고리즘</h3>
<ul>
  <li>쉽게 풀었던 오늘의 알고리즘 문제</li>
  <li>풀이 보기
    <ul>
      <li><a href="https://limlogging.github.io/algorithm/%EB%A1%9C%EB%98%90%EC%9D%98%EC%B5%9C%EA%B3%A0%EC%88%9C%EC%9C%84%EC%99%80%EC%B5%9C%EC%A0%80%EC%88%9C%EC%9C%84/" target="_blank">로또의 최고 순위와 최저 순위</a></li>
    </ul>
  </li>
</ul>

<h3 id="챌린지반-과제">챌린지반 과제</h3>
<ul>
  <li>결국 마지막 페이징 처리는 못했지만 제출했다.</li>
  <li>내일 우선 포스팅 예정</li>
</ul>

<h3 id="화면이동">화면이동</h3>
<ul>
  <li>스토리보드로 화면 연결은 쉽지만 이후 코드로 연결하기, 자동연결이지만 데이터 전달하기등 화면이동의 다양한 방법에 대해서 공부했다.</li>
  <li><a href="https://limlogging.github.io/uikit/%EC%BD%94%EB%93%9C%EB%A1%9C%ED%99%94%EB%A9%B4%EC%9D%B4%EB%8F%991/" target="_blank">코드로 화면 이동1 - present</a></li>
  <li><a href="https://limlogging.github.io/uikit/%EC%BD%94%EB%93%9C%EB%A1%9C%ED%99%94%EB%A9%B4%EC%9D%B4%EB%8F%992/" target="_blank">코드로 화면 이동2 - instantiateViewController</a></li>
  <li><a href="https://limlogging.github.io/uikit/%EC%BD%94%EB%93%9C%EB%A1%9C%ED%99%94%EB%A9%B4%EC%9D%B4%EB%8F%993/" target="_blank">코드로 화면 이동3 - performSegue</a></li>
  <li><a href="https://limlogging.github.io/uikit/%EC%BD%94%EB%93%9C%EB%A1%9C%ED%99%94%EB%A9%B4%EC%9D%B4%EB%8F%994/" target="_blank">코드로 화면 이동4 - prepare</a></li>
</ul>

<h3 id="내일-목표">내일 목표</h3>
<ul>
  <li>팀 프로젝트, 선거 휴무를 지나면서 공부한 내용을 많이 정리하지 못했다 ㅠ 다시 조금씩… 작성해야겠다.</li>
  <li>개인 과제 시작하기 , 챌린지 과제 마저 수정</li>
</ul>]]></content><author><name>HyeongSub Lim</name></author><category term="TIL" /><category term="TIL" /><summary type="html"><![CDATA[내배캠 iOS앱 개발 공부 32일차 이야기 - 2024.04.11]]></summary></entry><entry><title type="html">[프로그래머스/Swift] 로또의 최고 순위와 최저 순위</title><link href="http://localhost:4000/algorithm/%EB%A1%9C%EB%98%90%EC%9D%98%EC%B5%9C%EA%B3%A0%EC%88%9C%EC%9C%84%EC%99%80%EC%B5%9C%EC%A0%80%EC%88%9C%EC%9C%84/" rel="alternate" type="text/html" title="[프로그래머스/Swift] 로또의 최고 순위와 최저 순위" /><published>2024-04-11T00:00:00+09:00</published><updated>2024-04-11T00:00:00+09:00</updated><id>http://localhost:4000/algorithm/%EB%A1%9C%EB%98%90%EC%9D%98%EC%B5%9C%EA%B3%A0%EC%88%9C%EC%9C%84%EC%99%80%EC%B5%9C%EC%A0%80%EC%88%9C%EC%9C%84</id><content type="html" xml:base="http://localhost:4000/algorithm/%EB%A1%9C%EB%98%90%EC%9D%98%EC%B5%9C%EA%B3%A0%EC%88%9C%EC%9C%84%EC%99%80%EC%B5%9C%EC%A0%80%EC%88%9C%EC%9C%84/"><![CDATA[<h1 id="문제-설명">문제 설명</h1>
<ul>
  <li>로또 6/45(이하 ‘로또’로 표기)는 1부터 45까지의 숫자 중 6개를 찍어서 맞히는 대표적인 복권입니다. 아래는 로또의 순위를 정하는 방식입니다.</li>
</ul>

<table>
  <thead>
    <tr>
      <th>순위</th>
      <th>당첨 내용</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1</td>
      <td>6개 번호가 모두 일치</td>
    </tr>
    <tr>
      <td>2</td>
      <td>5개 번호가 일치</td>
    </tr>
    <tr>
      <td>3</td>
      <td>4개 번호가 일치</td>
    </tr>
    <tr>
      <td>4</td>
      <td>3개 번호가 일치</td>
    </tr>
    <tr>
      <td>5</td>
      <td>2개 번호가 일치</td>
    </tr>
    <tr>
      <td>6(낙첨)</td>
      <td>그 외</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>로또를 구매한 민우는 당첨 번호 발표일을 학수고대하고 있었습니다. 하지만, 민우의 동생이 로또에 낙서를 하여, 일부 번호를 알아볼 수 없게 되었습니다. 당첨 번호 발표 후, 민우는 자신이 구매했던 로또로 당첨이 가능했던 최고 순위와 최저 순위를 알아보고 싶어 졌습니다.</li>
  <li>알아볼 수 없는 번호를 0으로 표기하기로 하고, 민우가 구매한 로또 번호 6개가 44, 1, 0, 0, 31 25라고 가정해보겠습니다. 당첨 번호 6개가 31, 10, 45, 1, 6, 19라면, 당첨 가능한 최고 순위와 최저 순위의 한 예는 아래와 같습니다.</li>
</ul>

<table>
  <thead>
    <tr>
      <th style="text-align: center">당첨 번호</th>
      <th style="text-align: center">31</th>
      <th style="text-align: center">10</th>
      <th style="text-align: center">45</th>
      <th style="text-align: center">1</th>
      <th style="text-align: center">6</th>
      <th style="text-align: center">19</th>
      <th style="text-align: center">결과</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">최고 순위 번호</td>
      <td style="text-align: center">31</td>
      <td style="text-align: center">0→10</td>
      <td style="text-align: center">44</td>
      <td style="text-align: center">1</td>
      <td style="text-align: center">0→6</td>
      <td style="text-align: center">25</td>
      <td style="text-align: center">4개 번호 일치, 3등</td>
    </tr>
    <tr>
      <td style="text-align: center">최저 순위 번호</td>
      <td style="text-align: center">31</td>
      <td style="text-align: center">0→11</td>
      <td style="text-align: center">44</td>
      <td style="text-align: center">1</td>
      <td style="text-align: center">0→7</td>
      <td style="text-align: center">25</td>
      <td style="text-align: center">2개 번호 일치, 5등</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>순서와 상관없이, 구매한 로또에 당첨 번호와 일치하는 번호가 있으면 맞힌 걸로 인정됩니다.</li>
  <li>알아볼 수 없는 두 개의 번호를 각각 10, 6이라고 가정하면 3등에 당첨될 수 있습니다.
    <ul>
      <li>3등을 만드는 다른 방법들도 존재합니다. 하지만, 2등 이상으로 만드는 것은 불가능합니다.</li>
    </ul>
  </li>
  <li>알아볼 수 없는 두 개의 번호를 각각 11, 7이라고 가정하면 5등에 당첨될 수 있습니다.
    <ul>
      <li>5등을 만드는 다른 방법들도 존재합니다. 하지만, 6등(낙첨)으로 만드는 것은 불가능합니다.</li>
    </ul>
  </li>
  <li>
    <p>민우가 구매한 로또 번호를 담은 배열 lottos, 당첨 번호를 담은 배열 win_nums가 매개변수로 주어집니다. 이때, 당첨 가능한 최고 순위와 최저 순위를 차례대로 배열에 담아서 return 하도록 solution 함수를 완성해주세요.</p>
  </li>
  <li><a href="https://school.programmers.co.kr/learn/courses/30/lessons/77484#fnref1" target="_blank">문제 풀기</a></li>
</ul>

<h1 id="제한사항">제한사항</h1>
<ul>
  <li>lottos는 길이 6인 정수 배열입니다.</li>
  <li>lottos의 모든 원소는 0 이상 45 이하인 정수입니다.
    <ul>
      <li>0은 알아볼 수 없는 숫자를 의미합니다.</li>
      <li>0을 제외한 다른 숫자들은 lottos에 2개 이상 담겨있지 않습니다.</li>
      <li>lottos의 원소들은 정렬되어 있지 않을 수도 있습니다.</li>
    </ul>
  </li>
  <li>win_nums은 길이 6인 정수 배열입니다.</li>
  <li>win_nums의 모든 원소는 1 이상 45 이하인 정수입니다.
    <ul>
      <li>win_nums에는 같은 숫자가 2개 이상 담겨있지 않습니다.</li>
      <li>win_nums의 원소들은 정렬되어 있지 않을 수도 있습니다.</li>
    </ul>
  </li>
</ul>

<h1 id="입출력-예">입출력 예</h1>

<table>
  <thead>
    <tr>
      <th>lottos</th>
      <th>win_nums</th>
      <th>result</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>[44, 1, 0, 0, 31, 25]</td>
      <td>[31, 10, 45, 1, 6, 19]</td>
      <td>[3, 5]</td>
    </tr>
    <tr>
      <td>[0, 0, 0, 0, 0, 0]</td>
      <td>[38, 19, 20, 40, 15, 25]</td>
      <td>[1, 6]</td>
    </tr>
    <tr>
      <td>[45, 4, 35, 20, 3, 9]</td>
      <td>[20, 9, 3, 45, 4, 35]</td>
      <td>[1, 1]</td>
    </tr>
  </tbody>
</table>

<h2 id="입출력-예-설명">입출력 예 설명</h2>
<h3 id="입출력-예-1">입출력 예 #1</h3>
<ul>
  <li>문제 예시와 같습니다.</li>
</ul>

<h3 id="입출력-예-2">입출력 예 #2</h3>
<ul>
  <li>알아볼 수 없는 번호들이 아래와 같았다면, 1등과 6등에 당첨될 수 있습니다.</li>
</ul>

<table>
  <thead>
    <tr>
      <th>당첨 번호</th>
      <th>38</th>
      <th>19</th>
      <th>20</th>
      <th>40</th>
      <th>15</th>
      <th>25</th>
      <th>결과</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>최고 순위 번호</td>
      <td>0→38</td>
      <td>0→19</td>
      <td>0→20</td>
      <td>0→40</td>
      <td>0→15</td>
      <td>0→25</td>
      <td>6개 번호 일치, 1등</td>
    </tr>
    <tr>
      <td>최저 순위 번호</td>
      <td>0→21</td>
      <td>0→22</td>
      <td>0→23</td>
      <td>0→24</td>
      <td>0→26</td>
      <td>0→27</td>
      <td>0개 번호 일치, 6등</td>
    </tr>
  </tbody>
</table>

<h3 id="입출력-예-3">입출력 예 #3</h3>
<ul>
  <li>
    <p>민우가 구매한 로또의 번호와 당첨 번호가 모두 일치하므로, 최고 순위와 최저 순위는 모두 1등입니다.</p>
  </li>
  <li>
    <p>실제로 사용되는 로또 순위의 결정 방식과는 약간 다르지만, 이 문제에서는 지문에 명시된 대로 로또 순위를 결정하도록 합니다.</p>
  </li>
</ul>

<h1 id="나의-풀이">나의 풀이</h1>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">Foundation</span>

<span class="kd">func</span> <span class="nf">solution</span><span class="p">(</span><span class="n">_</span> <span class="nv">lottos</span><span class="p">:[</span><span class="kt">Int</span><span class="p">],</span> <span class="n">_</span> <span class="nv">win_nums</span><span class="p">:[</span><span class="kt">Int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">result</span><span class="p">:</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span>
    <span class="k">var</span> <span class="nv">min</span><span class="p">:</span> <span class="kt">Int</span>  <span class="o">=</span> <span class="mi">0</span>
    <span class="k">var</span> <span class="nv">zeroCnt</span> <span class="o">=</span> <span class="n">lottos</span><span class="o">.</span><span class="n">filter</span> <span class="p">{</span> <span class="nv">$0</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">}</span><span class="o">.</span><span class="n">count</span>
        
    <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="n">win_nums</span> <span class="p">{</span>
        <span class="k">for</span> <span class="n">j</span> <span class="k">in</span> <span class="n">lottos</span> <span class="p">{</span>
            <span class="k">if</span> <span class="n">j</span> <span class="o">==</span> <span class="n">i</span> <span class="p">{</span>
                <span class="n">min</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="k">return</span> <span class="p">[</span><span class="n">result</span><span class="p">[</span><span class="n">min</span> <span class="o">+</span> <span class="n">zeroCnt</span><span class="p">],</span> <span class="n">result</span><span class="p">[</span><span class="n">min</span><span class="p">]]</span>
<span class="p">}</span>
</code></pre></div></div>

<h1 id="다른-사람-풀이">다른 사람 풀이</h1>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">Foundation</span>

<span class="kd">func</span> <span class="nf">solution</span><span class="p">(</span><span class="n">_</span> <span class="nv">lottos</span><span class="p">:[</span><span class="kt">Int</span><span class="p">],</span> <span class="n">_</span> <span class="nv">win_nums</span><span class="p">:[</span><span class="kt">Int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="p">{</span>

    <span class="k">let</span> <span class="nv">zeroCount</span> <span class="o">=</span> <span class="n">lottos</span><span class="o">.</span><span class="n">filter</span> <span class="p">{</span> <span class="nv">$0</span> <span class="o">==</span> <span class="mi">0</span><span class="p">}</span><span class="o">.</span><span class="n">count</span>
    <span class="k">let</span> <span class="nv">winCount</span><span class="p">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="n">win_nums</span><span class="o">.</span><span class="n">filter</span> <span class="p">{</span> <span class="n">lottos</span><span class="o">.</span><span class="nf">contains</span><span class="p">(</span><span class="nv">$0</span><span class="p">)</span> <span class="p">}</span><span class="o">.</span><span class="n">count</span>


    <span class="k">return</span> <span class="p">[</span><span class="nf">min</span><span class="p">(</span><span class="mi">7</span><span class="o">-</span><span class="n">winCount</span><span class="o">-</span><span class="n">zeroCount</span><span class="p">,</span><span class="mi">6</span><span class="p">),</span> <span class="nf">min</span><span class="p">(</span><span class="mi">7</span><span class="o">-</span><span class="n">winCount</span><span class="p">,</span><span class="mi">6</span><span class="p">)]</span>
<span class="p">}</span>
</code></pre></div></div>

<h1 id="나의-풀이방법">나의 풀이방법</h1>
<ul>
  <li>일치하는 개수를 Index로 가지는 결과를 리턴하기 위한 배열 생성</li>
  <li>0의 개수 구하기</li>
  <li>일치하는 개수 구하기</li>
  <li>일치하는 수를 확인하고 순위 리턴</li>
</ul>

<p><br /></p>

<h1 id="다른사람-풀이">다른사람 풀이</h1>
<ul>
  <li>zero 카운트 구하는게 변수도 비슷하고 구하는 방법도 똑같았다. 다만 일치하는 수를 구하고 결과를 리턴하는 부분에 차이가 있는데 신기했다.</li>
</ul>]]></content><author><name>HyeongSub Lim</name></author><category term="Algorithm" /><category term="Algorithm" /><category term="coding test" /><category term="로또의 최고 순위와 최저 순위" /><summary type="html"><![CDATA[[프로그래머스/Swift] 로또의 최고 순위와 최저 순위]]></summary></entry><entry><title type="html">[UIKit] performSegue 코드로 화면 이동 (스토리보드에서 view와 view를 세그웨이로 연결, 식별자사용)</title><link href="http://localhost:4000/uikit/%EC%BD%94%EB%93%9C%EB%A1%9C%ED%99%94%EB%A9%B4%EC%9D%B4%EB%8F%993/" rel="alternate" type="text/html" title="[UIKit] performSegue 코드로 화면 이동 (스토리보드에서 view와 view를 세그웨이로 연결, 식별자사용)" /><published>2024-04-11T00:00:00+09:00</published><updated>2024-04-11T00:00:00+09:00</updated><id>http://localhost:4000/uikit/%EC%BD%94%EB%93%9C%EB%A1%9C%ED%99%94%EB%A9%B4%EC%9D%B4%EB%8F%993</id><content type="html" xml:base="http://localhost:4000/uikit/%EC%BD%94%EB%93%9C%EB%A1%9C%ED%99%94%EB%A9%B4%EC%9D%B4%EB%8F%993/"><![CDATA[<h1 id="view와-view를-세그웨이로-연결하고-코드로-화면-이동">View와 View를 세그웨이로 연결하고 코드로 화면 이동</h1>
<ul>
  <li>세그웨이 식별자를 사용해서 화면이동</li>
</ul>

<h1 id="1-view-controller에-버튼-추가-및-액션함수-생성">1. View Controller에 버튼 추가 및 액션함수 생성</h1>
<ul>
  <li>버튼 추가</li>
</ul>

<p><img src="../../assets/images/categories/uikit/2024-04-11-NextVC3-1.png" width="200" /></p>

<ul>
  <li>버튼 액션함수 생성</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// MARK: - 다음 화면으로 이동하는 버튼</span>
<span class="kd">@IBAction</span> <span class="kd">func</span> <span class="nf">nextButtonTapped</span><span class="p">(</span><span class="n">_</span> <span class="nv">sender</span><span class="p">:</span> <span class="kt">UIButton</span><span class="p">)</span> <span class="p">{</span>
<span class="p">}</span>
</code></pre></div></div>

<h1 id="2-스토리보드에서-view-controller-생성-및-연결">2. 스토리보드에서 View Controller 생성 및 연결</h1>
<ul>
  <li>스토리보드에 새로 뷰컨트롤러를 추가합니다 (바탕 노란색)</li>
  <li>뷰 컨트롤러에서 마우스 우클릭으로 드래그 후 옆에 새로 만든 뷰컨트롤러로 드래그하고 마우스를 떼면 Manual Segue 창이 뜹니다.</li>
  <li>Show를 선택합니다. 
<img src="../../assets/images/categories/uikit/2024-04-11-NextVC3-2.png" alt="" /></li>
</ul>

<h1 id="3-세그웨이-식별자id를-추가">3. 세그웨이 식별자ID를 추가</h1>
<ul>
  <li>세그웨이는 화면 이동을 담당하는 객체입니다.</li>
  <li>세그웨이를 선택하고 식별자ID를 추가합니다. 
<img src="../../assets/images/categories/uikit/2024-04-11-NextVC3-3.png" alt="" /></li>
</ul>

<h1 id="4-버튼-액션-함수-수정">4. 버튼 액션 함수 수정</h1>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// MARK: - 다음 화면으로 이동하는 버튼</span>
<span class="kd">@IBAction</span> <span class="kd">func</span> <span class="nf">nextButtonTapped</span><span class="p">(</span><span class="n">_</span> <span class="nv">sender</span><span class="p">:</span> <span class="kt">UIButton</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// 스토리보드에서 View와 View를 세그웨이로 연결 (매뉴얼 세그웨이 or 간접 세그웨이)</span>
    <span class="k">self</span><span class="o">.</span><span class="nf">performSegue</span><span class="p">(</span><span class="nv">withIdentifier</span><span class="p">:</span> <span class="s">"NextVCSegue"</span><span class="p">,</span> <span class="nv">sender</span><span class="p">:</span> <span class="k">self</span><span class="p">)</span> <span class="c1">//식별자를 사용하여 세그웨이를 실행</span>
<span class="p">}</span>
</code></pre></div></div>

<h1 id="5-실행-화면">5. 실행 화면</h1>

<video width="640" height="360" controls="">
    <source src="../../assets/video/categories/uikit/2024-04-11-NextVC3.mov" type="video/mp4" />
</video>

<h1 id="마무리">마무리</h1>
<ul>
  <li>view - view를 세그웨이로 연결하고 식별자 ID를 통해 세그웨이를 실행</li>
</ul>]]></content><author><name>HyeongSub Lim</name></author><category term="UIKit" /><category term="swift" /><category term="iOS" /><category term="performSegue" /><summary type="html"><![CDATA[스토리보드에서 view와 view를 세그웨이로 연결하고 코드로 실행]]></summary></entry></feed>