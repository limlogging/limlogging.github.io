<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-03-26T13:59:07+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">limlogging Devlog</title><author><name>HyeongSub Lim</name></author><entry><title type="html">[UIKit] Tableview Cell에서 Delegate 사용</title><link href="http://localhost:4000/UIKit/UITableViewCellDelegate/" rel="alternate" type="text/html" title="[UIKit] Tableview Cell에서 Delegate 사용" /><published>2024-03-26T00:00:00+09:00</published><updated>2024-03-26T00:00:00+09:00</updated><id>http://localhost:4000/UIKit/UITableViewCellDelegate</id><content type="html" xml:base="http://localhost:4000/UIKit/UITableViewCellDelegate/"><![CDATA[<h1 id="tableviewcell과-viewcontroller와-상호작용">TableViewCell과 ViewController와 상호작용</h1>
<ul>
  <li>TableViewCell에는 ViewController에서 가져온 데이터를 보여줍니다.</li>
  <li>Cell에서 스위치의 데이터를 변경하고 새로운 데이터를 추가하면 switch 정보가 초기화가 됩니다.</li>
  <li>Cell에서 스위치를 변경할때 ViewController의 배열의 값도 변경하면 새로운 값이 추가되어도 스위치의 Value가 바뀌지 않을 것 입니다.</li>
</ul>
<video width="640" height="360" controls="">
    <source src="../../assets/video/2024-03-26-UITableViewCellDelegate1.mov" type="video/mp4" />
</video>

<h1 id="예제-코드">예제 코드</h1>
<ul>
  <li>Cell에서 스위치를 변경할때 ViewController의 배열의 값도 변경하면 새로운 값이 추가되어도 스위치의 Value가 바뀌지 않도록하는 예제입니다.</li>
</ul>

<h2 id="1-스위치-valuechanged-액션함수-생성">1. 스위치 ValueChanged 액션함수 생성</h2>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// MARK: - 스위치 변경 이벤트</span>
<span class="kd">@IBAction</span> <span class="kd">func</span> <span class="nf">switchValueChanged</span><span class="p">(</span><span class="n">_</span> <span class="nv">sender</span><span class="p">:</span> <span class="kt">UISwitch</span><span class="p">)</span> <span class="p">{</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="2-스위치-delegate-프로토콜-정의">2. 스위치 Delegate 프로토콜 정의</h2>
<ul>
  <li>스위치 값이 변경될때마다 해당 정보를 View Controller로 전달 할 수 있는 프로토콜을 Cell class에 정의합니다.</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">UIKit</span>

<span class="c1">//스위치 값이 변경될때마다 해당 정보를 View Controller로 전달 할 수 있는 프로토콜을 정의</span>
<span class="kd">protocol</span> <span class="kt">MyToDoListCellDelegate</span><span class="p">:</span> <span class="kt">AnyObject</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">switchValueChanged</span><span class="p">(</span><span class="n">_</span> <span class="nv">cell</span><span class="p">:</span> <span class="kt">MyToDoListCell</span><span class="p">,</span> <span class="nv">isOn</span><span class="p">:</span> <span class="kt">Bool</span><span class="p">)</span> <span class="c1">// 스위치 값 변경 시 호출할 메서드</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="kt">MyToDoListCell</span><span class="p">:</span> <span class="kt">UITableViewCell</span> <span class="p">{</span>
</code></pre></div></div>

<h2 id="3-스위치-delegate-선언">3. 스위치 Delegate 선언</h2>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 스위치 값 변경 이벤트를 처리할 delegate를 선언합니다.</span>
<span class="k">var</span> <span class="nv">delegate</span><span class="p">:</span> <span class="kt">MyToDoListCellDelegate</span><span class="p">?</span>   <span class="c1">// 스위치 값 변경 이벤트를 처리할 delegate</span>

<span class="k">override</span> <span class="kd">func</span> <span class="nf">awakeFromNib</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">super</span><span class="o">.</span><span class="nf">awakeFromNib</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="4-스위치-valuechanged-액션함수-수정">4. 스위치 ValueChanged 액션함수 수정</h2>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// MARK: - 스위치 변경 이벤트</span>
<span class="kd">@IBAction</span> <span class="kd">func</span> <span class="nf">switchValueChanged</span><span class="p">(</span><span class="n">_</span> <span class="nv">sender</span><span class="p">:</span> <span class="kt">UISwitch</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// delegate를 통해 스위치 값 변경 이벤트를 처리할 메서드를 호출합니다.</span>
    <span class="n">delegate</span><span class="p">?</span><span class="o">.</span><span class="nf">switchValueChanged</span><span class="p">(</span><span class="k">self</span><span class="p">,</span> <span class="nv">isOn</span><span class="p">:</span> <span class="n">sender</span><span class="o">.</span><span class="n">isOn</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="5-viewcontroller에서-스위치-델리게이트-채택">5. ViewController에서 스위치 델리게이트 채택</h2>
<ul>
  <li>ViewController를 확장하여 스위치 델리게이트 채택</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// MARK: - 스위치 변경 이벤트 처리를 위한 Delegate 채택</span>
<span class="kd">extension</span> <span class="kt">ViewController</span><span class="p">:</span> <span class="kt">MyToDoListCellDelegate</span> <span class="p">{</span>
    <span class="c1">//필수메서드를 구현하라고 에러가 발생하고 에러를 선택하면 Cell 클래스에서 만들어 놓은 함수가 만들어진다. </span>
    <span class="kd">func</span> <span class="nf">switchValueChanged</span><span class="p">(</span><span class="n">_</span> <span class="nv">cell</span><span class="p">:</span> <span class="kt">MyToDoListCell</span><span class="p">,</span> <span class="nv">isOn</span><span class="p">:</span> <span class="kt">Bool</span><span class="p">)</span> <span class="p">{</span>
          <span class="o">&lt;</span><span class="k">#code</span><span class="err">#</span><span class="o">&gt;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="6-cell의-인덱스를-구하고-스위치-bool-값을-배열에-반영">6. Cell의 인덱스를 구하고 스위치 Bool 값을 배열에 반영</h2>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// MARK: - 스위치 변경 이벤트 처리를 위한 Delegate 채택</span>
<span class="kd">extension</span> <span class="kt">ViewController</span><span class="p">:</span> <span class="kt">MyToDoListCellDelegate</span> <span class="p">{</span>
  <span class="c1">//필수메서드를 구현하라고 에러가 발생하고 에러를 선택하면 Cell 클래스에서 만들어 놓은 함수가 만들어진다. </span>
  <span class="kd">func</span> <span class="nf">switchValueChanged</span><span class="p">(</span><span class="n">_</span> <span class="nv">cell</span><span class="p">:</span> <span class="kt">MyToDoListCell</span><span class="p">,</span> <span class="nv">isOn</span><span class="p">:</span> <span class="kt">Bool</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">//해당 셀의 인덱스 가져오기</span>
    <span class="k">guard</span> <span class="k">let</span> <span class="nv">indexPath</span> <span class="o">=</span> <span class="n">myTodoListTableView</span><span class="o">.</span><span class="nf">indexPath</span><span class="p">(</span><span class="nv">for</span><span class="p">:</span> <span class="n">cell</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span>
      <span class="k">return</span>
    <span class="p">}</span>
    <span class="c1">// 스위치 값을 배열에 반영</span>
    <span class="c1">//ViewController에 선언한 myToDoListArray 배열에 변경된 스위치 값 설정  </span>
    <span class="n">myToDoListArray</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="p">]</span><span class="o">.</span><span class="n">toDoIsComplete</span> <span class="o">=</span> <span class="n">isOn</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="7-️️️-스위치-값-변경-이벤트-처리를-위한-delegate-설정">7. ⭐️⭐️⭐️ 스위치 값 변경 이벤트 처리를 위한 Delegate 설정</h2>
<ul>
  <li>cellForRowAt 함수 리턴 부분 위에 cell.delegate = self를 추가합니다.</li>
  <li>셀에서 발생한 이벤트를 뷰 컨트롤러에서 처리할 수 있도록 연결합니다.</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// MARK: - TableView Row에서 보여줄 컨텐츠</span>
<span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">cellForRowAt</span> <span class="nv">indexPath</span><span class="p">:</span> <span class="kt">IndexPath</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">UITableViewCell</span> <span class="p">{</span>
    <span class="c1">//다른코드 생략 </span>
    <span class="n">cell</span><span class="o">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="k">self</span>    <span class="c1">//스위치 값 변경 이벤트 처리를 위한 delegate 설정</span>
    <span class="k">return</span> <span class="n">cell</span>
<span class="p">}</span> 
</code></pre></div></div>

<h2 id="8-실행화면">8. 실행화면</h2>
<ul>
  <li>스위치 변경 시 배열의 값도 변경하여 데이터를 추가해도 스위치가 초기화되지 않습니다.</li>
</ul>
<video width="640" height="360" controls="">
    <source src="../../assets/video/2024-03-26-UITableViewCellDelegate2.mov" type="video/mp4" />
</video>

<h1 id="스위치-토글-시-취소선strikethrough-추가">스위치 토글 시 취소선(strikeThrough) 추가</h1>
<h2 id="1-string-확장-메서드-구현">1. String 확장 메서드 구현</h2>
<ul>
  <li><a href="https://limlogging.github.io/UIKit/underlineAndStrikethrough/" target="_blank">참고: [UIKit] Label 밑줄(underline) 및 가운데줄/취소선(Strikethrough) 긋기</a></li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// MARK: - String 확장(extension) 메서드에 취소선 구현</span>
<span class="kd">extension</span> <span class="kt">String</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">strikeThrough</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">NSAttributedString</span> <span class="p">{</span>
        <span class="c1">// NSAttributedString.Key를 사용하여 서식과 속성을 적용할 수 있음(NSAttributedString.Key.strikethroughStyle을 .strikethroughStyle로 사용 가능)</span>
        <span class="k">let</span> <span class="nv">attributeString</span> <span class="o">=</span> <span class="kt">NSMutableAttributedString</span><span class="p">(</span><span class="nv">string</span><span class="p">:</span> <span class="k">self</span><span class="p">)</span>
        <span class="c1">// 전체 문자열에 취소선 스타일 속성을 추가</span>
        <span class="n">attributeString</span><span class="o">.</span><span class="nf">addAttribute</span><span class="p">(</span><span class="kt">NSAttributedString</span><span class="o">.</span><span class="kt">Key</span><span class="o">.</span><span class="n">strikethroughStyle</span><span class="p">,</span> <span class="nv">value</span><span class="p">:</span> <span class="kt">NSUnderlineStyle</span><span class="o">.</span><span class="n">single</span><span class="o">.</span><span class="n">rawValue</span><span class="p">,</span> <span class="nv">range</span><span class="p">:</span> <span class="kt">NSMakeRange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">attributeString</span><span class="o">.</span><span class="n">length</span><span class="p">))</span>
        <span class="k">return</span> <span class="n">attributeString</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="2-cellforrowat-메서드-수정">2. cellForRowAt 메서드 수정</h2>
<ul>
  <li>switch 값에 따른 취소선 적용 및 취소선 취소</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="c1">// MARK: - TableView Row에서 보여줄 컨텐츠</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">cellForRowAt</span> <span class="nv">indexPath</span><span class="p">:</span> <span class="kt">IndexPath</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">UITableViewCell</span> <span class="p">{</span>
        <span class="c1">// 다른코드 생략 </span>

        <span class="c1">//title 취소선 - switch 값에 따라 취소선 또는 일반 Text</span>
        <span class="k">if</span> <span class="n">cell</span><span class="o">.</span><span class="n">myToDoIsCompleteSwitch</span><span class="o">.</span><span class="n">isOn</span> <span class="p">{</span>
            <span class="c1">// 해당 텍스트에 취소선을 적용한 NSAttributedString을 생성</span>
            <span class="k">let</span> <span class="nv">attributedText</span> <span class="o">=</span> <span class="n">myToDoListArray</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="p">]</span><span class="o">.</span><span class="n">toDoTitle</span><span class="o">.</span><span class="nf">strikeThrough</span><span class="p">()</span>
            <span class="c1">// 취소선이 적용된 NSAttributedString을 텍스트로 설정</span>
            <span class="n">cell</span><span class="o">.</span><span class="n">myToDoTitleLabel</span><span class="o">.</span><span class="n">attributedText</span> <span class="o">=</span> <span class="n">attributedText</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="c1">//일반 Text - 취소선 없애기</span>
            <span class="n">cell</span><span class="o">.</span><span class="n">myToDoTitleLabel</span><span class="o">.</span><span class="n">attributedText</span> <span class="o">=</span> <span class="kt">NSAttributedString</span><span class="p">(</span><span class="nv">string</span><span class="p">:</span> <span class="n">myToDoListArray</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="p">]</span><span class="o">.</span><span class="n">toDoTitle</span><span class="p">)</span>
        <span class="p">}</span>

        <span class="n">cell</span><span class="o">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="k">self</span>    <span class="c1">//스위치 값 변경 이벤트 처리를 위한 delegate 설정</span>
        <span class="k">return</span> <span class="n">cell</span>
    <span class="p">}</span>
</code></pre></div></div>

<h2 id="3-cell-새로고침-추가">3. Cell 새로고침 추가</h2>
<ul>
  <li>스위치 변경 후 label에 취소선을 적용시키도록 새로고침 추가</li>
  <li>myTodoListTableView.reloadRows(at: [indexPath], with: .automatic)</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// MARK: - 스위치 변경 이벤트 처리를 위한 Delegate 채택</span>
<span class="kd">extension</span> <span class="kt">ViewController</span><span class="p">:</span> <span class="kt">MyToDoListCellDelegate</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">switchValueChanged</span><span class="p">(</span><span class="n">_</span> <span class="nv">cell</span><span class="p">:</span> <span class="kt">MyToDoListCell</span><span class="p">,</span> <span class="nv">isOn</span><span class="p">:</span> <span class="kt">Bool</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">//해당 셀의 인덱스 가져여오기</span>
        <span class="k">guard</span> <span class="k">let</span> <span class="nv">indexPath</span> <span class="o">=</span> <span class="n">myTodoListTableView</span><span class="o">.</span><span class="nf">indexPath</span><span class="p">(</span><span class="nv">for</span><span class="p">:</span> <span class="n">cell</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">return</span>
        <span class="p">}</span>        
        <span class="c1">// 스위치 값을 배열에 반영</span>
        <span class="n">myToDoListArray</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="p">]</span><span class="o">.</span><span class="n">toDoIsComplete</span> <span class="o">=</span> <span class="n">isOn</span>
        <span class="c1">// 스위치가 변경될 때마다 테이블 뷰의 해당 셀만 다시 로드, 취소선 때문에</span>
        <span class="n">myTodoListTableView</span><span class="o">.</span><span class="nf">reloadRows</span><span class="p">(</span><span class="nv">at</span><span class="p">:</span> <span class="p">[</span><span class="n">indexPath</span><span class="p">],</span> <span class="nv">with</span><span class="p">:</span> <span class="o">.</span><span class="n">automatic</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<h2 id="4-실행화면">4. 실행화면</h2>
<video width="640" height="360" controls="">
    <source src="../../assets/video/2024-03-26-UITableViewCellDelegate3.mov" type="video/mp4" />
</video>

<h1 id="마무리">마무리</h1>
<ul>
  <li>데이터를 주는 곳에서 델리게이트를 만들고 데이터를 받는 곳에서 델리게이터를 채택하고 사용
    <ul>
      <li>
        <ol>
          <li>Cell클래스의 @IBAction func switchValueChanged(_ sender: UISwitch) 함수 먼저 실행</li>
        </ol>
      </li>
      <li>
        <ol>
          <li>View클래스에서 델리게이트 채택 후 switchValueChanged 함수에서 스위치 변경 이벤트 처리</li>
        </ol>
      </li>
    </ul>
  </li>
</ul>]]></content><author><name>HyeongSub Lim</name></author><category term="UIKit" /><category term="swift" /><category term="iOS" /><category term="Tableview Cell Delegate" /><summary type="html"><![CDATA[Cell Class와 View Class와 상호작용]]></summary></entry><entry><title type="html">[프로그래머스/Swift] 명예의 전당</title><link href="http://localhost:4000/algorithm/%EB%AA%85%EC%98%88%EC%9D%98%EC%A0%84%EB%8B%B9/" rel="alternate" type="text/html" title="[프로그래머스/Swift] 명예의 전당" /><published>2024-03-26T00:00:00+09:00</published><updated>2024-03-26T00:00:00+09:00</updated><id>http://localhost:4000/algorithm/%EB%AA%85%EC%98%88%EC%9D%98%EC%A0%84%EB%8B%B9</id><content type="html" xml:base="http://localhost:4000/algorithm/%EB%AA%85%EC%98%88%EC%9D%98%EC%A0%84%EB%8B%B9/"><![CDATA[<h1 id="문제-설명">문제 설명</h1>
<ul>
  <li>“명예의 전당”이라는 TV 프로그램에서는 매일 1명의 가수가 노래를 부르고, 시청자들의 문자 투표수로 가수에게 점수를 부여합니다. 매일 출연한 가수의 점수가 지금까지 출연 가수들의 점수 중 상위 k번째 이내이면 해당 가수의 점수를 명예의 전당이라는 목록에 올려 기념합니다. 즉 프로그램 시작 이후 초기에 k일까지는 모든 출연 가수의 점수가 명예의 전당에 오르게 됩니다. k일 다음부터는 출연 가수의 점수가 기존의 명예의 전당 목록의 k번째 순위의 가수 점수보다 더 높으면, 출연 가수의 점수가 명예의 전당에 오르게 되고 기존의 k번째 순위의 점수는 명예의 전당에서 내려오게 됩니다.</li>
  <li>이 프로그램에서는 매일 “명예의 전당”의 최하위 점수를 발표합니다. 예를 들어, k = 3이고, 7일 동안 진행된 가수의 점수가 [10, 100, 20, 150, 1, 100, 200]이라면, 명예의 전당에서 발표된 점수는 아래의 그림과 같이 [10, 10, 10, 20, 20, 100, 100]입니다.</li>
</ul>

<table>
    <tr>
        <td>일차</td>
        <td>1</td>
        <td>2</td>
        <td>3</td>
        <td>4</td>
        <td>5</td>
        <td>6</td>
        <td>7</td>
    </tr>
    <tr>
        <td>score</td>
        <td>10</td>
        <td>100</td>
        <td>20</td>
        <td>150</td>
        <td>1</td>
        <td>100</td>
        <td>200</td>
    </tr>
    <tr>
        <td>명예의 전당<br />(k = 3)</td>
        <td>10</td>
        <td>100<br />10</td>
        <td>100<br />20<br />10</td>
        <td>150<br />100<br />20</td>
        <td>150<br />100<br />20</td>
        <td>150<br />100<br />100</td>
        <td>200<br />150<br />100</td>
    </tr>
    <tr>
        <td>발표 점수</td>
        <td>10</td>
        <td>10</td>
        <td>10</td>
        <td>20</td>
        <td>20</td>
        <td>100</td>
        <td>100</td>
    </tr>
</table>

<ul>
  <li>
    <p>명예의 전당 목록의 점수의 개수 k, 1일부터 마지막 날까지 출연한 가수들의 점수인 score가 주어졌을 때, 매일 발표된 명예의 전당의 최하위 점수를 return하는 solution 함수를 완성해주세요.</p>
  </li>
  <li>
    <p><a href="https://school.programmers.co.kr/learn/courses/30/lessons/138477" target="_blank">문제 풀기</a></p>
  </li>
</ul>

<h1 id="제한사항">제한사항</h1>
<ul>
  <li>3 ≤ k ≤ 100</li>
  <li>7 ≤ score의 길이 ≤ 1,000
    <ul>
      <li>0 ≤ score[i] ≤ 2,000</li>
    </ul>
  </li>
</ul>

<h1 id="입출력-예">입출력 예</h1>

<table>
  <thead>
    <tr>
      <th>k</th>
      <th>score</th>
      <th>result</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>3</td>
      <td>[10, 100, 20, 150, 1, 100, 200]</td>
      <td>[10, 10, 10, 20, 20, 100, 100]</td>
    </tr>
    <tr>
      <td>4</td>
      <td>[0, 300, 40, 300, 20, 70, 150, 50, 500, 1000]</td>
      <td>[0, 0, 0, 0, 20, 40, 70, 70, 150, 300]</td>
    </tr>
  </tbody>
</table>

<h2 id="입출력-예-설명">입출력 예 설명</h2>
<h3 id="입출력-예-1">입출력 예 #1</h3>
<ul>
  <li>문제의 예시와 같습니다.</li>
</ul>

<h3 id="입출력-예-2">입출력 예 #2</h3>
<ul>
  <li>아래와 같이, [0, 0, 0, 0, 20, 40, 70, 70, 150, 300]을 return합니다.</li>
</ul>
<table>
    <tr>
        <td>일차</td>
        <td>1</td>
        <td>2</td>
        <td>3</td>
        <td>4</td>
        <td>5</td>
        <td>6</td>
        <td>7</td>
        <td>8</td>
        <td>9</td>
        <td>10</td>
    </tr>
    <tr>
        <td>score</td>
        <td>0</td>
        <td>300</td>
        <td>40</td>
        <td>300</td>
        <td>20</td>
        <td>70</td>
        <td>150</td>
        <td>50</td>
        <td>500</td>
        <td>1000</td>
    </tr>
    <tr>
        <td>명예의 전당<br />(k = 4)</td>
        <td>0</td>
        <td>300<br />0</td>
        <td>300<br />40<br />0</td>
        <td>300<br />300<br />40<br />0</td>
        <td>300<br />300<br />40<br />20</td>
        <td>300<br />300<br />70<br />40</td>
        <td>300<br />300<br />150<br />70</td>
        <td>300<br />300<br />150<br />70</td>
        <td>500<br />300<br />300<br />150</td>
        <td>1000<br />500<br />300<br />300</td>
    </tr>
    <tr>
        <td>발표 점수</td>
        <td>0</td>
        <td>0</td>
        <td>0</td>
        <td>0</td>
        <td>20</td>
        <td>40</td>
        <td>70</td>
        <td>70</td>
        <td>150</td>
        <td>300</td>
    </tr>
</table>

<h1 id="나의-풀이">나의 풀이</h1>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">Foundation</span>

<span class="kd">func</span> <span class="nf">solution</span><span class="p">(</span><span class="n">_</span> <span class="nv">k</span><span class="p">:</span><span class="kt">Int</span><span class="p">,</span> <span class="n">_</span> <span class="nv">score</span><span class="p">:[</span><span class="kt">Int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">arr</span><span class="p">:</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>     <span class="c1">//k수만큼 저장</span>
    <span class="k">var</span> <span class="nv">result</span><span class="p">:</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>  <span class="c1">//결과 값</span>
    
    <span class="k">if</span> <span class="p">(</span><span class="n">k</span> <span class="o">&gt;=</span> <span class="mi">3</span> <span class="o">||</span> <span class="n">k</span> <span class="o">&lt;=</span> <span class="mi">100</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">score</span><span class="o">.</span><span class="n">count</span> <span class="o">&gt;=</span> <span class="mi">7</span> <span class="o">||</span> <span class="n">score</span><span class="o">.</span><span class="n">count</span> <span class="o">&lt;=</span> <span class="mi">1000</span><span class="p">)</span> <span class="p">{</span> 
        <span class="c1">//k개수까지는 무조건 추가</span>
        <span class="c1">//k개수인 경우 현재 값이 최소값보다 크거나 같으면 최소값을 삭제하고 추가</span>
        <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="n">score</span> <span class="p">{</span>
            <span class="k">if</span> <span class="n">arr</span><span class="o">.</span><span class="n">count</span> <span class="o">&lt;</span> <span class="n">k</span> <span class="p">{</span>
                <span class="n">arr</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
                <span class="n">arr</span><span class="o">.</span><span class="nf">sort</span><span class="p">()</span>
                <span class="n">result</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="k">if</span> <span class="k">let</span> <span class="nv">min</span> <span class="o">=</span> <span class="n">arr</span><span class="o">.</span><span class="nf">min</span><span class="p">(),</span>
                    <span class="n">i</span> <span class="o">&gt;=</span> <span class="n">min</span> <span class="p">{</span>
                    <span class="n">arr</span><span class="o">.</span><span class="nf">remove</span><span class="p">(</span><span class="nv">at</span><span class="p">:</span> <span class="mi">0</span><span class="p">)</span>
                    <span class="n">arr</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
                    <span class="n">arr</span><span class="o">.</span><span class="nf">sort</span><span class="p">()</span>
                    <span class="n">result</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
                <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                    <span class="n">result</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">result</span>
<span class="p">}</span>
</code></pre></div></div>

<h1 id="다른-사람-풀이">다른 사람 풀이</h1>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">Foundation</span>
<span class="kd">func</span> <span class="nf">solution</span><span class="p">(</span><span class="n">_</span> <span class="nv">k</span><span class="p">:</span><span class="kt">Int</span><span class="p">,</span> <span class="n">_</span> <span class="nv">score</span><span class="p">:[</span><span class="kt">Int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="p">{</span>
    <span class="nf">return</span> <span class="p">(</span><span class="mi">0</span><span class="o">...</span><span class="n">score</span><span class="o">.</span><span class="n">count</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">map</span><span class="p">{</span>
        <span class="k">let</span> <span class="nv">end</span> <span class="o">=</span> <span class="nv">$0</span> <span class="o">&lt;</span> <span class="n">k</span><span class="o">-</span><span class="mi">1</span> <span class="p">?</span> <span class="nv">$0</span> <span class="p">:</span> <span class="n">k</span><span class="o">-</span><span class="mi">1</span>
        <span class="k">return</span> <span class="kt">Array</span><span class="p">(</span><span class="n">score</span><span class="p">[</span><span class="mi">0</span><span class="o">...</span><span class="nv">$0</span><span class="p">]</span><span class="o">.</span><span class="nf">sorted</span><span class="p">(</span><span class="nv">by</span><span class="p">:</span> <span class="o">&gt;</span><span class="p">)[</span><span class="mi">0</span><span class="o">...</span><span class="n">end</span><span class="p">])</span><span class="o">.</span><span class="n">last</span><span class="o">!</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h1 id="의견">의견</h1>
<ul>
  <li>런타임 에러가 발생해서 제한사항을 추가했다. 보통 없어도 통과인데 간혹 제한사항 추가해야하는 문제가 있다.</li>
  <li>대부분 비슷한 풀이인데 짧게 푼 코드를 찾았다. 다른 사람 코드로 또 배우는 중..</li>
</ul>]]></content><author><name>HyeongSub Lim</name></author><category term="Algorithm" /><category term="Algorithm" /><category term="coding test" /><category term="명예의 전당" /><summary type="html"><![CDATA[[프로그래머스/Swift] 명예의 전당]]></summary></entry><entry><title type="html">[프로그래머스/Swift] 콜라 문제</title><link href="http://localhost:4000/algorithm/%EC%BD%9C%EB%9D%BC%EB%AC%B8%EC%A0%9C/" rel="alternate" type="text/html" title="[프로그래머스/Swift] 콜라 문제" /><published>2024-03-25T00:00:00+09:00</published><updated>2024-03-25T00:00:00+09:00</updated><id>http://localhost:4000/algorithm/%EC%BD%9C%EB%9D%BC%EB%AC%B8%EC%A0%9C</id><content type="html" xml:base="http://localhost:4000/algorithm/%EC%BD%9C%EB%9D%BC%EB%AC%B8%EC%A0%9C/"><![CDATA[<h1 id="문제-설명">문제 설명</h1>
<ul>
  <li>오래전 유행했던 콜라 문제가 있습니다. 콜라 문제의 지문은 다음과 같습니다.
    <ul>
      <li>정답은 아무에게도 말하지 마세요.</li>
      <li>콜라 빈 병 2개를 가져다주면 콜라 1병을 주는 마트가 있다. 빈 병 20개를 가져다주면 몇 병을 받을 수 있는가?</li>
      <li>단, 보유 중인 빈 병이 2개 미만이면, 콜라를 받을 수 없다.</li>
    </ul>
  </li>
  <li>문제를 풀던 상빈이는 콜라 문제의 완벽한 해답을 찾았습니다. 상빈이가 푼 방법은 아래 그림과 같습니다. 우선 콜라 빈 병 20병을 가져가서 10병을 받습니다. 받은 10병을 모두 마신 뒤, 가져가서 5병을 받습니다. 5병 중 4병을 모두 마신 뒤 가져가서 2병을 받고, 또 2병을 모두 마신 뒤 가져가서 1병을 받습니다. 받은 1병과 5병을 받았을 때 남은 1병을 모두 마신 뒤 가져가면 1병을 또 받을 수 있습니다. 이 경우 상빈이는 총 10 + 5 + 2 + 1 + 1 = 19병의 콜라를 받을 수 있습니다.</li>
  <li>문제를 열심히 풀던 상빈이는 일반화된 콜라 문제를 생각했습니다. 이 문제는 빈 병 a개를 가져다주면 콜라 b병을 주는 마트가 있을 때, 빈 병 n개를 가져다주면 몇 병을 받을 수 있는지 계산하는 문제입니다. 기존 콜라 문제와 마찬가지로, 보유 중인 빈 병이 a개 미만이면, 추가적으로 빈 병을 받을 순 없습니다. 상빈이는 열심히 고심했지만, 일반화된 콜라 문제의 답을 찾을 수 없었습니다. 상빈이를 도와, 일반화된 콜라 문제를 해결하는 프로그램을 만들어 주세요.</li>
  <li>
    <p>콜라를 받기 위해 마트에 주어야 하는 병 수 a, 빈 병 a개를 가져다 주면 마트가 주는 콜라 병 수 b, 상빈이가 가지고 있는 빈 병의 개수 n이 매개변수로 주어집니다. 상빈이가 받을 수 있는 콜라의 병 수를 return 하도록 solution 함수를 작성해주세요.</p>
  </li>
  <li><a href="https://school.programmers.co.kr/learn/courses/30/lessons/132267" target="_blank">문제 풀기</a></li>
</ul>

<h1 id="제한사항">제한사항</h1>
<ul>
  <li>1 ≤ b &lt; a ≤ n ≤ 1,000,000</li>
  <li>정답은 항상 int 범위를 넘지 않게 주어집니다.</li>
</ul>

<h1 id="입출력-예">입출력 예</h1>

<table>
  <thead>
    <tr>
      <th>a</th>
      <th>b</th>
      <th>n</th>
      <th>result</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>2</td>
      <td>1</td>
      <td>20</td>
      <td>19</td>
    </tr>
    <tr>
      <td>3</td>
      <td>1</td>
      <td>20</td>
      <td>9</td>
    </tr>
  </tbody>
</table>

<h2 id="입출력-예-설명">입출력 예 설명</h2>
<h3 id="입출력-예-1">입출력 예 #1</h3>
<ul>
  <li>본문에서 설명한 예시입니다.</li>
</ul>

<h3 id="입출력-예-2">입출력 예 #2</h3>
<ul>
  <li>빈 병 20개 중 18개를 마트에 가져가서, 6병의 콜라를 받습니다. 이때 상빈이가 가지고 있는 콜라 병의 수는 8(20 – 18 + 6 = 8)개 입니다.</li>
  <li>빈 병 8개 중 6개를 마트에 가져가서, 2병의 콜라를 받습니다. 이때 상빈이가 가지고 있는 콜라 병의 수는 4(8 – 6 + 2 = 4)개 입니다.</li>
  <li>빈 병 4 개중 3개를 마트에 가져가서, 1병의 콜라를 받습니다. 이때 상빈이가 가지고 있는 콜라 병의 수는 2(4 – 3 + 1 = 2)개 입니다.</li>
  <li>3번의 교환 동안 상빈이는 9(6 + 2 + 1 = 9)병의 콜라를 받았습니다.</li>
</ul>

<h1 id="나의-풀이">나의 풀이</h1>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">Foundation</span>
<span class="kd">func</span> <span class="nf">solution</span><span class="p">(</span><span class="n">_</span> <span class="nv">a</span><span class="p">:</span><span class="kt">Int</span><span class="p">,</span> <span class="n">_</span> <span class="nv">b</span><span class="p">:</span><span class="kt">Int</span><span class="p">,</span> <span class="n">_</span> <span class="nv">n</span><span class="p">:</span><span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
    <span class="c1">//a = 반납 콜라, b = 받는 콜라, n = 가진 콜라</span>
    <span class="k">var</span> <span class="nv">quotient</span><span class="p">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">0</span>   <span class="c1">//몫</span>
    <span class="k">var</span> <span class="nv">remainder</span><span class="p">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">0</span>  <span class="c1">//나머지</span>
    <span class="k">var</span> <span class="nv">myCoke</span><span class="p">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="n">n</span>
    <span class="k">var</span> <span class="nv">result</span><span class="p">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">0</span>
    
    <span class="k">while</span> <span class="kc">true</span> <span class="p">{</span>
        <span class="k">if</span> <span class="n">myCoke</span> <span class="o">/</span> <span class="n">a</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
            <span class="k">break</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="n">quotient</span> <span class="o">=</span> <span class="n">myCoke</span> <span class="o">/</span> <span class="n">a</span>
            <span class="n">remainder</span> <span class="o">=</span> <span class="n">myCoke</span> <span class="o">%</span> <span class="n">a</span>
            
            <span class="n">result</span> <span class="o">+=</span> <span class="p">(</span><span class="n">quotient</span> <span class="o">*</span> <span class="n">b</span><span class="p">)</span> <span class="c1">//받는 콜라 계산</span>
            <span class="n">myCoke</span> <span class="o">=</span> <span class="p">(</span><span class="n">quotient</span> <span class="o">*</span> <span class="n">b</span><span class="p">)</span> <span class="o">+</span> <span class="n">remainder</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">result</span>
<span class="p">}</span>
</code></pre></div></div>

<h1 id="다른-사람-풀이">다른 사람 풀이</h1>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">solution</span><span class="p">(</span><span class="n">_</span> <span class="nv">a</span><span class="p">:</span><span class="kt">Int</span><span class="p">,</span> <span class="n">_</span> <span class="nv">b</span><span class="p">:</span><span class="kt">Int</span><span class="p">,</span> <span class="n">_</span> <span class="nv">n</span><span class="p">:</span><span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
    <span class="nf">return</span> <span class="p">(</span><span class="n">n</span> <span class="o">&gt;</span> <span class="n">b</span> <span class="p">?</span> <span class="n">n</span> <span class="o">-</span> <span class="nv">b</span> <span class="p">:</span> <span class="mi">0</span><span class="p">)</span> <span class="o">/</span> <span class="p">(</span><span class="n">a</span> <span class="o">-</span> <span class="n">b</span><span class="p">)</span> <span class="o">*</span> <span class="n">b</span>
<span class="p">}</span>
</code></pre></div></div>

<h1 id="의견">의견</h1>
<ul>
  <li>벽이 느껴지는 다른 사람의 풀이에 감탄했다…</li>
</ul>]]></content><author><name>HyeongSub Lim</name></author><category term="Algorithm" /><category term="Algorithm" /><category term="coding test" /><category term="콜라 문제" /><summary type="html"><![CDATA[[프로그래머스/Swift] 콜라 문제]]></summary></entry><entry><title type="html">[TIL] 내배캠 iOS앱 개발 공부 20일차</title><link href="http://localhost:4000/TIL/til20/" rel="alternate" type="text/html" title="[TIL] 내배캠 iOS앱 개발 공부 20일차" /><published>2024-03-25T00:00:00+09:00</published><updated>2024-03-25T00:00:00+09:00</updated><id>http://localhost:4000/TIL/til20</id><content type="html" xml:base="http://localhost:4000/TIL/til20/"><![CDATA[<h3 id="데일리-스크럼">데일리 스크럼</h3>
<p><img src="/assets/images/categories/til/2024-03-25-til20.png" alt="" /></p>

<h3 id="알고리즘">알고리즘</h3>
<ul>
  <li>반복문 없이 고차함수 없이 한 줄로 푼 사람이 있어 벽을 느꼈다.</li>
  <li>풀이 보기
    <ul>
      <li><a href="https://limlogging.github.io/algorithm/%EC%BD%9C%EB%9D%BC%EB%AC%B8%EC%A0%9C/" target="_blank">콜라문제</a></li>
    </ul>
  </li>
</ul>

<h3 id="개인-과제-공부">개인 과제 공부</h3>
<ul>
  <li>TableView에서 Datasource 필수 메서드 구현 및 TableViewCell을 상속받아 클래스를 만들기, TableView에서 row수와 row의 cell 데이터 출력 방법을 공부했다.
    <ul>
      <li><a href="https://limlogging.github.io/UIKit/UITableView/" target="_blank">데이터 목록 표시</a></li>
    </ul>
  </li>
</ul>

<h3 id="내일-목표">내일 목표</h3>
<ul>
  <li>오늘 알고리즘에서도 약간 자존감 떨어졌는데 개인 과제의 속도도 빠르고 꾸미기도 잘 꾸미신분을 보고 자극을 받았다! 내일은 조금 더 속도를 내보는 걸로</li>
  <li>알고리즘 문제 풀기</li>
  <li>키워드 하나씩 실습 하기</li>
  <li>과제 풀기</li>
</ul>]]></content><author><name>HyeongSub Lim</name></author><category term="TIL" /><category term="TIL" /><summary type="html"><![CDATA[내배캠 iOS앱 개발 공부 20일차 이야기]]></summary></entry><entry><title type="html">[UIKit] UITableView - 데이터 목록 표시</title><link href="http://localhost:4000/UIKit/UITableView/" rel="alternate" type="text/html" title="[UIKit] UITableView - 데이터 목록 표시" /><published>2024-03-25T00:00:00+09:00</published><updated>2024-03-25T00:00:00+09:00</updated><id>http://localhost:4000/UIKit/UITableView</id><content type="html" xml:base="http://localhost:4000/UIKit/UITableView/"><![CDATA[<h1 id="uitableview">UITableView</h1>
<ul>
  <li>세로로만 스크롤 가능한 뷰</li>
  <li>iOS 애플리케이션에서 테이블 형식의 데이터를 표시하고 관리하는 데 사용되는 중요한 뷰 컴포넌트입니다.</li>
  <li>테이블 뷰는 여러 행으로 구성되며, 각 행에는 하나 이상의 셀이 포함됩니다.</li>
  <li>각 셀은 사용자 인터페이스에 정보를 표시하거나 사용자 상호 작용을 위한 컨트롤을 제공합니다.</li>
</ul>

<h2 id="특징">특징</h2>
<ul>
  <li>다양한 셀 유형
    <ul>
      <li>UITableView는 특정 유형의 데이터를 표시하기 위해 다양한 스타일과 레이아웃의 셀을 지원합니다. 텍스트, 이미지, 버튼 등 다양한 컨텐츠를 포함할 수 있습니다.</li>
    </ul>
  </li>
  <li>스크롤 기능
    <ul>
      <li>테이블 뷰는 데이터가 많거나 너무 긴 경우에도 스크롤하여 모든 데이터에 접근할 수 있도록 합니다.</li>
    </ul>
  </li>
  <li>섹션 및 인덱스
    <ul>
      <li>UITableView는 섹션을 사용하여 데이터를 구성하고 섹션 인덱스를 제공하여 사용자가 특정 부분으로 빠르게 이동할 수 있도록 합니다.</li>
    </ul>
  </li>
  <li>셀 재사용
    <ul>
      <li>UITableView는 셀을 효율적으로 관리하기 위해 셀 재사용 메커니즘을 사용합니다. 이는 메모리 사용량을 최적화하고 성능을 향상시킵니다.</li>
    </ul>
  </li>
  <li>델리게이트 및 데이터 소스
    <ul>
      <li>UITableView는 UITableViewDelegate 및 UITableViewDataSource 프로토콜을 사용하여 사용자 상호 작용 및 데이터 관리를 처리합니다. 데이터 소스는 UITableView에 표시할 데이터를 제공하고, 델리게이트는 사용자 상호 작용 및 테이블 뷰의 동작을 제어합니다.</li>
    </ul>
  </li>
</ul>

<h2 id="사용">사용</h2>
<ul>
  <li>iOS 애플리케이션에서 매우 일반적으로 사용됩니다.</li>
  <li>메시지 리스트, 설정 화면, 사용자 목록 등</li>
</ul>

<h1 id="uitableview-설정-예제-코드">UITableView 설정 예제 코드</h1>

<h2 id="1-스토리보드에-table-view-추가">1. 스토리보드에 Table View 추가</h2>
<p><img src="/assets/images/categories/uikit/2024-03-25-tableviewMain.png" alt="" /></p>

<h2 id="2-tableview-아울렛-변수-추가">2. TableView 아울렛 변수 추가</h2>
<ul>
  <li>스토리보드에 추가한 객체에 접근 할 수 있는 아울렛 변수 추가</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">ViewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>    
    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">toDoListTableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="o">!</span>
 
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>
    <span class="p">}</span>
</code></pre></div></div>

<h2 id="3-tableview-datasource-추가-및-필수-메서드-구현">3. TableView DataSource 추가 및 필수 메서드 구현</h2>
<ul>
  <li>ViewController 클래스에 UITableViewDataSource 프로토콜을 확장(extension)하여 UITableViewDataSource 프로토콜의 메서드를 구현</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">extension</span> <span class="kt">ViewController</span><span class="p">:</span> <span class="kt">UITableViewDataSource</span> <span class="p">{</span>
    <span class="c1">//특정 섹션(section)에 표시할 행(row)의 수를 반환</span>
    <span class="kd">public</span> <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">numberOfRowsInSection</span> <span class="nv">section</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
        <span class="k">return</span> <span class="mi">10</span>   <span class="c1">//10개의 행을 반환하여 표시 </span>
    <span class="p">}</span>
    
    <span class="c1">//메서드는 특정 indexPath에 해당하는 행의 셀을 반환</span>
    <span class="kd">public</span> <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">cellForRowAt</span> <span class="nv">indexPath</span><span class="p">:</span> <span class="kt">IndexPath</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">UITableViewCell</span> <span class="p">{</span>
        <span class="c1">//행에 표시할 셀을 생성하고 반환 </span>
        <span class="k">return</span> <span class="kt">UITableViewCell</span><span class="p">()</span> 
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>세션은 여러개의 row로 구성된 그룹 (아래 빨간 묶음)
<img src="/assets/images/categories/uikit/2024-03-25-tableviewSection.png" alt="" /></li>
</ul>

<h2 id="4-datasource-설정-델리게이트-설정과-동일">4. DataSource 설정 (델리게이트 설정과 동일)</h2>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">ViewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>    
    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">toDoListTableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="o">!</span>
 
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>
        <span class="n">toDoListTableView</span><span class="o">.</span><span class="n">dataSource</span> <span class="o">=</span> <span class="k">self</span> <span class="c1">//UITableView의 dataSource를 현재(self)의 ViewController로 설정</span>
    <span class="p">}</span>
</code></pre></div></div>

<h2 id="5-실행">5. 실행</h2>
<ul>
  <li>row 10개가 생겼는데 데이터가 없습니다.<br />
<img src="../../assets/images/categories/uikit/2024-03-25-TableViewExecute.png" alt="" /></li>
</ul>

<h2 id="6-row에-data를-입력하기위해-cell-추가">6. row에 Data를 입력하기위해 Cell 추가</h2>
<ul>
  <li>라이브러리에서 table view cell을 추가합니다. 
<img src="../../assets/images/categories/uikit/2024-03-25-TableViewCell.png" alt="" /></li>
</ul>

<h2 id="7-cell-식별자identifier-이름-지정">7. Cell 식별자(Identifier) 이름 지정</h2>
<ul>
  <li>
    <p>셀을 선택하고 인스펙터(Inspector) 화면에서 식별자 이름을 지정합니다. 
<img src="../../assets/images/categories/uikit/2024-03-25-TableViewCellIdentifier1.png" alt="" /></p>
  </li>
  <li>
    <p>식별자 이름을 변경하면 다큐먼트 아웃라인(Document Outline) 화면에서도 변경된 것을 확인할 수 있습니다. 
<img src="../../assets/images/categories/uikit/2024-03-25-TableViewCellIdentifier2.png" alt="" /></p>
  </li>
</ul>

<h2 id="8-cell에-연결시킬-class-파일-생성">8. Cell에 연결시킬 Class 파일 생성</h2>
<ul>
  <li>UITableViewCell를 상속 받는 ToDoCell 클래스를 생성합니다. 
<img src="../../assets/images/categories/uikit/2024-03-25-createCellClass.png" alt="" /></li>
</ul>

<h2 id="9-cell에-class-연결">9. Cell에 Class 연결</h2>
<ul>
  <li>스토리보드에서 Cell을 선택하고 인스펙터 화면에서 클래스를 연결합니다. 
<img src="../../assets/images/categories/uikit/2024-03-25-CellClassConnection.png" alt="" /></li>
</ul>

<h2 id="10-cell에-object-추가-및-아울렛-변수-추가">10. Cell에 object 추가 및 아울렛 변수 추가</h2>
<ul>
  <li>label 2개 스위치 1개를 추가했습니다. 
<img src="../../assets/images/categories/uikit/2024-03-25-AddObejctInCell.png" alt="" /></li>
  <li>만들어진 객체의 아울렛 변수 추가했습니다.
    <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">ToDoCell</span><span class="p">:</span> <span class="kt">UITableViewCell</span> <span class="p">{</span>
  <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">idLebel</span><span class="p">:</span> <span class="kt">UILabel</span><span class="o">!</span>        <span class="c1">//id</span>
  <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">titleLabel</span><span class="p">:</span> <span class="kt">UILabel</span><span class="o">!</span>     <span class="c1">//title</span>
  <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">isCompleteSwitch</span><span class="p">:</span> <span class="kt">UISwitch</span><span class="o">!</span>      <span class="c1">//스위치 </span>
    
  <span class="k">override</span> <span class="kd">func</span> <span class="nf">awakeFromNib</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">super</span><span class="o">.</span><span class="nf">awakeFromNib</span><span class="p">()</span>
      <span class="c1">// Initialization code</span>
  <span class="p">}</span>
</code></pre></div>    </div>
  </li>
</ul>

<h2 id="11-cell에-보여줄-배열-생성-및-초기화">11. Cell에 보여줄 배열 생성 및 초기화</h2>
<ul>
  <li>구조체 생성 및 배열 초기화
    <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">struct</span> <span class="kt">ToDo</span> <span class="p">{</span>
      <span class="k">var</span> <span class="nv">id</span><span class="p">:</span> <span class="kt">Int</span>
      <span class="k">var</span> <span class="nv">title</span><span class="p">:</span> <span class="kt">String</span>
      <span class="k">var</span> <span class="nv">isComplete</span><span class="p">:</span> <span class="kt">Bool</span>
  <span class="p">}</span>
  <span class="k">var</span> <span class="nv">toDoListArr</span><span class="p">:</span> <span class="p">[</span><span class="kt">ToDo</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span>
      <span class="kt">ToDo</span><span class="p">(</span><span class="nv">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nv">title</span><span class="p">:</span> <span class="s">"테스트1111"</span><span class="p">,</span> <span class="nv">isComplete</span><span class="p">:</span> <span class="kc">true</span><span class="p">),</span>
      <span class="kt">ToDo</span><span class="p">(</span><span class="nv">id</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="nv">title</span><span class="p">:</span> <span class="s">"테스트2222"</span><span class="p">,</span> <span class="nv">isComplete</span><span class="p">:</span> <span class="kc">false</span><span class="p">),</span>
      <span class="kt">ToDo</span><span class="p">(</span><span class="nv">id</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="nv">title</span><span class="p">:</span> <span class="s">"테스트3333"</span><span class="p">,</span> <span class="nv">isComplete</span><span class="p">:</span> <span class="kc">true</span><span class="p">)</span>
  <span class="p">]</span>
</code></pre></div>    </div>
  </li>
</ul>

<h2 id="12-uitableviewdatasource-필수-메서드-수정">12. UITableViewDataSource 필수 메서드 수정</h2>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">extension</span> <span class="kt">ViewController</span><span class="p">:</span> <span class="kt">UITableViewDataSource</span> <span class="p">{</span>
    <span class="c1">//특정 섹션에 표시할 행의 수</span>
    <span class="kd">public</span> <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">numberOfRowsInSection</span> <span class="nv">section</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">toDoListArr</span><span class="o">.</span><span class="n">count</span> <span class="c1">//테이블 뷰에 표시할 셀의 개수를 배열의 수로 변경</span>
    <span class="p">}</span>
    
    <span class="c1">//특정 indexPath에 해당하는 행의 셀을 반환</span>
    <span class="kd">public</span> <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">cellForRowAt</span> <span class="nv">indexPath</span><span class="p">:</span> <span class="kt">IndexPath</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">UITableViewCell</span> <span class="p">{</span>
        <span class="c1">//재사용 가능한 셀을 생성, 식별자를 Cell과 동일하게, cell이 UITableViewCell라서 만들어놓은 Cell로 다운캐스팅</span>
        <span class="k">let</span> <span class="nv">cell</span> <span class="o">=</span> <span class="n">tableView</span><span class="o">.</span><span class="nf">dequeueReusableCell</span><span class="p">(</span><span class="nv">withIdentifier</span><span class="p">:</span> <span class="s">"ToDoCell"</span><span class="p">,</span> <span class="nv">for</span><span class="p">:</span> <span class="n">indexPath</span><span class="p">)</span> <span class="k">as!</span> <span class="kt">ToDoCell</span>
        
        <span class="c1">//ToDoCell 클래스의 아울렛 변수에 배열의 값을 할당</span>
        <span class="n">cell</span><span class="o">.</span><span class="n">idLebel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="kt">String</span><span class="p">(</span><span class="n">toDoListArr</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="p">]</span><span class="o">.</span><span class="n">id</span><span class="p">)</span>
        <span class="n">cell</span><span class="o">.</span><span class="n">titleLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">toDoListArr</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="p">]</span><span class="o">.</span><span class="n">title</span>
        <span class="n">cell</span><span class="o">.</span><span class="n">isCompleteSwitch</span><span class="o">.</span><span class="n">isOn</span> <span class="o">=</span> <span class="n">toDoListArr</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="p">]</span><span class="o">.</span><span class="n">isComplete</span>
        
        <span class="k">return</span> <span class="n">cell</span> <span class="c1">//셀 반환 </span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="13-실행">13. 실행</h2>
<ul>
  <li>배열의 데이터을 cell에서 확인할 수 있습니다. 
<img src="../../assets/images/categories/uikit/2024-03-25-TableViewCell2.png" alt="" /></li>
</ul>

<h1 id="마무리">마무리</h1>
<ul>
  <li>Table View에서 row와 cell의 데이터는 TableViewDatasource 프로토콜을 채택하여 필수 메서드 구현, viewDidLoad 밑 datasource 설정 필수</li>
  <li>UITableViewCell을 상속받는 클래스를 만들고 스토리보드의 Cell과 연결시키기, 스토리보드 Cell의 식별자 추가하기</li>
</ul>]]></content><author><name>HyeongSub Lim</name></author><category term="UIKit" /><category term="swift" /><category term="iOS" /><category term="UITableView" /><summary type="html"><![CDATA[UITableView - 데이터 목록을 표시하고 사용자와 상호 작용할 수 있는 스크롤 가능한 UI 요소]]></summary></entry><entry><title type="html">[UIKit] Label 밑줄(underline) 및 가운데줄/취소선(Strikethrough) 긋기</title><link href="http://localhost:4000/UIKit/underlineAndStrikethrough/" rel="alternate" type="text/html" title="[UIKit] Label 밑줄(underline) 및 가운데줄/취소선(Strikethrough) 긋기" /><published>2024-03-23T00:00:00+09:00</published><updated>2024-03-23T00:00:00+09:00</updated><id>http://localhost:4000/UIKit/StrikethroughAndUnderline</id><content type="html" xml:base="http://localhost:4000/UIKit/underlineAndStrikethrough/"><![CDATA[<h1 id="nsattributedstring">NSAttributedString</h1>
<ul>
  <li>텍스트에 대한 서식 및 스타일을 적용하는 데 사용되는 클래스입니다.</li>
  <li>NSAttributedString을 사용하면 단순한 문자열을 포맷하고, 텍스트에 다양한 스타일, 폰트, 색상, 그리기 속성 등을 적용할 수 있습니다.</li>
  <li>UILabel, UITextView 및 UITextField와 같은 텍스트 표시 및 입력 컨트롤에서 사용할 수 있습니다.</li>
</ul>

<h1 id="예제-코드">예제 코드</h1>
<ul>
  <li>Label을 추가하고 버튼을 선택했을 때 Label에 밑줄 및 취소선이 생기는 예제입니다.</li>
</ul>

<h2 id="1-label-및-버튼-추가">1. Label 및 버튼 추가</h2>
<p><img src="/assets/images/categories/uikit/2024-03-23-StrikethroughAndUnderlineMain.png" alt="" /></p>

<h2 id="2-string-확장extension-메서드-구현">2. String 확장(extension) 메서드 구현</h2>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">extension</span> <span class="kt">String</span> <span class="p">{</span>
    <span class="c1">// MARK: - 밑줄</span>
    <span class="kd">func</span> <span class="nf">underScore</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">NSAttributedString</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">underScore</span> <span class="o">=</span> <span class="kt">NSMutableAttributedString</span><span class="p">(</span><span class="nv">string</span><span class="p">:</span> <span class="k">self</span><span class="p">)</span>        
        <span class="c1">// 전체 문자열에 밑줄 스타일 속성을 추가</span>
        <span class="n">underScore</span><span class="o">.</span><span class="nf">addAttribute</span><span class="p">(</span><span class="o">.</span><span class="n">underlineStyle</span><span class="p">,</span> <span class="nv">value</span><span class="p">:</span> <span class="kt">NSUnderlineStyle</span><span class="o">.</span><span class="n">single</span><span class="o">.</span><span class="n">rawValue</span><span class="p">,</span> <span class="nv">range</span><span class="p">:</span> <span class="kt">NSMakeRange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">underScore</span><span class="o">.</span><span class="n">length</span><span class="p">))</span>
        <span class="k">return</span> <span class="n">underScore</span>
    <span class="p">}</span>
    <span class="c1">// MARK: - 가운데 밑줄</span>
    <span class="kd">func</span> <span class="nf">strikeThrough</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">NSAttributedString</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">attributeString</span> <span class="o">=</span> <span class="kt">NSMutableAttributedString</span><span class="p">(</span><span class="nv">string</span><span class="p">:</span> <span class="k">self</span><span class="p">)</span>

        <span class="c1">// 전체 문자열에 가운데 밑줄 스타일 속성을 추가</span>
        <span class="c1">// NSAttributedString.Key를 사용하여 서식과 속성을 적용할 수 있음(NSAttributedString.Key.strikethroughStyle을 .strikethroughStyle로 사용 가능)</span>
        <span class="n">attributeString</span><span class="o">.</span><span class="nf">addAttribute</span><span class="p">(</span><span class="kt">NSAttributedString</span><span class="o">.</span><span class="kt">Key</span><span class="o">.</span><span class="n">strikethroughStyle</span><span class="p">,</span> <span class="nv">value</span><span class="p">:</span> <span class="kt">NSUnderlineStyle</span><span class="o">.</span><span class="n">single</span><span class="o">.</span><span class="n">rawValue</span><span class="p">,</span> <span class="nv">range</span><span class="p">:</span> <span class="kt">NSMakeRange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">attributeString</span><span class="o">.</span><span class="n">length</span><span class="p">))</span>        
        <span class="k">return</span> <span class="n">attributeString</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="3-밑줄underline-버튼-이벤트">3. 밑줄(underline) 버튼 이벤트</h2>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">@IBAction</span> <span class="kd">func</span> <span class="nf">underLineButtonTapped</span><span class="p">(</span><span class="n">_</span> <span class="nv">sender</span><span class="p">:</span> <span class="kt">UIButton</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// 레이블의 텍스트에 밑줄을 추가하고 적용</span>
    <span class="n">myLabel</span><span class="o">.</span><span class="n">attributedText</span> <span class="o">=</span> <span class="n">myLabel</span><span class="o">.</span><span class="n">text</span><span class="p">?</span><span class="o">.</span><span class="nf">underScore</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="4-취소선strikethough-버튼-이벤트">4. 취소선(strikethough) 버튼 이벤트</h2>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">@IBAction</span> <span class="kd">func</span> <span class="nf">centerLineButtonTapped</span><span class="p">(</span><span class="n">_</span> <span class="nv">sender</span><span class="p">:</span> <span class="kt">UIButton</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// 레이블의 텍스트에 가운데 밑줄을 추가하고 적용</span>
    <span class="n">myLabel</span><span class="o">.</span><span class="n">attributedText</span> <span class="o">=</span> <span class="n">myLabel</span><span class="o">.</span><span class="n">text</span><span class="p">?</span><span class="o">.</span><span class="nf">strikeThrough</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="5-실행-확인">5. 실행 확인</h2>
<ul>
  <li>
    <p>밑줄(underline)
<img src="/assets/images/categories/uikit/2024-03-23-Underline.png" alt="" /></p>
  </li>
  <li>
    <p>취소선(strikethough)
<img src="/assets/images/categories/uikit/2024-03-23-Strikethrough.png" alt="" /></p>
  </li>
</ul>

<h1 id="마무리">마무리</h1>
<ul>
  <li>NSAttributedString을 사용하면 다양한 스타일을 적용하여 텍스트를 꾸미는 데 유용하다.</li>
  <li>NSAttributedString은 한 번 생성되면 수정할 수 없음. 텍스트를 수정하려면 새로운 NSAttributedString을 생성해야함.</li>
</ul>]]></content><author><name>HyeongSub Lim</name></author><category term="UIKit" /><category term="swift" /><category term="iOS" /><category term="underline" /><category term="Strikethrough" /><summary type="html"><![CDATA[Label에 밑줄(underline), 취소선(Strikethrough) 긋기]]></summary></entry><entry><title type="html">[TIL] 내배캠 iOS앱 개발 공부 19일차</title><link href="http://localhost:4000/TIL/til19/" rel="alternate" type="text/html" title="[TIL] 내배캠 iOS앱 개발 공부 19일차" /><published>2024-03-22T00:00:00+09:00</published><updated>2024-03-22T00:00:00+09:00</updated><id>http://localhost:4000/TIL/til19</id><content type="html" xml:base="http://localhost:4000/TIL/til19/"><![CDATA[<h3 id="데일리-스크럼">데일리 스크럼</h3>
<p><img src="/assets/images/categories/til/2024-03-22-til19.png" alt="" /></p>

<h3 id="알고리즘">알고리즘</h3>
<ul>
  <li>map, enumerated, reversed, reduce 골고루 사용해서 풀었다.</li>
  <li>풀이 보기
    <ul>
      <li><a href="https://limlogging.github.io/algorithm/%ED%91%B8%EB%93%9C%ED%8C%8C%EC%9D%B4%ED%8A%B8%EB%8C%80%ED%9A%8C/" target="_blank">푸드 파이트 대회</a></li>
    </ul>
  </li>
</ul>

<h3 id="개인-과제-공부">개인 과제 공부</h3>
<ul>
  <li>오늘은 개인 과제 키워드 중 하나인 AlertController에 대해서 공부하고 실습했다.</li>
  <li>UIAlertController를 사용하면 delegate를 사용하지 않고도 사용자의 상호작용을 처리할 수 있다.
    <ul>
      <li><a href="https://limlogging.github.io/UIKit/UIAlertController/" target="_blank">얼러트 컨트롤러</a></li>
    </ul>
  </li>
</ul>

<h3 id="내일-목표">내일 목표</h3>
<ul>
  <li>table View Cell에서 처리한 데이터를 주고 받는 공부가 필요한 것 같다.</li>
  <li>알고리즘 문제 풀기</li>
  <li>키워드 하나씩 실습 하기</li>
  <li>과제 풀기</li>
</ul>]]></content><author><name>HyeongSub Lim</name></author><category term="TIL" /><category term="TIL" /><summary type="html"><![CDATA[내배캠 iOS앱 개발 공부 19일차 이야기]]></summary></entry><entry><title type="html">[프로그래머스/Swift] 푸드 파이트 대회</title><link href="http://localhost:4000/algorithm/%ED%91%B8%EB%93%9C%ED%8C%8C%EC%9D%B4%ED%8A%B8%EB%8C%80%ED%9A%8C/" rel="alternate" type="text/html" title="[프로그래머스/Swift] 푸드 파이트 대회" /><published>2024-03-22T00:00:00+09:00</published><updated>2024-03-22T00:00:00+09:00</updated><id>http://localhost:4000/algorithm/%ED%91%B8%EB%93%9C%ED%8C%8C%EC%9D%B4%ED%8A%B8%EB%8C%80%ED%9A%8C</id><content type="html" xml:base="http://localhost:4000/algorithm/%ED%91%B8%EB%93%9C%ED%8C%8C%EC%9D%B4%ED%8A%B8%EB%8C%80%ED%9A%8C/"><![CDATA[<h1 id="문제-설명">문제 설명</h1>
<ul>
  <li>수웅이는 매달 주어진 음식을 빨리 먹는 푸드 파이트 대회를 개최합니다. 이 대회에서 선수들은 1대 1로 대결하며, 매 대결마다 음식의 종류와 양이 바뀝니다. 대결은 준비된 음식들을 일렬로 배치한 뒤, 한 선수는 제일 왼쪽에 있는 음식부터 오른쪽으로, 다른 선수는 제일 오른쪽에 있는 음식부터 왼쪽으로 순서대로 먹는 방식으로 진행됩니다. 중앙에는 물을 배치하고, 물을 먼저 먹는 선수가 승리하게 됩니다.</li>
  <li>이때, 대회의 공정성을 위해 두 선수가 먹는 음식의 종류와 양이 같아야 하며, 음식을 먹는 순서도 같아야 합니다. 또한, 이번 대회부터는 칼로리가 낮은 음식을 먼저 먹을 수 있게 배치하여 선수들이 음식을 더 잘 먹을 수 있게 하려고 합니다. 이번 대회를 위해 수웅이는 음식을 주문했는데, 대회의 조건을 고려하지 않고 음식을 주문하여 몇 개의 음식은 대회에 사용하지 못하게 되었습니다.</li>
  <li>예를 들어, 3가지의 음식이 준비되어 있으며, 칼로리가 적은 순서대로 1번 음식을 3개, 2번 음식을 4개, 3번 음식을 6개 준비했으며, 물을 편의상 0번 음식이라고 칭한다면, 두 선수는 1번 음식 1개, 2번 음식 2개, 3번 음식 3개씩을 먹게 되므로 음식의 배치는 “1223330333221”이 됩니다. 따라서 1번 음식 1개는 대회에 사용하지 못합니다.</li>
  <li>
    <p>수웅이가 준비한 음식의 양을 칼로리가 적은 순서대로 나타내는 정수 배열 food가 주어졌을 때, 대회를 위한 음식의 배치를 나타내는 문자열을 return 하는 solution 함수를 완성해주세요.</p>
  </li>
  <li><a href="https://school.programmers.co.kr/learn/courses/30/lessons/134240" target="_blank">문제 풀기</a></li>
</ul>

<h1 id="제한사항">제한사항</h1>
<ul>
  <li>2 ≤ food의 길이 ≤ 9</li>
  <li>1 ≤ food의 각 원소 ≤ 1,000</li>
  <li>food에는 칼로리가 적은 순서대로 음식의 양이 담겨 있습니다.</li>
  <li>food[i]는 i번 음식의 수입니다.</li>
  <li>food[0]은 수웅이가 준비한 물의 양이며, 항상 1입니다.</li>
  <li>정답의 길이가 3 이상인 경우만 입력으로 주어집니다.</li>
</ul>

<h1 id="입출력-예">입출력 예</h1>

<table>
  <thead>
    <tr>
      <th>food</th>
      <th>result</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>[1, 3, 4, 6]</td>
      <td>“1223330333221”</td>
    </tr>
    <tr>
      <td>[1, 7, 1, 2]</td>
      <td>“111303111”</td>
    </tr>
  </tbody>
</table>

<h2 id="입출력-예-설명">입출력 예 설명</h2>
<h3 id="입출력-예-1">입출력 예 #1</h3>
<ul>
  <li>문제 예시와 같습니다.</li>
</ul>

<h3 id="입출력-예-2">입출력 예 #2</h3>
<ul>
  <li>두 선수는 1번 음식 3개, 3번 음식 1개를 먹게 되므로 음식의 배치는 “111303111”입니다.</li>
</ul>

<h1 id="나의-풀이">나의 풀이</h1>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">Foundation</span>

<span class="kd">func</span> <span class="nf">solution</span><span class="p">(</span><span class="n">_</span> <span class="nv">food</span><span class="p">:[</span><span class="kt">Int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="kt">String</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">arr</span><span class="p">:</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="c1">//배열 앞부분 구하기</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">index</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span> <span class="k">in</span> <span class="n">food</span><span class="o">.</span><span class="nf">dropFirst</span><span class="p">()</span><span class="o">.</span><span class="nf">map</span><span class="p">({</span> <span class="nv">$0</span> <span class="o">/</span> <span class="mi">2</span> <span class="p">})</span><span class="o">.</span><span class="nf">enumerated</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span><span class="o">..&lt;</span><span class="n">value</span> <span class="p">{</span>
            <span class="n">arr</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="n">index</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="c1">//배열 뒷부분은 추가</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">index</span><span class="p">,</span><span class="n">value</span><span class="p">)</span> <span class="k">in</span> <span class="n">arr</span><span class="o">.</span><span class="nf">reversed</span><span class="p">()</span><span class="o">.</span><span class="nf">enumerated</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">if</span> <span class="n">index</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
            <span class="c1">//0번일땐 두개 추가 </span>
            <span class="n">arr</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
            <span class="n">arr</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="n">arr</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="c1">//문자열로 변경</span>
    <span class="k">return</span> <span class="n">arr</span><span class="o">.</span><span class="nf">reduce</span><span class="p">(</span><span class="s">""</span><span class="p">){</span><span class="nv">$0</span> <span class="o">+</span> <span class="kt">String</span><span class="p">(</span><span class="nv">$1</span><span class="p">)}</span>
<span class="p">}</span>
</code></pre></div></div>
<h1 id="다른-사람-풀이">다른 사람 풀이</h1>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">Foundation</span>

<span class="kd">func</span> <span class="nf">solution</span><span class="p">(</span><span class="n">_</span> <span class="nv">food</span><span class="p">:[</span><span class="kt">Int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="kt">String</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">result</span> <span class="o">=</span> <span class="s">""</span>
    <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="n">food</span><span class="o">.</span><span class="n">indices</span> <span class="p">{</span>
        <span class="n">result</span> <span class="o">+=</span> <span class="kt">String</span><span class="p">(</span><span class="nv">repeating</span><span class="p">:</span> <span class="kt">String</span><span class="p">(</span><span class="n">i</span><span class="p">),</span> <span class="nv">count</span><span class="p">:</span> <span class="n">food</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">result</span> <span class="o">+</span> <span class="s">"0"</span> <span class="o">+</span> <span class="n">result</span><span class="o">.</span><span class="nf">reversed</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div></div>

<h1 id="의견">의견</h1>
<ul>
  <li>map, enumerated, reversed, reduce에 조금 익숙해졌고 첫번째 값을 버릴 수 있는 dropFirst를 알았다.</li>
  <li>다른 사람들은 append를 잘 사용하지 않는 것 같다. 다른 방법에 대해서도 찾아보고 익숙해져야겠다.</li>
</ul>]]></content><author><name>HyeongSub Lim</name></author><category term="Algorithm" /><category term="Algorithm" /><category term="coding test" /><category term="푸드 파이트 대회" /><summary type="html"><![CDATA[[프로그래머스/Swift] 푸드 파이트 대회]]></summary></entry><entry><title type="html">[UIKit] 얼러트 컨트롤러(UIAlertController)</title><link href="http://localhost:4000/UIKit/UIAlertController/" rel="alternate" type="text/html" title="[UIKit] 얼러트 컨트롤러(UIAlertController)" /><published>2024-03-21T00:00:00+09:00</published><updated>2024-03-21T00:00:00+09:00</updated><id>http://localhost:4000/UIKit/UIAlertController</id><content type="html" xml:base="http://localhost:4000/UIKit/UIAlertController/"><![CDATA[<h1 id="얼러트-컨트롤러uialertcontroller란">얼러트 컨트롤러(UIAlertController)란?</h1>
<ul>
  <li>iOS 애플리케이션에서 경고 메시지, 알림 창, 또는 사용자에게 선택 옵션을 제공하는 팝업 창을 표시하는 데 사용되는 클래스입니다.</li>
  <li>UIKit 프레임워크에서 제공되며, 모든 iOS 버전에서 사용할 수 있습니다.</li>
</ul>

<h1 id="스타일">스타일</h1>
<ul>
  <li>.alert (경고 메시지 / 알림)</li>
  <li>.actionSheet (사용자 선택 옵션 목록)</li>
</ul>

<h1 id="예제-코드">예제 코드</h1>
<h2 id="1-버튼-추가">1. 버튼 추가</h2>
<ul>
  <li>버튼을 선택했을 때 Alert 창을 띄우기 위해서 버튼을 추가합니다.</li>
  <li>“alert 테스트” 버튼을 추가했습니다.
<img src="/assets/images/categories/uikit/2024-03-21-alertTestButton.png" alt="" /></li>
</ul>

<h2 id="2-uialertcontroller-생성">2. UIAlertController 생성</h2>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">@IBAction</span> <span class="kd">func</span> <span class="nf">alertTestButtonTapped</span><span class="p">(</span><span class="n">_</span> <span class="nv">sender</span><span class="p">:</span> <span class="kt">UIButton</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">//제목은 할일 추가로, 메시지는 할일을 추가하세요로 표시</span>
    <span class="k">let</span> <span class="nv">alertController</span> <span class="o">=</span> <span class="kt">UIAlertController</span><span class="p">(</span><span class="nv">title</span><span class="p">:</span> <span class="s">"할일 추가"</span><span class="p">,</span> <span class="nv">message</span><span class="p">:</span> <span class="s">"할일을 추가하세요"</span><span class="p">,</span> <span class="nv">preferredStyle</span><span class="p">:</span> <span class="o">.</span><span class="n">alert</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="3-uialertcontroller를-화면에-표시-present">3. UIAlertController를 화면에 표시 (present)</h2>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">@IBAction</span> <span class="kd">func</span> <span class="nf">alertTestButtonTapped</span><span class="p">(</span><span class="n">_</span> <span class="nv">sender</span><span class="p">:</span> <span class="kt">UIButton</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">alertController</span> <span class="o">=</span> <span class="kt">UIAlertController</span><span class="p">(</span><span class="nv">title</span><span class="p">:</span> <span class="s">"할 일 추가"</span><span class="p">,</span> <span class="nv">message</span><span class="p">:</span> <span class="s">"할 일을 추가하세요"</span><span class="p">,</span> <span class="nv">preferredStyle</span><span class="p">:</span> <span class="o">.</span><span class="n">alert</span><span class="p">)</span>

    <span class="c1">//present 메서드를 사용하여 화면에 모달로 표시, 추가하지 않으면 안보임</span>
    <span class="k">self</span><span class="o">.</span><span class="nf">present</span><span class="p">(</span><span class="n">alertController</span><span class="p">,</span> <span class="nv">animated</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="nv">completion</span><span class="p">:</span> <span class="kc">nil</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="4-alert-동작-확인">4. alert 동작 확인</h2>
<ul>
  <li>preferredStyle에 따라서 스타일이 달라집니다.</li>
</ul>

<table>
  <thead>
    <tr>
      <th style="text-align: center">preferredStyle: .alert</th>
      <th style="text-align: center">preferredStyle: .actionSheet</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center"><img src="/assets/images/categories/uikit/2024-03-21-preferredStyleAlert.png" /></td>
      <td style="text-align: center"><img src="/assets/images/categories/uikit/2024-03-21-preferredStyleActionSheet.png" /></td>
    </tr>
  </tbody>
</table>

<h2 id="5-alert에-취소-버튼-추가">5. alert에 취소 버튼 추가</h2>
<ul>
  <li>alert 창에서 버튼이 없어서 창을 닫을 수가 없습니다.</li>
  <li>취소 버튼을 추가합니다.
    <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">@IBAction</span> <span class="kd">func</span> <span class="nf">alertTestButtonTapped</span><span class="p">(</span><span class="n">_</span> <span class="nv">sender</span><span class="p">:</span> <span class="kt">UIButton</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">let</span> <span class="nv">alertController</span> <span class="o">=</span> <span class="kt">UIAlertController</span><span class="p">(</span><span class="nv">title</span><span class="p">:</span> <span class="s">"할 일 추가"</span><span class="p">,</span> <span class="nv">message</span><span class="p">:</span> <span class="s">"할 일을 추가하세요"</span><span class="p">,</span> <span class="nv">preferredStyle</span><span class="p">:</span> <span class="o">.</span><span class="n">alert</span><span class="p">)</span>

  <span class="c1">// "취소" 버튼을 생성합니다. 제목은 "취소"로, 스타일은 .cancel로 설정합니다.        </span>
  <span class="k">let</span> <span class="nv">cancelButton</span> <span class="o">=</span> <span class="kt">UIAlertAction</span><span class="p">(</span><span class="nv">title</span><span class="p">:</span> <span class="s">"취소"</span><span class="p">,</span> <span class="nv">style</span><span class="p">:</span> <span class="o">.</span><span class="n">cancel</span><span class="p">,</span> <span class="nv">handler</span><span class="p">:</span> <span class="kc">nil</span><span class="p">)</span>
  <span class="c1">//생성한 "취소" 버튼을 UIAlertController에 추가합니다.</span>
  <span class="n">alertController</span><span class="o">.</span><span class="nf">addAction</span><span class="p">(</span><span class="n">cancelButton</span><span class="p">)</span>
    
  <span class="k">self</span><span class="o">.</span><span class="nf">present</span><span class="p">(</span><span class="n">alertController</span><span class="p">,</span> <span class="nv">animated</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="nv">completion</span><span class="p">:</span> <span class="kc">nil</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>취소 버튼이 생기고 취소가 가능해졌습니다. 
<img src="/assets/images/categories/uikit/2024-03-21-alertCancelButton.png" alt="" /></li>
</ul>

<h2 id="6-alert에-textfield-추가">6. alert에 TextField 추가</h2>
<ul>
  <li>UIAlertController의 addTextField를 사용하여 TextField를 추가합니다.
    <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">alertController</span><span class="o">.</span><span class="n">addTextField</span> <span class="p">{</span> <span class="n">textField</span> <span class="k">in</span>
  <span class="n">textField</span><span class="o">.</span><span class="n">placeholder</span> <span class="o">=</span> <span class="s">"할 일을 입력하세요."</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>텍스트 필드를 확인 할 수 있습니다. 
<img src="/assets/images/categories/uikit/2024-03-21-alertTextField.png" alt="" /></li>
</ul>

<h2 id="7-textfield를-처리할-추가-버튼-생성">7. TextField를 처리할 추가 버튼 생성</h2>
<ul>
  <li>취소 버튼 추가할때와 방법이 같습니다.
    <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="nv">addButton</span> <span class="o">=</span> <span class="kt">UIAlertAction</span><span class="p">(</span><span class="nv">title</span><span class="p">:</span> <span class="s">"추가"</span><span class="p">,</span> <span class="nv">style</span><span class="p">:</span> <span class="o">.</span><span class="k">default</span><span class="p">)</span> 
<span class="n">alertController</span><span class="o">.</span><span class="nf">addAction</span><span class="p">(</span><span class="n">addButton</span><span class="p">)</span>                
</code></pre></div>    </div>
  </li>
  <li>실행해보면 버튼은 추가 됐는데 입력값을 처리할 수 없습니다.</li>
  <li>입력 값 확인을 위해 코드를 수정합니다.
    <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="nv">addButton</span> <span class="o">=</span> <span class="kt">UIAlertAction</span><span class="p">(</span><span class="nv">title</span><span class="p">:</span> <span class="s">"추가"</span><span class="p">,</span> <span class="nv">style</span><span class="p">:</span> <span class="o">.</span><span class="k">default</span><span class="p">)</span> <span class="p">{</span> <span class="n">_</span> <span class="k">in</span>
  <span class="c1">// 사용자가 입력한 값을 확인하고 처리합니다.</span>
  <span class="k">if</span> <span class="k">let</span> <span class="nv">textField</span> <span class="o">=</span> <span class="n">alertController</span><span class="o">.</span><span class="n">textFields</span><span class="p">?</span><span class="o">.</span><span class="n">first</span><span class="p">,</span> <span class="k">let</span> <span class="nv">text</span> <span class="o">=</span> <span class="n">textField</span><span class="o">.</span><span class="n">text</span> <span class="p">{</span>
      <span class="nf">print</span><span class="p">(</span><span class="s">"입력된 값: </span><span class="se">\(</span><span class="n">text</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="n">alertController</span><span class="o">.</span><span class="nf">addAction</span><span class="p">(</span><span class="n">addButton</span><span class="p">)</span>          
</code></pre></div>    </div>
  </li>
  <li>값 입력 
<img src="/assets/images/categories/uikit/2024-03-21-alertTextFieldInputValue.png" alt="" /></li>
  <li>출력 결과 확인
<img src="/assets/images/categories/uikit/2024-03-21-result.png" alt="" /></li>
</ul>

<h1 id="마무리">마무리</h1>
<ul>
  <li>UIAlertController를 사용하면 delegate를 사용하지 않고도 사용자의 상호작용을 처리할 수 있다 !!!</li>
</ul>]]></content><author><name>HyeongSub Lim</name></author><category term="UIKit" /><category term="swift" /><category term="iOS" /><category term="UIAlertController" /><summary type="html"><![CDATA[UIAlertController - 경고 메시지, 알림 창, 사용자 선택 옵션 팝업 창 제공]]></summary></entry><entry><title type="html">[UIKit] 코드로 화면 이동</title><link href="http://localhost:4000/uikit/%EC%BD%94%EB%93%9C%EB%A1%9C%ED%99%94%EB%A9%B4%EC%9D%B4%EB%8F%99/" rel="alternate" type="text/html" title="[UIKit] 코드로 화면 이동" /><published>2024-03-21T00:00:00+09:00</published><updated>2024-03-21T00:00:00+09:00</updated><id>http://localhost:4000/uikit/%EC%BD%94%EB%93%9C%EB%A1%9C%ED%99%94%EB%A9%B4%EC%9D%B4%EB%8F%99</id><content type="html" xml:base="http://localhost:4000/uikit/%EC%BD%94%EB%93%9C%EB%A1%9C%ED%99%94%EB%A9%B4%EC%9D%B4%EB%8F%99/"><![CDATA[<h1 id="코드로-화면-이동">코드로 화면 이동</h1>
<ul>
  <li>스토리보드 라이브러리에서 view Controller를 추가하지 않고 코드로 작성하여 화면을 이동하는 방법입니다.</li>
</ul>

<h1 id="1-cocoa-touch-class-파일-생성">1. cocoa touch class 파일 생성</h1>
<ul>
  <li>프로젝트에서 우클릭
<img src="/assets/images/categories/uikit/2024-03-21-화면이동1.png" alt="" /></li>
  <li>코코아 터치 클래스 선택 
<img src="/assets/images/categories/uikit/2024-03-21-화면이동2.png" alt="" /></li>
  <li>클래스 이름을 정하고 Subclass를 UIViewController로 설정 
<img src="/assets/images/categories/uikit/2024-03-21-화면이동3.png" alt="" /></li>
  <li>파일 생성 
<img src="/assets/images/categories/uikit/2024-03-21-화면이동4.png" alt="" /></li>
</ul>

<h1 id="2-viewcontroller에서-추가한-컨트롤러-불러오기">2. ViewController에서 추가한 컨트롤러 불러오기</h1>
<h2 id="버튼-생성-및-코드-추가">버튼 생성 및 코드 추가</h2>
<ul>
  <li>ViewController에서 버튼을 생성하고 연결합니다. 
<img src="/assets/images/categories/uikit/2024-03-21-화면이동5.png" alt="" /></li>
  <li>화면 연결을 위해 코드를 추가합니다.
    <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">@IBAction</span> <span class="kd">func</span> <span class="nf">nextButtonTapped</span><span class="p">(</span><span class="n">_</span> <span class="nv">sender</span><span class="p">:</span> <span class="kt">UIButton</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">let</span> <span class="nv">nextVC</span> <span class="o">=</span> <span class="kt">NextViewController</span><span class="p">()</span>   <span class="c1">//새로만든 클래스 인스턴스 생성하고 변수에 할당 </span>

  <span class="c1">//present메서드를 사용하여 nextVC를 화면에 표시합니다. </span>
  <span class="nf">present</span><span class="p">(</span><span class="n">nextVC</span><span class="p">,</span> <span class="nv">animated</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span> <span class="nv">completion</span><span class="p">:</span> <span class="kc">nil</span><span class="p">)</span>   
  <span class="cm">/*
  첫 번째 매개변수 (nextVC): 표시할 뷰 컨트롤러
  두 번째 매개변수 (animated): 화면에 애니메이션 표시 유무 
  세 번째 매개변수 (completion): 뷰 컨트롤러가 표시된 후에 실행할 클로저, 없으면 nil  
  */</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <h2 id="실행">실행</h2>
  </li>
  <li>실행하면 뭐가 화면이 뜬건지 기존 화면이 작아진 건지 알 수 없습니다.</li>
  <li>만들어진 클래스에서 코드를 수정합니다.</li>
</ul>

<table>
  <tbody>
    <tr>
      <td><img src="/assets/images/categories/uikit/2024-03-21-화면이동6.png" alt="" /></td>
      <td><img src="/assets/images/categories/uikit/2024-03-21-화면이동7.png" alt="" /></td>
    </tr>
  </tbody>
</table>

<h1 id="3-새로-만든-클래스-파일-수정">3. 새로 만든 클래스 파일 수정</h1>
<h2 id="label-추가">Label 추가</h2>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">UIKit</span>
<span class="kd">class</span> <span class="kt">NextViewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">nextViewLabel</span> <span class="o">=</span> <span class="kt">UILabel</span><span class="p">()</span> <span class="c1">//Label 추가 </span>
</code></pre></div></div>
<ul>
  <li>화면에서 label을 볼 수 있게 기본 text를 입력하고 view.addSubview(nextViewLabel) 코드를 추가합니다.
    <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>
  <span class="n">view</span><span class="o">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="o">.</span><span class="n">systemPink</span>  <span class="c1">//화면 배경색을 핑크로 </span>
            
  <span class="n">nextViewLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">"Hello"</span>

  <span class="c1">//현재 UIViewController의 뷰 계층 구조에 새로운 UILabel을 추가</span>
  <span class="c1">//화면에 새로운 텍스트 레이블이 추가되어 사용자에게 표시 </span>
  <span class="n">view</span><span class="o">.</span><span class="nf">addSubview</span><span class="p">(</span><span class="n">nextViewLabel</span><span class="p">)</span>  
<span class="p">}</span>
</code></pre></div>    </div>
    <h3 id="실행-1">실행</h3>
  </li>
  <li>오토레이아웃을 설정하지 않아서 Hello가 보이지 않습니다. 
<img src="/assets/images/categories/uikit/2024-03-21-화면이동8.png" alt="" /></li>
</ul>

<h2 id="오토레이아웃-설정">오토레이아웃 설정</h2>
<ul>
  <li>오토레이아웃을 설정합니다.
    <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>
  <span class="n">view</span><span class="o">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="o">.</span><span class="n">systemPink</span>  <span class="c1">//화면 배경색을 핑크로 </span>
            
  <span class="n">nextViewLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">"Hello"</span>

  <span class="c1">//현재 UIViewController의 뷰 계층 구조에 새로운 UILabel을 추가</span>
  <span class="c1">//화면에 새로운 텍스트 레이블이 추가되어 사용자에게 표시 </span>
  <span class="n">view</span><span class="o">.</span><span class="nf">addSubview</span><span class="p">(</span><span class="n">nextViewLabel</span><span class="p">)</span>  
    
  <span class="c1">// nextViewLabel의 autoresizing mask를 사용하지 않고 수동으로 레이아웃을 설정</span>
  <span class="n">nextViewLabel</span><span class="o">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="kc">false</span>
  <span class="c1">//x축 가운데 위치</span>
  <span class="n">nextViewLabel</span><span class="o">.</span><span class="n">centerXAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">view</span><span class="o">.</span><span class="n">centerXAnchor</span><span class="p">)</span><span class="o">.</span><span class="n">isActive</span> <span class="o">=</span> <span class="kc">true</span>
  <span class="c1">//y축 가운데 위치</span>
  <span class="n">nextViewLabel</span><span class="o">.</span><span class="n">centerYAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">view</span><span class="o">.</span><span class="n">centerYAnchor</span><span class="p">)</span><span class="o">.</span><span class="n">isActive</span> <span class="o">=</span> <span class="kc">true</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>스토리보드에서 하는 x,y 설정이 아래 3줄 코드와 같습니다. 
<img src="/assets/images/categories/uikit/2024-03-21-화면이동9.png" alt="" />
    <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">nextViewLabel</span><span class="o">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="kc">false</span>
<span class="n">nextViewLabel</span><span class="o">.</span><span class="n">centerXAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">view</span><span class="o">.</span><span class="n">centerXAnchor</span><span class="p">)</span><span class="o">.</span><span class="n">isActive</span> <span class="o">=</span> <span class="kc">true</span>
<span class="n">nextViewLabel</span><span class="o">.</span><span class="n">centerYAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">view</span><span class="o">.</span><span class="n">centerYAnchor</span><span class="p">)</span><span class="o">.</span><span class="n">isActive</span> <span class="o">=</span> <span class="kc">true</span>
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="실행-2">실행</h3>
<ul>
  <li>정상적으로 Hello가 출력 된 것을 알 수 있습니다.</li>
  <li>화면을 아래로 드래그하면 화면이 닫힙니다. 
<img src="/assets/images/categories/uikit/2024-03-21-화면이동10.png" alt="" /></li>
</ul>

<h1 id="4-view-컨트롤러에서-text값-전달하여-화면에-출력">4. View 컨트롤러에서 Text값 전달하여 화면에 출력</h1>
<ul>
  <li>Hello 고정 값이 아닌 ViewController에서 문자열을 받아와 출력하는 방법입니다.</li>
</ul>

<h2 id="추가한-클래스-수정">추가한 클래스 수정</h2>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="nv">nextViewLabel</span> <span class="o">=</span> <span class="kt">UILabel</span><span class="p">()</span> <span class="c1">//Label 추가 </span>
<span class="c1">//label 아래에 옵셔널 변수를 추가합니다. </span>
<span class="k">var</span> <span class="nv">testLabel</span><span class="p">:</span> <span class="kt">String</span><span class="p">?</span>  <span class="c1">//View에서 문자열을 받기 위해 추가</span>

<span class="c1">// 그리고 ViewDidLoad 함수 안에 코드를 수정합니다. </span>
<span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>
    <span class="n">view</span><span class="o">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="o">.</span><span class="n">systemPink</span>  <span class="c1">//화면 배경색</span>
            
    <span class="c1">//nextViewLabel.text = "Hello"  //기존코드 주석</span>
    <span class="n">nextViewLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">testLabel</span>  <span class="c1">//Hello 문자열을 변수로 변경 </span>
</code></pre></div></div>
<ul>
  <li>text가 옵셔널 타입으로 되어있어 옵셔널 변수를 추가
<img src="/assets/images/categories/uikit/2024-03-21-화면이동11.png" alt="" /></li>
</ul>

<h2 id="view-controller-수정">View Controller 수정</h2>
<ul>
  <li>기존 코드에 넘겨줄 문자열을 추가합니다
    <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">@IBAction</span> <span class="kd">func</span> <span class="nf">nextButtonTapped</span><span class="p">(</span><span class="n">_</span> <span class="nv">sender</span><span class="p">:</span> <span class="kt">UIButton</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">let</span> <span class="nv">nextVC</span> <span class="o">=</span> <span class="kt">NextViewController</span><span class="p">()</span>   
  <span class="n">nextVC</span><span class="o">.</span><span class="n">testLabel</span> <span class="o">=</span> <span class="s">"안녕하세요~~!!"</span> <span class="c1">//추가</span>
  <span class="nf">present</span><span class="p">(</span><span class="n">nextVC</span><span class="p">,</span> <span class="nv">animated</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span> <span class="nv">completion</span><span class="p">:</span> <span class="kc">nil</span><span class="p">)</span>   
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
</ul>

<h2 id="실행-3">실행</h2>
<ul>
  <li>정상적으로 문자열을 받아 출력
<img src="/assets/images/categories/uikit/2024-03-21-화면이동12.png" alt="" /></li>
</ul>

<h1 id="5-버튼을-만들어서-버튼으로-화면-닫기">5. 버튼을 만들어서 버튼으로 화면 닫기</h1>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="nv">nextViewLabel</span> <span class="o">=</span> <span class="kt">UILabel</span><span class="p">()</span>
<span class="k">var</span> <span class="nv">testLabel</span><span class="p">:</span> <span class="kt">String</span><span class="p">?</span>  
<span class="k">var</span> <span class="nv">backButton</span> <span class="o">=</span> <span class="kt">UIButton</span><span class="p">()</span>     <span class="c1">//버튼 추가 </span>

<span class="c1">//버튼 셋팅 추가 </span>
<span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">backButton</span><span class="o">.</span><span class="nf">setTitle</span><span class="p">(</span><span class="s">"뒤로가기!"</span><span class="p">,</span> <span class="nv">for</span><span class="p">:</span> <span class="o">.</span><span class="n">normal</span><span class="p">)</span>
    <span class="n">backButton</span><span class="o">.</span><span class="nf">addTarget</span><span class="p">(</span><span class="k">self</span><span class="p">,</span> <span class="nv">action</span><span class="p">:</span> <span class="k">#selector</span><span class="p">(</span><span class="n">backButtonTapped</span><span class="p">),</span> <span class="nv">for</span><span class="p">:</span> <span class="o">.</span><span class="n">touchUpInside</span><span class="p">)</span>
    <span class="n">view</span><span class="o">.</span><span class="nf">addSubview</span><span class="p">(</span><span class="n">backButton</span><span class="p">)</span>

    <span class="n">backButton</span><span class="o">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="kc">false</span>
    
    <span class="n">backButton</span><span class="o">.</span><span class="n">widthAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalToConstant</span><span class="p">:</span> <span class="mi">70</span><span class="p">)</span><span class="o">.</span><span class="n">isActive</span> <span class="o">=</span> <span class="kc">true</span>
    <span class="n">backButton</span><span class="o">.</span><span class="n">heightAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalToConstant</span><span class="p">:</span> <span class="mi">40</span><span class="p">)</span><span class="o">.</span><span class="n">isActive</span> <span class="o">=</span> <span class="kc">true</span>
    <span class="n">backButton</span><span class="o">.</span><span class="n">bottomAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">view</span><span class="o">.</span><span class="n">bottomAnchor</span><span class="p">,</span> <span class="nv">constant</span><span class="p">:</span> <span class="o">-</span><span class="mi">40</span><span class="p">)</span><span class="o">.</span><span class="n">isActive</span> <span class="o">=</span> <span class="kc">true</span>
    <span class="n">backButton</span><span class="o">.</span><span class="n">centerXAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">view</span><span class="o">.</span><span class="n">centerXAnchor</span><span class="p">)</span><span class="o">.</span><span class="n">isActive</span> <span class="o">=</span> <span class="kc">true</span>
<span class="p">}</span>
<span class="c1">// 버튼 종료 추가 </span>
<span class="kd">@objc</span> <span class="kd">func</span> <span class="nf">backButtonTapped</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">//dissmiss는 모달로 표시된 뷰 컨트롤러를 제거함 </span>
    <span class="nf">dismiss</span><span class="p">(</span><span class="nv">animated</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="nv">completion</span><span class="p">:</span> <span class="kc">nil</span><span class="p">)</span>    <span class="c1">// 전 화면으로 돌아가기</span>
    <span class="cm">/*
    첫번째 파라미터: 모달이 제거되는 애니메이션 실행 유무 
    두번째 파라미터: 모달이 제거된 후에 실행할 클로저, 없으면 nil 
    */</span>
<span class="p">}</span>
</code></pre></div></div>
<h2 id="화면">화면</h2>

<table>
  <tbody>
    <tr>
      <td><img src="/assets/images/categories/uikit/2024-03-21-화면이동13.png" alt="" /></td>
      <td><img src="/assets/images/categories/uikit/2024-03-21-화면이동6.png" alt="" /></td>
    </tr>
  </tbody>
</table>

<h2 id="마무리">마무리</h2>
<ul>
  <li>코드로 화면표시 present(), 코드로 화면 닫기 dismiss()</li>
</ul>]]></content><author><name>HyeongSub Lim</name></author><category term="UIKit" /><category term="swift" /><category term="iOS" /><category term="present" /><category term="dismiss" /><summary type="html"><![CDATA[스토리보드에 view 컨트롤러를 추가하지 않고 코드로 이동하기]]></summary></entry></feed>