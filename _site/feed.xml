<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-03-06T19:53:42+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">limlogging Devlog</title><author><name>HyeongSub Lim</name></author><entry><title type="html">[Swift] 변수와 상수</title><link href="http://localhost:4000/swift/variableAndConstant/" rel="alternate" type="text/html" title="[Swift] 변수와 상수" /><published>2024-03-06T00:00:00+09:00</published><updated>2024-03-06T00:00:00+09:00</updated><id>http://localhost:4000/swift/VariableAndConstant</id><content type="html" xml:base="http://localhost:4000/swift/variableAndConstant/"><![CDATA[<h3 id="변수와-상수">변수와 상수</h3>

<ul>
  <li>변수나 상수를 이용하여 프로그램에서 사용되는 데이터를 메모리에 저장합니다.</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="nv">a</span><span class="p">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">1</span>
<span class="k">let</span> <span class="nv">b</span><span class="p">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">2</span>
</code></pre></div></div>

<h3 id="변수">변수</h3>
<ul>
  <li>생성 후 데이터 변경 가능합니다.</li>
  <li>var 변수명: 데이터 타입 = 값
    <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="nv">myMoney</span><span class="p">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">10000</span> <span class="c1">//현재 내 돈 만원</span>
<span class="n">myMoney</span> <span class="o">=</span> <span class="mi">20000</span> <span class="c1">// 알고보니 이만원, 이만원으로 수정  </span>
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="상수">상수</h3>
<ul>
  <li>한번 값을 설정하면 다음에 변경 할 수 없습니다.</li>
  <li>let 상수명: 데이터 타입 = 값
    <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="nv">tenWon</span><span class="p">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">10</span> <span class="c1">//10원  </span>
<span class="n">tenWon</span> <span class="o">=</span> <span class="mi">20</span>          <span class="c1">//에러 발생 10원은 10원   </span>
</code></pre></div>    </div>
    <p>상수로 선언된 10원을 20원으로 수정하면 에러가 발생합니다. 
let을 var로 변경하여 값을 변경 가능하게 만들어야합니다.</p>
  </li>
</ul>

<h3 id="상수-값-변경-시-에러">상수 값 변경 시 에러</h3>
<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">error: MyPlayground.playground:60:1: error: cannot assign to value: 'tenWon' is a 'let' constant
tenWon = 20
^~~~~~

MyPlayground.playground:59:1: note: change 'let' to 'var' to make it mutable
let tenWon: Int = 10
^~~
var

</span></code></pre></div></div>]]></content><author><name>HyeongSub Lim</name></author><category term="swift" /><category term="swift" /><category term="variable" /><category term="constant" /><summary type="html"><![CDATA[변수(값 변경 가능) var, 상수(값 변경 불가능) let]]></summary></entry><entry><title type="html">[Swift] 데이터 타입</title><link href="http://localhost:4000/swift/dataType/" rel="alternate" type="text/html" title="[Swift] 데이터 타입" /><published>2024-03-06T00:00:00+09:00</published><updated>2024-03-06T00:00:00+09:00</updated><id>http://localhost:4000/swift/dataType</id><content type="html" xml:base="http://localhost:4000/swift/dataType/"><![CDATA[<h1 id="데이터-타입">데이터 타입</h1>
<ul>
  <li>데이터 타입은 데이터 종류입니다.</li>
  <li>첫 글자가 대문자로 시작하는 대문자 카멜케이스 사용합니다.</li>
</ul>

<p><br /></p>

<h1 id="int-uint">Int, UInt</h1>
<ul>
  <li>Int: +, - 부호가 있는 정수입니다.</li>
  <li>UInt: - 를 포함하지 않는 0을 포함한 양의 정수입니다.</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="nv">a</span><span class="p">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">var</span> <span class="nv">b</span><span class="p">:</span> <span class="kt">UInt</span> <span class="o">=</span> <span class="mi">0</span>

<span class="n">a</span> <span class="o">=</span> <span class="mi">9223372036854775807</span> <span class="o">+</span> <span class="mi">1</span> <span class="c1">// 범위를 벗어나면 에러가 발생합니다.  </span>

<span class="nf">print</span><span class="p">(</span><span class="kt">Int</span><span class="o">.</span><span class="n">min</span><span class="p">)</span>  <span class="c1">// -9223372036854775808</span>
<span class="nf">print</span><span class="p">(</span><span class="kt">Int</span><span class="o">.</span><span class="n">max</span><span class="p">)</span>  <span class="c1">// 9223372036854775807</span>
<span class="nf">print</span><span class="p">(</span><span class="kt">UInt</span><span class="o">.</span><span class="n">min</span><span class="p">)</span> <span class="c1">// 0</span>
<span class="nf">print</span><span class="p">(</span><span class="kt">UInt</span><span class="o">.</span><span class="n">max</span><span class="p">)</span> <span class="c1">// 18446744073709551615</span>
</code></pre></div></div>
<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">error: MyPlayground.playground:62:25: error: arithmetic operation '9223372036854775807 + 1' (on type 'Int') results in an overflow
a = 9223372036854775807 + 1
    ~~~~~~~~~~~~~~~~~~~ ^ ~
</span></code></pre></div></div>
<p><br /></p>

<h1 id="float-double">Float, Double</h1>
<h2 id="float">Float</h2>
<ul>
  <li>소수점을 표현하는 데이터 타입으로 32비트 부동 소수를 표현할 수 있습니다.</li>
  <li>Float의 정밀도는 소수점 이하 6자리까지 가능합니다.</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="nv">interestRate</span><span class="p">:</span> <span class="kt">Float</span> <span class="o">=</span> <span class="mf">1.2345678910</span> <span class="c1">// Float 타입</span>
<span class="nf">print</span><span class="p">(</span><span class="s">"이자율은 </span><span class="se">\(</span><span class="n">interestRate</span><span class="se">)</span><span class="s"> % 입니다"</span><span class="p">)</span>
<span class="c1">// 출력값: 이자율은 1.2345679 % 입니다</span>
</code></pre></div></div>

<h2 id="double">Double</h2>
<ul>
  <li>소수점을 표현하는 데이터 타입으로 64비트 부동소수를 표현할 수 있습니다.</li>
  <li>Double의 정밀도는 소수점 이하 15자리 이상 가능합니다.</li>
  <li>두 유형 모두 적합한 상황에서는 Double을 사용하는 것이 좋습니다.</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="nv">interestRate</span><span class="p">:</span> <span class="kt">Double</span> <span class="o">=</span> <span class="mf">1.2345678910123456789</span> <span class="c1">// Double 타입</span>
<span class="nf">print</span><span class="p">(</span><span class="s">"이자율은 </span><span class="se">\(</span><span class="n">interestRate</span><span class="se">)</span><span class="s"> % 입니다"</span><span class="p">)</span>
<span class="c1">// 출력값: 이자율은 1.2345678910123457 % 입니다</span>
</code></pre></div></div>

<p><br /></p>

<h1 id="boolean">Boolean</h1>
<ul>
  <li>참(true), 거짓(false)만 값으로 가집니다.</li>
  <li>true, false 가 아니면 에러가 발생합니다.</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="nv">isTrue</span><span class="p">:</span> <span class="kt">Bool</span> <span class="o">=</span> <span class="kc">true</span>
<span class="k">var</span> <span class="nv">isFalse</span><span class="p">:</span> <span class="kt">Bool</span> <span class="o">=</span> <span class="kc">false</span>
<span class="n">isTrue</span> <span class="o">=</span> <span class="mi">100</span>    <span class="c1">//에러</span>
<span class="n">isTrue</span> <span class="o">=</span> <span class="s">"true"</span> <span class="c1">//에러   </span>
</code></pre></div></div>
<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">error: MyPlayground.playground:64:10: error: cannot assign value of type 'Int' to type 'Bool'
isTrue = 100
         ^~~

error: MyPlayground.playground:65:10: error: cannot assign value of type 'String' to type 'Bool'
isTrue = "True"
         ^~~~~~
</span></code></pre></div></div>

<p><br /></p>

<h1 id="character">Character</h1>
<ul>
  <li>단 하나의 문자입니다.</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="nv">a</span><span class="p">:</span> <span class="kt">Character</span> <span class="o">=</span> <span class="s">"a"</span> 
<span class="n">a</span> <span class="o">=</span> <span class="s">"aa"</span> <span class="c1">//에러 </span>
</code></pre></div></div>
<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">error: MyPlayground.playground:62:5: error: cannot assign value of type 'String' to type 'Character'
a = "aa"
    ^~~~
</span></code></pre></div></div>

<p><br /></p>

<h1 id="string">String</h1>
<ul>
  <li>문자열을 표현하는 데이터 타입 입니다.</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="nv">str</span><span class="p">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="s">"string"</span> 
</code></pre></div></div>

<p><br /></p>

<h1 id="any">Any</h1>
<ul>
  <li>모든 데이터 타입을 사용할 수 있습니다.</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="nv">a</span><span class="p">:</span> <span class="kt">Any</span> <span class="o">=</span> <span class="s">"a"</span>
<span class="n">a</span> <span class="o">=</span> <span class="s">"aa"</span>
<span class="n">a</span> <span class="o">=</span> <span class="mi">1</span>
<span class="n">a</span> <span class="o">=</span> <span class="mf">1234.5678</span>
</code></pre></div></div>

<p><br /></p>

<h1 id="tuple">Tuple</h1>
<ul>
  <li>튜플은 여러 값을 하나로 그룹화한 값입니다.</li>
  <li>Tuple은 관련 값의 단순한 그룹에 유용합니다. 복잡한 데이터 구조를 만드는 데는 적합하지 않습니다.</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="nv">person</span><span class="p">:</span> <span class="p">(</span><span class="kt">String</span><span class="p">,</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="s">"홍길동"</span><span class="p">,</span> <span class="mi">20</span><span class="p">)</span>
<span class="c1">//튜플 값에 접근하려면 순서를 알고 있어야합니다. </span>
<span class="nf">print</span><span class="p">(</span><span class="n">person</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span> <span class="c1">//홍길동</span>
<span class="nf">print</span><span class="p">(</span><span class="n">person</span><span class="o">.</span><span class="mi">1</span><span class="p">)</span> <span class="c1">//20 </span>
<span class="k">var</span> <span class="nv">test</span><span class="p">:</span> <span class="p">(</span><span class="kt">Int</span><span class="p">,</span> <span class="kt">String</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="nv">aaaa</span><span class="p">:</span> <span class="mi">200</span><span class="p">,</span> <span class="nv">bbbb</span><span class="p">:</span> <span class="s">"TEST"</span><span class="p">)</span> <span class="c1">//엘리먼트에 이름 붙일 수 있습니다. </span>
<span class="c1">// 많은 데이터를 담는 데는 적합하지 않다 - 사용하는 쪽에서 또 매핑(Mapping)을 해야 함</span>
<span class="k">let</span> <span class="nv">myInfo</span><span class="p">:</span> <span class="p">(</span><span class="kt">String</span><span class="p">,</span> <span class="kt">Int</span><span class="p">,</span> <span class="kt">Int</span><span class="p">,</span> <span class="kt">Int</span><span class="p">,</span> <span class="kt">String</span><span class="p">,</span> <span class="kt">String</span><span class="p">)</span> <span class="o">=</span> 
<span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="s">"peter"</span><span class="p">,</span> <span class="nv">registrationNumber</span><span class="p">:</span> <span class="mi">970212</span><span class="p">,</span> <span class="nv">height</span><span class="p">:</span> <span class="mi">185</span><span class="p">,</span> <span class="nv">weight</span><span class="p">:</span> <span class="mi">75</span><span class="p">,</span> <span class="nv">job</span><span class="p">:</span> <span class="s">"developer"</span><span class="p">,</span> <span class="nv">hobby</span><span class="p">:</span> <span class="s">"soccer"</span><span class="p">)</span>
</code></pre></div></div>

<p><br /></p>

<h1 id="배열">배열</h1>
<ul>
  <li>같은 타입의 데이터를 순서대로 저장합니다.</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="nv">arr</span><span class="p">:</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">]</span>
</code></pre></div></div>

<p><br /></p>

<h1 id="dictionary">Dictionary</h1>
<ul>
  <li>key, value 쌍의 모음입니다.</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="nv">fruit</span><span class="p">:</span> <span class="p">[</span><span class="kt">String</span><span class="p">:</span> <span class="kt">Int</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="s">"바나나"</span><span class="p">:</span> <span class="mi">5000</span><span class="p">,</span> <span class="s">"사과"</span><span class="p">:</span> <span class="mi">6000</span><span class="p">,</span> <span class="s">"키위"</span><span class="p">:</span> <span class="mi">8000</span><span class="p">]</span>
</code></pre></div></div>

<p><br /></p>

<h1 id="set">Set</h1>
<ul>
  <li>같은 타입의 데이터를 순서 없이 하나의 묶음으로 저장합니다..</li>
  <li>중복된 값이 존재 하지 않습니다.</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="nv">name1</span><span class="p">:</span> <span class="kt">Set</span><span class="o">&lt;</span><span class="kt">String</span><span class="o">&gt;</span> <span class="o">=</span> <span class="kt">Set</span><span class="o">&lt;</span><span class="kt">String</span><span class="o">&gt;</span><span class="p">()</span> <span class="c1">//빈 세트 생성 </span>
<span class="k">var</span> <span class="nv">name2</span><span class="p">:</span> <span class="kt">Set</span><span class="o">&lt;</span><span class="kt">String</span><span class="o">&gt;</span> <span class="o">=</span> <span class="p">[]</span> <span class="c1">//빈 세트 생성</span>
<span class="k">var</span> <span class="nv">name3</span><span class="p">:</span> <span class="kt">Set</span><span class="o">&lt;</span><span class="kt">String</span><span class="o">&gt;</span> <span class="o">=</span> <span class="p">[</span><span class="s">"aaa"</span><span class="p">,</span> <span class="s">"bbb"</span><span class="p">,</span> <span class="s">"ccc"</span><span class="p">]</span>
</code></pre></div></div>]]></content><author><name>HyeongSub Lim</name></author><category term="swift" /><category term="swift" /><category term="Data Type" /><summary type="html"><![CDATA[swift에서 사용하는 데이터 타입입니다.]]></summary></entry><entry><title type="html">[Swift] 옵셔널(Optional)</title><link href="http://localhost:4000/swift/optional/" rel="alternate" type="text/html" title="[Swift] 옵셔널(Optional)" /><published>2024-03-06T00:00:00+09:00</published><updated>2024-03-06T00:00:00+09:00</updated><id>http://localhost:4000/swift/optional</id><content type="html" xml:base="http://localhost:4000/swift/optional/"><![CDATA[<h1 id="옵셔널">옵셔널?</h1>
<p>Swift에서 옵셔널(Optional)은 값이 있을 수도 있고 없을 수도 있는 값을 나타내는 형식입니다. 변수 또는 상수에 값을 갖지 않을 수 있는 경우에 사용합니다.</p>

<h1 id="nil">nil?</h1>
<p>Swift에서 값이 없으면 nil로 나타냅니다. “” 같은 빈 문자열과 다름</p>

<h1 id="옵셔널-사용">옵셔널 사용</h1>
<ul>
  <li>물음표로 나타냅니다.</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="nv">num1</span><span class="p">:</span> <span class="kt">Int</span><span class="p">?</span> <span class="o">=</span> <span class="mi">1</span>           <span class="c1">//? 사용하여 축약 타입 표현</span>
<span class="k">var</span> <span class="nv">num2</span><span class="p">:</span> <span class="kt">Optional</span><span class="o">&lt;</span><span class="kt">Int</span><span class="o">&gt;</span> <span class="o">=</span> <span class="mi">1</span> <span class="c1">//정식 타입 표현  </span>
 
<span class="n">num1</span> <span class="o">+</span> <span class="n">num2</span> <span class="c1">//옵셔널 타입끼리 연산이 불가능, 에러 발생  </span>
</code></pre></div></div>

<h1 id="optional-추출-unwapping">Optional 추출 (Unwapping)</h1>
<ul>
  <li>옵셔널의 값을 옵셔널이 아닌 값으로 추출하는 방법입니다.</li>
</ul>

<h2 id="1-강제-추출">1. 강제 추출</h2>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//강제 추출  </span>
<span class="k">var</span> <span class="nv">x</span><span class="p">:</span> <span class="kt">Int</span><span class="p">?</span> <span class="o">=</span> <span class="mi">1</span>
<span class="nf">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>    <span class="c1">//결과: Optional(1)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">x</span><span class="o">!</span><span class="p">)</span>   <span class="c1">//결과: 1 </span>

<span class="c1">//if문으로 nil만 확인하고 강제 추출 </span>
<span class="k">if</span> <span class="n">x</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">x</span><span class="o">!</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="2-옵셔널-바인딩">2. 옵셔널 바인딩</h2>
<p>옵셔널 값이 빈 값인지 아닌지 검사 후 값이 있는 경우 그 값을 다른 변수/상수에 대입시키는 것입니다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="nv">num</span><span class="p">:</span> <span class="kt">Int</span><span class="p">?</span> <span class="o">=</span> <span class="kc">nil</span> 
<span class="k">if</span> <span class="k">let</span> <span class="nv">number</span> <span class="o">=</span> <span class="n">num</span> <span class="p">{</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">number</span><span class="p">)</span> <span class="c1">//출력 값 없음</span>
<span class="p">}</span>

<span class="k">var</span> <span class="nv">x</span><span class="p">:</span> <span class="kt">Int</span><span class="p">?</span> <span class="o">=</span> <span class="mi">1</span> 
<span class="k">if</span> <span class="k">let</span> <span class="nv">xx</span> <span class="o">=</span> <span class="n">x</span> <span class="p">{</span> 
    <span class="nf">print</span><span class="p">(</span><span class="n">xx</span><span class="p">)</span>   <span class="c1">//1 출력 </span>
<span class="p">}</span>

<span class="c1">//옵셔널 바인딩 할 변수가 여러개 인 경우 콤마 사용 </span>
<span class="k">var</span> <span class="nv">boyName</span><span class="p">:</span> <span class="kt">String</span><span class="p">?</span> <span class="o">=</span> <span class="s">"김철수"</span>
<span class="k">var</span> <span class="nv">girlName2</span><span class="p">:</span> <span class="kt">String</span><span class="p">?</span> <span class="o">=</span> <span class="s">"김영희"</span> 

<span class="k">if</span> <span class="k">let</span> <span class="nv">boy</span> <span class="o">=</span> <span class="n">boyName</span><span class="p">,</span> <span class="k">let</span> <span class="nv">girl</span> <span class="o">=</span> <span class="n">girlName</span> <span class="p">{</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">boy</span><span class="p">,</span> <span class="n">girl</span><span class="p">)</span>    <span class="c1">//김철수, 김영희 출력 </span>
<span class="p">}</span>

<span class="c1">// guard let 사용</span>
<span class="kd">func</span> <span class="nf">opbinding</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">guard</span> <span class="k">let</span> <span class="nv">x</span> <span class="o">=</span> <span class="n">x</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>

    <span class="k">guard</span> <span class="k">let</span> <span class="nv">y</span> <span class="o">=</span> <span class="n">y</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span> <span class="c1">// y는 nil 이므로 여기서 return</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">y</span><span class="p">)</span> <span class="c1">// 위에서 return 하였기 때문에 이 코드 라인은 실행되지 않음</span>
<span class="p">}</span>

<span class="nf">opbinding</span><span class="p">()</span>
<span class="c1">// 출력값: 10</span>
</code></pre></div></div>

<h2 id="3-nil-coalescing-닐-코얼레싱">3. Nil Coalescing 닐 코얼레싱</h2>
<p>값이 nil일때 기본 값을 적용</p>
<ul>
  <li>옵셔널 ?? 기본값</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="nv">num</span><span class="p">:</span> <span class="kt">Int</span><span class="p">?</span> <span class="o">=</span> <span class="kc">nil</span>
<span class="k">var</span> <span class="nv">number</span> <span class="o">=</span> <span class="n">num</span> <span class="p">??</span> <span class="mi">0</span>   <span class="c1">// num이 nill이면 기본 값으로 0 </span>
<span class="nf">print</span><span class="p">(</span><span class="n">num</span><span class="p">,</span> <span class="n">number</span><span class="p">)</span>      <span class="c1">// 출력: nil 0 </span>
</code></pre></div></div>

<h1 id="옵셔널-체이닝">옵셔널 체이닝</h1>
<p>옵셔널 체이닝(Optional Chaining)은 Swift에서 옵셔널 값의 체인을 따라 연속적으로 값을 가져오는 방법을 말합니다.</p>
<ul>
  <li>옵셔널 값이 있는 여러 단계의 프로퍼티 또는 메소드 호출을 수행할 때 유용합니다.</li>
  <li>옵셔널 체이닝을 사용하면 옵셔널이 nil일 때도 에러가 발생하지 않고, 안전하게 체인을 따라 값에 접근할 수 있습니다.</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">Person</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">name</span><span class="p">:</span> <span class="kt">String</span>
    <span class="k">var</span> <span class="nv">pet</span><span class="p">:</span> <span class="kt">Animal</span><span class="p">?</span>
    
    <span class="nf">init</span><span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="kt">String</span><span class="p">,</span> <span class="nv">pet</span><span class="p">:</span> <span class="kt">Animal</span><span class="p">?</span> <span class="o">=</span> <span class="kc">nil</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
        <span class="k">self</span><span class="o">.</span><span class="n">pet</span> <span class="o">=</span> <span class="n">pet</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="kd">class</span> <span class="kt">Animal</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">type</span><span class="p">:</span> <span class="kt">String</span>
    <span class="k">var</span> <span class="nv">animalName</span><span class="p">:</span> <span class="kt">String</span><span class="p">?</span>
    
    <span class="nf">init</span><span class="p">(</span><span class="nv">type</span><span class="p">:</span> <span class="kt">String</span><span class="p">,</span> <span class="nv">animalName</span><span class="p">:</span> <span class="kt">String</span><span class="p">?</span> <span class="o">=</span> <span class="kc">nil</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="n">type</span> <span class="o">=</span> <span class="n">type</span>
        <span class="k">self</span><span class="o">.</span><span class="n">animalName</span> <span class="o">=</span> <span class="n">animalName</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">let</span> <span class="nv">park</span> <span class="o">=</span> <span class="kt">Person</span><span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="s">"박"</span><span class="p">,</span> <span class="nv">pet</span><span class="p">:</span> <span class="kt">Animal</span><span class="p">(</span><span class="nv">type</span><span class="p">:</span> <span class="s">"dog"</span><span class="p">,</span> <span class="nv">animalName</span><span class="p">:</span> <span class="s">"멍멍이"</span><span class="p">))</span>
<span class="k">let</span> <span class="nv">kim</span> <span class="o">=</span> <span class="kt">Person</span><span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="s">"김"</span><span class="p">,</span> <span class="nv">pet</span><span class="p">:</span> <span class="kt">Animal</span><span class="p">(</span><span class="nv">type</span><span class="p">:</span> <span class="s">"cat"</span><span class="p">))</span>
<span class="k">let</span> <span class="nv">lim</span> <span class="o">=</span> <span class="kt">Person</span><span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="s">"임"</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="n">park</span><span class="o">.</span><span class="n">pet</span><span class="p">?</span><span class="o">.</span><span class="n">animalName</span><span class="p">)</span> <span class="c1">// Optional("호두")</span>
<span class="nf">print</span><span class="p">(</span><span class="n">kim</span><span class="o">.</span><span class="n">pet</span><span class="p">?</span><span class="o">.</span><span class="n">animalName</span><span class="p">)</span>  <span class="c1">// nil</span>
<span class="nf">print</span><span class="p">(</span><span class="n">lim</span><span class="o">.</span><span class="n">pet</span><span class="p">?</span><span class="o">.</span><span class="n">type</span><span class="p">)</span>        <span class="c1">// nil</span>
</code></pre></div></div>]]></content><author><name>HyeongSub Lim</name></author><category term="swift" /><category term="swift" /><category term="optional" /><category term="Nil Coalescing" /><summary type="html"><![CDATA[값이 있을 수도 있고 없을 수도 있는 값]]></summary></entry><entry><title type="html">GitHub utterances 댓글 기능 추가하기 (minimal-mistakes)</title><link href="http://localhost:4000/GitHubBlog/comments/" rel="alternate" type="text/html" title="GitHub utterances 댓글 기능 추가하기 (minimal-mistakes)" /><published>2024-03-05T00:00:00+09:00</published><updated>2024-03-05T00:00:00+09:00</updated><id>http://localhost:4000/GitHubBlog/comments</id><content type="html" xml:base="http://localhost:4000/GitHubBlog/comments/"><![CDATA[<p><a href="https://github.com/apps/utterances" target="_blank">utteranc.es</a>는 GitHub의 Issue를 기반으로 한 댓글 시스템입니다. GitHub 저장소의 Issue에 댓글을 추가하여 웹사이트나 블로그 등에 댓글 시스템을 쉽게 추가할 수 있습니다. 이를 통해 사용자는 GitHub 계정을 통해 댓글을 작성하고 관리할 수 있습니다. Utterances는 정적 웹사이트를 호스팅하는 데 매우 인기가 있으며, GitHub Issue를 사용하여 댓글을 저장하므로 데이터 손실없이 무료로 사용할 수 있습니다.</p>

<h1 id="1-utterances-설치하기">1. utterances 설치하기</h1>
<p><a href="https://github.com/apps/utterances" target="_blank">https://github.com/apps/utterances</a>에 접속하셔서 Install합니다. 
<img src="/assets/images/categories/githubblog/2024-03-05-utterancesInstall.png" alt="" /></p>

<p>깃허브 저장소를 선택하고 Instal합니다.
<img src="/assets/images/categories/githubblog/2024-03-05-utterancesInstall2.png" alt="" /></p>

<h1 id="2-저장소--맵핑-설정">2. 저장소 / 맵핑 설정</h1>
<ul>
  <li>repo에 소유자/저장소이름을 입력합니다.</li>
  <li>Issue title contains page pathname을 선택합니다. 
<img src="/assets/images/categories/githubblog/2024-03-05-utterancesContiguration.png" alt="" /></li>
</ul>

<h1 id="3-테마-설정하기">3. 테마 설정하기</h1>
<ul>
  <li>원하는 테마를 선택합니다.</li>
  <li>Enable Utterance에 설정된 정보를 _config.yml에 복사해야하기때문에 복사해놓습니다. 
<img src="/assets/images/categories/githubblog/2024-03-05-utterancesTheme.png" alt="" /></li>
</ul>

<h1 id="4-_configyml-설정하기">4. _config.yml 설정하기</h1>
<ul>
  <li>3번 Enable Utterance에서 확인한 repo 정보를 repository 항모에 넣습니다. 
<img src="/assets/images/categories/githubblog/2024-03-05-utterancesConfigyml1.png" alt="" /></li>
  <li>provider에 “utterances” 입력합니다.</li>
  <li>3번 Enable Utterance에서 확인한 theme 정보를 theme 항목에 넣습니다.</li>
  <li>3번 Enable Utterance에서 확인한 issue-term 정보를 issue-term 항목에 넣습니다. 
<img src="/assets/images/categories/githubblog/2024-03-05-utterancesConfigyml2.png" alt="" /></li>
</ul>

<h1 id="5-블로그-포스팅-시-comments-true-추가">5. 블로그 포스팅 시 comments: true 추가</h1>
<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">---</span>
<span class="na">title</span><span class="pi">:</span> <span class="s2">"</span><span class="s">GitHub</span><span class="nv"> </span><span class="s">utterances</span><span class="nv"> </span><span class="s">댓글</span><span class="nv"> </span><span class="s">기능</span><span class="nv"> </span><span class="s">추가하기</span><span class="nv"> </span><span class="s">(minimal-mistakes)"</span>
<span class="na">excerpt</span><span class="pi">:</span> <span class="s2">"</span><span class="s">게시글에</span><span class="nv"> </span><span class="s">utterances</span><span class="nv"> </span><span class="s">댓글</span><span class="nv"> </span><span class="s">기능</span><span class="nv"> </span><span class="s">추가하는</span><span class="nv"> </span><span class="s">방법입니다."</span>
<span class="na">categories</span><span class="pi">:</span> <span class="s">GitHubBlog</span>
<span class="na">tags</span><span class="pi">:</span> <span class="pi">[</span><span class="nv">GitHub</span><span class="pi">,</span> <span class="nv">blog</span><span class="pi">,</span> <span class="nv">GitHub blog</span><span class="pi">,</span> <span class="nv">utterances</span><span class="pi">,</span> <span class="nv">Comments</span><span class="pi">]</span>

<span class="na">permalink</span><span class="pi">:</span> <span class="s">/GitHubBlog/comments/</span> 
<span class="na">toc</span><span class="pi">:</span> <span class="kc">true</span>          
<span class="na">toc_sticky</span><span class="pi">:</span> <span class="kc">true</span>    
<span class="na">comments</span><span class="pi">:</span> <span class="kc">true</span>      <span class="c1">#댓글</span>
<span class="nn">---</span> 
</code></pre></div></div>

<h1 id="6-깃허브-push">6. 깃허브 Push</h1>
<p>적용된 모습을 확인할 수 있습니다. (로컬에서 실행하면 추가된 내용이 보이지 않는 것 같습니다.)
<img src="/assets/images/categories/githubblog/2024-03-05-utterancesComments.png" alt="" /></p>]]></content><author><name>HyeongSub Lim</name></author><category term="GitHubBlog" /><category term="GitHub" /><category term="blog" /><category term="GitHub blog" /><category term="utterances" /><category term="Comments" /><summary type="html"><![CDATA[게시글에 utterances 댓글 기능 추가하는 방법입니다.]]></summary></entry><entry><title type="html">[TIL] 내배캠 iOS앱 개발 공부 7일차</title><link href="http://localhost:4000/TIL/til7/" rel="alternate" type="text/html" title="[TIL] 내배캠 iOS앱 개발 공부 7일차" /><published>2024-03-05T00:00:00+09:00</published><updated>2024-03-05T00:00:00+09:00</updated><id>http://localhost:4000/TIL/til7</id><content type="html" xml:base="http://localhost:4000/TIL/til7/"><![CDATA[<h3 id="데일리-스크럼">데일리 스크럼</h3>
<p><img src="/assets/images/categories/til/2024-03-06-til7.png" alt="" /></p>

<h3 id="알고리즘">알고리즘</h3>
<p>오늘의 데일리 스크럼을 작성하고 오늘의 알고리즘 문제를 바로 풀었는데….</p>
<ul>
  <li>자연수 n이 매개변수로 주어집니다. n을 3진법 상에서 앞뒤로 뒤집은 후, 이를 다시 10진법으로 표현한 수를 return 하도록 solution 함수를 완성해주세요.</li>
</ul>
<table>
    <tr>
        <td>n (10진법)</td>
        <td>n (3진법)</td>
        <td>앞뒤 반전(3진법)</td>	
        <td>10진법으로 표현</td>
    </tr>
    <tr>
        <td>45</td>	
        <td>1200</td>	
        <td>0021</td>
        <td>7</td>
    </tr>
    <tr>
        <td>125</td>	
        <td>11122</td>	
        <td>22111</td>
        <td>229</td>
    </tr>
</table>

<p>앞뒤 반전(3진법)에서 10진법으로 만드는 과정에서 제곱때문에 함수를 새로 만드느라 시간이 오래걸렸다. 그리고 답안을 제출했는데 1개가 계속 맞지 않아서 블로그 기능 확인 및 추가시간까지 알고리즘 문제를 풀었다. 아직 못해서 저녁 9시 이후에 다 지우고 새로 풀어볼 예정! <br />
<img src="/assets/images/categories/til/2024-03-06-til7-2.png" alt="" /></p>

<p>옵셔널 강의듣고 정의, nil, Unwapping, optional binding, Nil Coalescing, chaining… 관련해서 정리하면서 글을 썼더니 오후 시간이 다 가버렸다. 작성하는 내용이 맞는지 안맞는지 확인하고 플레이그라운드에 실행해보고 하는 시간이 너무 오래 걸렸다.</p>

<h3 id="내일은">내일은?</h3>
<p>개인 과제를 아직 진행하지 못해서 내일은 개인 과제를 먼저 진행해야겠다.</p>]]></content><author><name>HyeongSub Lim</name></author><category term="TIL" /><category term="TIL" /><summary type="html"><![CDATA[내배캠 iOS앱 개발 공부 7일차 이야기]]></summary></entry><entry><title type="html">[TIL] 내배캠 iOS앱 개발 공부 6일차</title><link href="http://localhost:4000/TIL/til6/" rel="alternate" type="text/html" title="[TIL] 내배캠 iOS앱 개발 공부 6일차" /><published>2024-03-05T00:00:00+09:00</published><updated>2024-03-05T00:00:00+09:00</updated><id>http://localhost:4000/TIL/til6</id><content type="html" xml:base="http://localhost:4000/TIL/til6/"><![CDATA[<h1 id="15일차는">1~5일차는?</h1>
<p>인터넷 뉴스 댓글, 유튜브 댓글도 작성하지 않는데 매일 매일 블로그 작성하라니… 시작하기 조금 어려웠다. 1~5일차 온보딩 프로젝트를 진행하면서 TIL은 흐지부지 되는 듯 했으나 오늘부터 본격적으로 강의를 시작하고 새로 팀을 구성하면서 팀원들의 TIL을 확인하고 나도 작성해보기로 했다. (그래도 알고리즘 문제는 매일 풀었다!)</p>

<h1 id="오늘부터-시작-데일리-스크럼부터">오늘부터 시작, 데일리 스크럼부터</h1>
<p>1~5일차 같은 노션 템플릿으로 팀 약속, 목표만 작성하고 데일리 스크럼은 다들 작성하지 않았다. <font style="text-decoration:line-through">(변명하자면 다들 작성 경험이 없어서... 누군가 먼저 작성했더라면 다들 적었을 것 같다.)</font> 팀이 변경되고 처음부터 꾸준히 적은 팀원을 만나 작성된 내용을 확인하고 나도 데일리 스크럼을 작성하였다.</p>

<p><img src="/assets/images/categories/til/2024-03-05-til6.png" alt="" /></p>

<p>TIL 저녁에 작성하기로 했는데 오늘은 처음 작성하는거라 30분만에 작성하기 힘들 것 같아 조금씩 적었다.</p>

<p>이번주는 Swift 기초 문법 강의를 듣고 개인 과제도 만들어야하는데 강의 12개, 길이가 최대 30분이라 한번 듣고 다시 들으면서 swift 카테고리에 정리해봐야겠다.</p>

<h1 id="앞으로">앞으로</h1>
<p>다들 너무 열심히 해서 열심히 해야겠다.<br />
노션, 깃, 강의, 실습, 블로그 관리까지… TIL 계속 쓸 수 있겠지?</p>]]></content><author><name>HyeongSub Lim</name></author><category term="TIL" /><category term="TIL" /><summary type="html"><![CDATA[내배캠 iOS앱 개발 공부 6일차 이야기]]></summary></entry><entry><title type="html">카테고리 옆 posting Count 추가하기 (minimal-mistakes)</title><link href="http://localhost:4000/GitHubBlog/postingCount/" rel="alternate" type="text/html" title="카테고리 옆 posting Count 추가하기 (minimal-mistakes)" /><published>2024-03-04T00:00:00+09:00</published><updated>2024-03-04T00:00:00+09:00</updated><id>http://localhost:4000/GitHubBlog/postingCount</id><content type="html" xml:base="http://localhost:4000/GitHubBlog/postingCount/"><![CDATA[<h1 id="posting-count-추가하기">Posting Count 추가하기</h1>
<p>우여곡절 끝에 카테고리를 만들고 TEST 게시물을 작성하였는데요. 뭔가 허전해보여 생각했더니 Posting Count가 없었습니다.</p>

<h1 id="1-navigationyml-수정하기">1. navigation.yml 수정하기</h1>
<p>children 하위에 category 항목을 추가합니다.</p>
<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">categories</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">title</span><span class="pi">:</span> <span class="s2">"</span><span class="s">iOS"</span>    
    <span class="na">children</span><span class="pi">:</span> 
      <span class="pi">-</span> <span class="na">title</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Swift"</span>
        <span class="na">url</span><span class="pi">:</span> <span class="s">/categories/swift/</span>       
        <span class="na">category</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Swift"</span>
      <span class="pi">-</span> <span class="na">title</span><span class="pi">:</span> <span class="s2">"</span><span class="s">SwiftUI"</span>
        <span class="na">url</span><span class="pi">:</span> <span class="s">/categories/swiftui/</span> 
        <span class="na">category</span><span class="pi">:</span> <span class="s2">"</span><span class="s">SwiftUI"</span>
  <span class="pi">-</span> <span class="na">title</span><span class="pi">:</span> <span class="s2">"</span><span class="s">git"</span> 
    <span class="na">children</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">title</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Git"</span>
        <span class="na">url</span><span class="pi">:</span> <span class="s">/categories/git/</span>
        <span class="na">category</span><span class="pi">:</span> <span class="s2">"</span><span class="s">git"</span>
      <span class="pi">-</span> <span class="na">title</span><span class="pi">:</span> <span class="s2">"</span><span class="s">GitHub</span><span class="nv"> </span><span class="s">Blog"</span>
        <span class="na">url</span><span class="pi">:</span> <span class="s">/categories/GitHubBlog/</span>
        <span class="na">category</span><span class="pi">:</span> <span class="s2">"</span><span class="s">GitHubBlog"</span>
  <span class="pi">-</span> <span class="na">title</span><span class="pi">:</span> <span class="s2">"</span><span class="s">etc"</span>
    <span class="na">children</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">title</span><span class="pi">:</span> <span class="s2">"</span><span class="s">내배캠</span><span class="nv"> </span><span class="s">부트캠프"</span>
        <span class="na">url</span><span class="pi">:</span> <span class="s">/categories/sparta/</span>
        <span class="na">category</span><span class="pi">:</span> <span class="s2">"</span><span class="s">sparta"</span>
</code></pre></div></div>

<h1 id="2-nav_list-수정">2. nav_list 수정</h1>
<p>아래 부분 코드를 주석하고</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
&lt;li&gt;&lt;a href="{{ child.url | relative_url }}"{% if child.url == page.url %} class="active"{% endif %}&gt;{{ child.title }}&lt;/a&gt;&lt;/li&gt; 

</code></pre></div></div>
<p>새로 코드를 추가합니다.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
{% assign post_cnt = 0 %}
{% for category in site.categories %}
    {% if category[0] == child.category  %}
    {% assign post_cnt = category[1].size %}
    {% endif %}
{% endfor %}
&lt;li&gt;&lt;a href="{{ child.url | relative_url }}"{% if child.url == page.url %} class="active"{% endif %}&gt;{{ child.title }}({{ post_cnt }})&lt;/a&gt;&lt;/li&gt;

</code></pre></div></div>

<p>수정된 코드입니다. 
<img src="/assets/images/categories/githubblog/2024-03-04-postingCount.png" alt="" /></p>

<h1 id="3-결과-확인">3. 결과 확인</h1>
<p>카테고리 옆에 해당 카테고리의 전체 포스팅 수를 확인할 수 있습니다.<br />
<img src="/assets/images/categories/githubblog/2024-03-04-postingCountResult.png" alt="" /></p>]]></content><author><name>HyeongSub Lim</name></author><category term="GitHubBlog" /><category term="GitHub" /><category term="blog" /><category term="GitHub blog" /><category term="Posting Count" /><summary type="html"><![CDATA[카테고리 옆 posting Count 추가하는 방법입니다.]]></summary></entry><entry><title type="html">[내배캠] 온보딩 주차 프로젝트 만들기 / KPT 회고</title><link href="http://localhost:4000/sparta/firstProjectKPT/" rel="alternate" type="text/html" title="[내배캠] 온보딩 주차 프로젝트 만들기 / KPT 회고" /><published>2024-03-04T00:00:00+09:00</published><updated>2024-03-04T00:00:00+09:00</updated><id>http://localhost:4000/sparta/firstProjectKPT</id><content type="html" xml:base="http://localhost:4000/sparta/firstProjectKPT/"><![CDATA[<h1 id="온보딩-프로젝트-kpt-회고">온보딩 프로젝트 KPT 회고</h1>
<p>온보딩 프로젝트 발표가 끝났습니다. <br />
팀원들과 프로젝트를 통해 느낀 “Keep (계속할 것)”, “Problem (문제)”, “Try (시도할 것)”의 세 가지 요소를 토대로 프로젝트의 경험을 돌아보고 이야기를 나누었습니다.</p>

<ul>
  <li>
    <p>Keep: 앱을 구현하는데 있어 필요한 기능을 검색하고 최선의 방법을 찾아 사용하려고 하였습니다.</p>
  </li>
  <li>
    <p>Problem: 처음 프로젝트를 진행 함에 있어 필요한 요소, 기능에 대한 막연함이 있었습니다. 다양한 실습을 통해 막연함을 구체화 시키도록 해야합니다.</p>
  </li>
  <li>
    <p>Try: 조금 더 소통해야 할 것 같습니다. 시간을 정하고 소통하였으나 유연하게 소통하고 의사결정을 해야합니다.</p>
  </li>
</ul>

<p>이번 프로젝트를 돌아보고 다음 프로젝트에서 발전된 방향으로 프로젝트를 진행하도록 하겠습니다.</p>]]></content><author><name>HyeongSub Lim</name></author><category term="sparta" /><category term="KPT 회고" /><summary type="html"><![CDATA[온보딩 프로젝트 이후 KPT 회고 작성하기]]></summary></entry><entry><title type="html">Mac에서 github blog 만들기 - 2</title><link href="http://localhost:4000/GitHubBlog/start2/" rel="alternate" type="text/html" title="Mac에서 github blog 만들기 - 2" /><published>2024-03-02T00:00:00+09:00</published><updated>2024-03-02T00:00:00+09:00</updated><id>http://localhost:4000/GitHubBlog/blogstart2</id><content type="html" xml:base="http://localhost:4000/GitHubBlog/start2/"><![CDATA[<p>1편에 이어 Ruby, Jekyll, bundler 설치, 테마를 다운로드 받아 로컬환경에서 실행하는 방법입니다.</p>

<h1 id="1-homebrew-설치">1. Homebrew 설치</h1>
<p>Homebrew는 macOS 및 Linux 운영 체제를 위한 오픈 소스 패키지 관리자입니다. 이를 통해 사용자는 명령줄 인터페이스를 통해 손쉽게 소프트웨어를 설치, 업데이트, 관리할 수 있습니다.
일반적으로 Homebrew를 사용하면 다음과 같은 작업을 수행할 수 있습니다. 
<br /><a href="https://brew.sh/" target="_blank">Homebrew Homepage 바로가기</a></p>

<h1 id="2-homebrew-update">2. Homebrew Update</h1>
<p>brew update 명령어를 통해 Homebrew 패키지 관리자의 패키지 목록을 최신 상태로 업데이트합니다.</p>
<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">imhs@imhsui-MacBookPro ~ % brew update
</span></code></pre></div></div>
<p>Homebrew를 사용하여 패키지를 설치하기 전에 항상 이 명령을 실행하여 최신 버전의 패키지 목록을 가져와야 합니다. 이를 통해 최신 버전의 패키지를 사용할 수 있고, 패키지 관련 문제를 방지할 수 있습니다.</p>

<h1 id="3-ruby-버전관리도구-및-build-설치">3. Ruby 버전관리도구 및 build 설치</h1>
<p>brew install rbenv ruby-build 명령으로 rbenv와 ruby-build라는 두 가지 패키지를 Homebrew를 통해 설치합니다.</p>
<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">imhs@imhsui-MacBookPro ~ % brew install rbenv ruby-build
</span></code></pre></div></div>
<ul>
  <li>rbenv는 Ruby 버전 관리 도구로, 여러 버전의 Ruby를 시스템에 설치하고 각 프로젝트에 필요한 버전을 선택할 수 있게 해줍니다. 이를 통해 서로 다른 프로젝트에서 다른 Ruby 버전을 사용할 수 있습니다.</li>
  <li>ruby-build는 Ruby 버전을 컴파일하고 설치하는 데 사용되는 스크립트입니다. rbenv와 함께 사용되어 rbenv로 관리되는 Ruby 버전을 설치할 수 있도록 돕습니다.
이 명령을 사용하여 rbenv와 ruby-build를 설치하면 Ruby 개발 환경을 설정하는 데 필요한 도구를 간편하게 설치할 수 있습니다.</li>
</ul>

<h1 id="4-rbenv-설치-및-환경-설정">4. rbenv 설치 및 환경 설정</h1>
<p>rbenv versions 명령어로 설치된 버전을 확인합니다.</p>
<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">imhs@imhsui-MacBookPro ~ % rbenv versions
system
</span></code></pre></div></div>
<p>system이라고 표시되는 경우, 이는 현재 시스템에 기본적으로 설치된 Ruby 버전을 나타냅니다.</p>

<p>rbenv install -l 명령어를 통하여 설치할 수 있는 Ruby 버전 목록을 확인합니다.</p>
<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">imhs@imhsui-MacBookPro ~ % rbenv install -l
3.0.6
3.1.4
3.2.3
3.3.0
jruby-9.4.6.0
mruby-3.3.0
picoruby-3.0.0
truffleruby-23.1.2
truffleruby+graalvm-23.1.2

Only latest stable releases for each Ruby implementation are shown.
Use 'rbenv install --list-all' to show all local versions.
</span></code></pre></div></div>
<p>저는 최신버전인 3.3.0 버전을 설치하였습니다.</p>
<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">imhs@imhsui-MacBookPro ~ % rbenv install 3.3.0
</span></code></pre></div></div>
<p>다시 rbenv version을 확인해봅니다.</p>
<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">imhs@imhsui-MacBookPro ~ % rbenv versions
* system
  3.3.0
</span></code></pre></div></div>
<p>* 표시는 현재 활성화(선택된) Ruby 버전을 나타냅니다. 
설치된 버전으로 변경하기 위해 아래 명령어를 입력합니다.</p>
<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">imhs@imhsui-MacBookPro ~ % rbenv global 3.3.0
imhs@imhsui-MacBookPro ~ % rbenv versions
  system
* 3.3.0 (set by /Users/imhs/. rbenv/version)
</span></code></pre></div></div>
<p>terminal 콘솔 창 상단에 zsh 셸을 확인하고 zsh 셸 환경을 설정합니다.</p>
<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">imhs@imhsui-MacBookPro ~ % vim ~/.zshrc
</span></code></pre></div></div>
<p>파일에 아래 내용을 추가합니다.</p>
<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">[[ -d ~/.rbenv  ]] &amp;&amp; \
</span><span class="gp">  export PATH=$</span><span class="o">{</span>HOME<span class="o">}</span>/.rbenv/bin:<span class="k">${</span><span class="nv">PATH</span><span class="k">}</span> <span class="o">&amp;&amp;</span> <span class="se">\</span>
<span class="gp">  eval "$</span><span class="o">(</span>rbenv init -<span class="o">)</span><span class="s2">"
</span></code></pre></div></div>

<p>수정된 내용을 적용하기 위하여 아래 명령어를 입력합니다.</p>
<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">imhs@imhsui-MacBookPro ~ % source ~/.zshrc
</span></code></pre></div></div>

<p>아래 명령어를 통하여 시스템에 Bundler를 설치하여 Ruby 프로젝트의 의존성을 관리할 수 있도록 합니다.</p>
<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">imhs@imhsui-MacBookPro ~ % gem install bundler
</span></code></pre></div></div>
<ul>
  <li>gem: RubyGems는 Ruby 패키지 관리자입니다. RubyGems를 사용하면 Ruby 프로그래밍 언어로 작성된 소프트웨어 패키지를 설치, 관리 및 배포할 수 있습니다. gem 명령어는 RubyGems의 명령줄 인터페이스를 제공하며, 패키지의 설치, 업데이트, 삭제 등 다양한 작업을 수행할 수 있습니다.</li>
  <li>install: gem install은 RubyGems를 사용하여 패키지를 시스템에 설치하는 명령어입니다. 이를 통해 지정된 패키지를 로컬 시스템에 다운로드하고 설치할 수 있습니다.</li>
  <li>bundler: Bundler는 Ruby 프로젝트의 의존성을 관리하는 도구입니다. Bundler를 사용하면 프로젝트에 필요한 라이브러리 및 gem을 쉽게 관리할 수 있습니다.</li>
</ul>

<h1 id="5-jekyll과-bundler를-시스템에-설치">5. Jekyll과 Bundler를 시스템에 설치</h1>
<p>아래 명령어를 사용하여 Jekyll과 Bundler를 시스템에 설치합니다.</p>
<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">imhs@imhsui-MacBookPro ~ % gem install jekyll bundler
</span></code></pre></div></div>
<p>jekyll 버전을 확인합니다.</p>
<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">imhs@imhsui-MacBookPro ~ % jekyll -v
jekyll 4.3.3
</span></code></pre></div></div>

<h1 id="6-jekyll-테마-다운로드-및-github-repository에-반영">6. jekyll 테마 다운로드 및 github repository에 반영</h1>
<p>GitHub Pages에서 지원하는 인기있는 jekyll 테마 중 Minimal Mistakes를 다운로드 합니다. 
<br /><a href="https://github.com/mmistakes/minimal-mistakes/" target="_blank">minimal-mistakes Download 바로가기</a>
<img src="/assets/images/categories/githubblog/2024-03-02-minimal-mistakes-download.png" alt="" /></p>

<p>다운로드 받은 파일을 git clone을 통하여 복사한 README.md 파일이 있는 폴더에 덮어씁니다. 
<img src="/assets/images/categories/githubblog/2024-03-02-minimal-mistakes-copy.png" alt="" /></p>

<p>복사한 폴더에서 터미널 창을 열어 깃허브 저장소로 업로드 합니다.</p>
<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">imhs@imhsui-MacBookPro limlogging.github.io % git add.
imhs@imhsui-MacBookPro limlogging.github.io % git commit -m "테마 업로드"
imhs@imhsui-MacBookPro limlogging.github.io % git push
</span></code></pre></div></div>

<h1 id="7-blog에-접속해-확인합니다">7. blog에 접속해 확인합니다.</h1>
<p>https://깃허브ID.github.io에 접속하면, 테마가 적용된 블로그를 확인할 수 있습니다. 적용까지 1 ~ 2분 걸리는 것 같습니다.</p>]]></content><author><name>HyeongSub Lim</name></author><category term="GitHubBlog" /><category term="GitHub" /><category term="blog" /><category term="GitHub blog" /><summary type="html"><![CDATA[github blog 만들기]]></summary></entry><entry><title type="html">[내배캠] 글쓰기 테스트 입니다.</title><link href="http://localhost:4000/sparta/test/" rel="alternate" type="text/html" title="[내배캠] 글쓰기 테스트 입니다." /><published>2024-03-01T00:00:00+09:00</published><updated>2024-03-01T00:00:00+09:00</updated><id>http://localhost:4000/sparta/test</id><content type="html" xml:base="http://localhost:4000/sparta/test/"><![CDATA[<h3 id="test">TEST</h3>

<ul>
  <li>As Is</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="nv">a</span><span class="p">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">1</span>
<span class="k">let</span> <span class="nv">b</span><span class="p">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">2</span>
</code></pre></div></div>

<blockquote>
  <p>TEST</p>
</blockquote>

<h3 id="test2">TEST2</h3>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="n">test</span><span class="p">)</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">print(test)</code> : test</p>

<h3 id="test3">TEST3</h3>

<p><code class="language-plaintext highlighter-rouge">var a: Int = 1 </code></p>

<p>TEST입니다.</p>

<ul>
  <li><a href="https://limlogging.github.io">TEST</a></li>
</ul>

<h3 id="test4">TEST4</h3>
<ul>
  <li>TEST
    <ul>
      <li><a href="https://limlogging.github.io">TEST</a></li>
    </ul>
  </li>
</ul>]]></content><author><name>HyeongSub Lim</name></author><category term="sparta" /><category term="bootcamp" /><summary type="html"><![CDATA[글 작성 테스트]]></summary></entry></feed>