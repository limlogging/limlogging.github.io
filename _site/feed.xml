<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-03-28T23:02:45+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">limlogging Devlog</title><author><name>HyeongSub Lim</name></author><entry><title type="html">[TIL] 내배캠 iOS앱 개발 공부 23일차</title><link href="http://localhost:4000/TIL/til23/" rel="alternate" type="text/html" title="[TIL] 내배캠 iOS앱 개발 공부 23일차" /><published>2024-03-28T00:00:00+09:00</published><updated>2024-03-28T00:00:00+09:00</updated><id>http://localhost:4000/TIL/til23</id><content type="html" xml:base="http://localhost:4000/TIL/til23/"><![CDATA[<h3 id="데일리-스크럼">데일리 스크럼</h3>
<p><img src="/assets/images/categories/til/2024-03-28-til23.png" alt="" /></p>

<h3 id="알고리즘">알고리즘</h3>
<ul>
  <li>문제를 보고 어떻게 풀어야겠다 바로 생각이 들었는데 매일 매일 한문제 풀었던게 효과가 있는 것 같다.</li>
  <li>풀이 보기
    <ul>
      <li><a href="https://limlogging.github.io/algorithm/%EC%B9%B4%EB%93%9C%EB%AD%89%EC%B9%98/" target="_blank">카드뭉치</a></li>
    </ul>
  </li>
</ul>

<h3 id="개인-과제-공부">개인 과제 공부</h3>
<ul>
  <li>화면을 이동해서 데이터를 수정하고 화면을 종료 후 데이터가 수정됐는지 확인하는 기능을 추가했다.</li>
  <li>화면 이동을 통해서 델리게이트 사용 연습이 되는 것 같다.</li>
  <li><a href="https://limlogging.github.io/uikit/%EB%A1%9C%EC%9A%B0%EC%84%A0%ED%83%9D%ED%9B%84%ED%99%94%EB%A9%B4%EC%9D%B4%EB%8F%99/" target="_blank">TableView Row 선택 후 화면 이동하기</a></li>
</ul>

<h3 id="챌린지반">챌린지반</h3>
<ul>
  <li>다음주까지 깃허브 앱 메인 화면을 만들어 보는 과제를 받았다.</li>
  <li>api를 사용하여 저장소 수를 받아와야하고 코드를 통해 오토레이아웃을 사용해야한다.</li>
  <li>조금 빡센것 같은데 개인 과제 복습하면서 챌린지반 과제도 도전해야겠다!!!</li>
</ul>

<h3 id="내일-목표">내일 목표</h3>
<ul>
  <li>개인과제 코드 정리 및 제출</li>
  <li>알고리즘 문제 풀기</li>
  <li>챌린지반 과제 분석</li>
</ul>]]></content><author><name>HyeongSub Lim</name></author><category term="TIL" /><category term="TIL" /><summary type="html"><![CDATA[내배캠 iOS앱 개발 공부 23일차 이야기]]></summary></entry><entry><title type="html">[UIKit] TableView Row 선택 후 화면 이동하기</title><link href="http://localhost:4000/uikit/%EB%A1%9C%EC%9A%B0%EC%84%A0%ED%83%9D%ED%9B%84%ED%99%94%EB%A9%B4%EC%9D%B4%EB%8F%99/" rel="alternate" type="text/html" title="[UIKit] TableView Row 선택 후 화면 이동하기" /><published>2024-03-28T00:00:00+09:00</published><updated>2024-03-28T00:00:00+09:00</updated><id>http://localhost:4000/uikit/%EB%A1%9C%EC%9A%B0%EC%84%A0%ED%83%9D%ED%9B%84%ED%99%94%EB%A9%B4%EC%9D%B4%EB%8F%99</id><content type="html" xml:base="http://localhost:4000/uikit/%EB%A1%9C%EC%9A%B0%EC%84%A0%ED%83%9D%ED%9B%84%ED%99%94%EB%A9%B4%EC%9D%B4%EB%8F%99/"><![CDATA[<h1 id="row-선택-후-화면-이동하기">Row 선택 후 화면 이동하기</h1>
<ul>
  <li>ViewController를 만들고 TableView Row를 선택하면 Cell의 정보를 확인하는 방법입니다.</li>
</ul>

<h2 id="1-실행화면">1. 실행화면</h2>

<video width="640" height="360" controls="">
    <source src="../../assets/video/2024-03-28-로우선택후화면이동.mov" type="video/mp4" />
</video>

<p><br /></p>

<h2 id="2-view-controller-생성-및-세그웨이segue-선택">2. View Controller 생성 및 세그웨이(Segue) 선택</h2>
<ul>
  <li>세그웨이 연결 후 row를 선택하면 View Controller가 연결됩니다.</li>
  <li>Cell의 데이터를 View Controller로 전달해주기 위해 설정 및 코드를 추가해야합니다.</li>
</ul>

<p><img src="../../assets/images/categories/uikit/2024-03-28-뷰컨트롤러생성및세그웨이선택.png" alt="" /></p>

<h2 id="3-세그웨이-식별자-설정">3. 세그웨이 식별자 설정</h2>
<ul>
  <li>세그웨이 이름을 ToDoDetailSegue로 지정하였습니다.</li>
</ul>

<p><img src="../../assets/images/categories/uikit/2024-03-28-세그웨이선택및식별자지정.png" alt="" /></p>

<h2 id="4-uiviewcontroller를-상속받는-class-파일-생성">4. UIViewController를 상속받는 class 파일 생성</h2>
<ul>
  <li>DetailViewController 이름의 class 파일 생성했습니다.</li>
</ul>

<h2 id="5-view-controller에-생성한-class-파일-연결">5. View Controller에 생성한 class 파일 연결</h2>
<ul>
  <li>스토리보드 컨트롤뷰와 클래스파일을 연결합니다.</li>
</ul>

<p><img src="../../assets/images/categories/uikit/2024-03-28-뷰컨트롤러클래스지정.png" alt="" /></p>

<h2 id="6-detailview-controller에서-아울렛-변수-설정">6. DetailView Controller에서 아울렛 변수 설정</h2>
<ul>
  <li>아울렛 변수를 생성하고 코드를 수정합니다.</li>
</ul>

<p><img src="../../assets/images/categories/uikit/2024-03-28-아울렛변수생성.png" alt="" /></p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">DetailViewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>
    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">titleTextField</span><span class="p">:</span> <span class="kt">UITextField</span><span class="o">!</span>
    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">detailTextView</span><span class="p">:</span> <span class="kt">UITextView</span><span class="o">!</span>
    
    <span class="c1">//ViewController에서 전달 받은 데이터를 저장하는 변수 </span>
    <span class="k">var</span> <span class="nv">receiveTitle</span><span class="p">:</span> <span class="kt">String</span><span class="p">?</span>
    <span class="k">var</span> <span class="nv">receiveDetail</span><span class="p">:</span> <span class="kt">String</span><span class="p">?</span>
    
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>
        <span class="c1">//화면이 실행될때 ViewController에서 받은 데이터를 아울렛 변수에 할당</span>
        <span class="n">titleTextField</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">receiveTitle</span>       
        <span class="n">detailTextView</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">receiveDetail</span>
</code></pre></div></div>

<h2 id="7-view-controller에서-prepare-매서드-설정">7. View Controller에서 prepare 매서드 설정</h2>
<ul>
  <li>TableView가 있는 클래스파일에서 prepare 메서드 설정</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="c1">//스토리보드에서의 화면 이동</span>
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">prepare</span><span class="p">(</span><span class="k">for</span> <span class="nv">segue</span><span class="p">:</span> <span class="kt">UIStoryboardSegue</span><span class="p">,</span> <span class="nv">sender</span><span class="p">:</span> <span class="kt">Any</span><span class="p">?)</span> <span class="p">{</span>
        <span class="c1">//화면 이동할때 세그웨이 식별자 확인 </span>
        <span class="k">if</span> <span class="n">segue</span><span class="o">.</span><span class="n">identifier</span> <span class="o">==</span> <span class="s">"ToDoDetailSegue"</span> <span class="p">{</span>
            <span class="k">let</span> <span class="nv">cell</span> <span class="o">=</span> <span class="n">sender</span> <span class="k">as!</span> <span class="kt">UITableViewCell</span>   <span class="c1">//sender를 UITableViewCell로 캐스팅하여 Cell에 할당 </span>
            <span class="k">let</span> <span class="nv">indexPath</span> <span class="o">=</span> <span class="k">self</span><span class="o">.</span><span class="n">myTodoListTableView</span><span class="o">.</span><span class="nf">indexPath</span><span class="p">(</span><span class="nv">for</span><span class="p">:</span> <span class="n">cell</span><span class="p">)</span>   <span class="c1">//TableView에서 선택한 셀의 indexPath 가져오기 </span>
            <span class="k">let</span> <span class="nv">detailView</span> <span class="o">=</span> <span class="n">segue</span><span class="o">.</span><span class="n">destination</span> <span class="k">as!</span> <span class="kt">DetailViewController</span>     <span class="c1">//세그웨이 목적지를 새로만든 클래스파일로 형변환</span>

            <span class="c1">//DetailViewController에 생성한 아울렛 변수에 title, detail 데이터 할당  </span>
            <span class="n">detailView</span><span class="o">.</span><span class="n">receiveTitle</span> <span class="o">=</span> <span class="n">myToDoListArray</span><span class="p">[</span><span class="n">indexPath</span><span class="o">!.</span><span class="n">row</span><span class="p">]</span><span class="o">.</span><span class="n">toDoTitle</span>     
            <span class="n">detailView</span><span class="o">.</span><span class="n">receiveDetail</span> <span class="o">=</span> <span class="n">myToDoListArray</span><span class="p">[</span><span class="n">indexPath</span><span class="o">!.</span><span class="n">row</span><span class="p">]</span><span class="o">.</span><span class="n">toDoDetail</span>   
        <span class="p">}</span>
    <span class="p">}</span>
</code></pre></div></div>

<h2 id="8-실행">8. 실행</h2>
<ul>
  <li>처음 동영상처럼 로우를 선택하면 ViewController의 Cell데이터를 DetailViewController에서도 확인할 수 있습니다.</li>
</ul>

<p><br /></p>

<h1 id="detail-화면에서-데이터-수정하기">Detail 화면에서 데이터 수정하기</h1>
<ul>
  <li>Detail View Controller에서 Title의 TextField, Detail의 TextView를 수정하고 되돌아 갔을때 ViewController에서도 수정된 데이터를 볼 수 있는 예제입니다.</li>
</ul>

<h2 id="1-실행-화면">1. 실행 화면</h2>

<video width="640" height="360" controls="">
    <source src="../../assets/video/2024-03-28-타이틀디테일수정.mov" type="video/mp4" />
</video>

<h2 id="2-델리게이트-채택">2. 델리게이트 채택</h2>
<ul>
  <li>DetailViewController에서 TextField와 TextView 델리게이트 채택 후 메서드를 구현합니다.</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// MARK: - 타이틀 처리를 위한 델리게이트</span>
<span class="kd">extension</span> <span class="kt">DetailViewController</span><span class="p">:</span> <span class="kt">UITextFieldDelegate</span> <span class="p">{</span>
    <span class="c1">//UITextField에 텍스트를 입력하거나 삭제할 때마다 호출 </span>
    <span class="kd">func</span> <span class="nf">textFieldDidChangeSelection</span><span class="p">(</span><span class="n">_</span> <span class="nv">textField</span><span class="p">:</span> <span class="kt">UITextField</span><span class="p">)</span> <span class="p">{</span>

    <span class="p">}</span>
<span class="p">}</span>
<span class="c1">// MARK: - 디테일 처리를 위한 델리게이트</span>
<span class="kd">extension</span> <span class="kt">DetailViewController</span><span class="p">:</span> <span class="kt">UITextViewDelegate</span> <span class="p">{</span>
    <span class="c1">// UITextView에 텍스트를 입력하거나 삭제할 때마다 호출</span>
    <span class="kd">func</span> <span class="nf">textViewDidChange</span><span class="p">(</span><span class="n">_</span> <span class="nv">textView</span><span class="p">:</span> <span class="kt">UITextView</span><span class="p">)</span> <span class="p">{</span>
 
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="3-델리게이트-설정">3. 델리게이트 설정</h2>
<ul>
  <li>델리게이트를 설정합니다.</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>
        <span class="c1">//ViewController에서 받은 데이터 할당</span>
        <span class="n">titleTextField</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">receiveTitle</span>     
        <span class="n">detailTextView</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">receiveDetail</span>
        
        <span class="c1">//델리게이트 설정 </span>
        <span class="n">titleTextField</span><span class="o">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="k">self</span>
        <span class="n">detailTextView</span><span class="o">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="k">self</span>
    <span class="p">}</span>
</code></pre></div></div>

<h2 id="4-델리게이트-프로토콜-정의">4. 델리게이트 프로토콜 정의</h2>
<ul>
  <li>프로토콜을 정의하고 선언합니다.</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">UIKit</span>
<span class="c1">//TextField 델리게이트 </span>
<span class="kd">protocol</span> <span class="kt">DetailViewControllerTitleDelegate</span><span class="p">:</span> <span class="kt">AnyObject</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">textFieldDidChangeSelection</span><span class="p">(</span><span class="n">_</span> <span class="nv">controller</span><span class="p">:</span> <span class="kt">DetailViewController</span><span class="p">,</span> <span class="nv">textField</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span>
<span class="p">}</span>
<span class="c1">//TextView 델리게이트 </span>
<span class="kd">protocol</span> <span class="kt">DetailViewControllerDetailDelegate</span><span class="p">:</span> <span class="kt">AnyObject</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">textViewDidChange</span><span class="p">(</span><span class="n">_</span> <span class="nv">controller</span><span class="p">:</span> <span class="kt">DetailViewController</span><span class="p">,</span> <span class="nv">textView</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span>
<span class="p">}</span>
<span class="kd">class</span> <span class="kt">DetailViewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>
    <span class="c1">//코드생략 </span>

    <span class="c1">//델리게이트 선언 </span>
    <span class="k">var</span> <span class="nv">titleDelegate</span><span class="p">:</span> <span class="kt">DetailViewControllerTitleDelegate</span><span class="p">?</span>       
    <span class="k">var</span> <span class="nv">detailDelegate</span><span class="p">:</span> <span class="kt">DetailViewControllerDetailDelegate</span><span class="p">?</span> 
</code></pre></div></div>

<h2 id="5-메서드-구현">5. 메서드 구현</h2>
<ul>
  <li>델리게이트 채택 후 생성한 메서드를 구현합니다.</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// MARK: - 타이틀 처리를 위한 델리게이트</span>
<span class="kd">extension</span> <span class="kt">DetailViewController</span><span class="p">:</span> <span class="kt">UITextFieldDelegate</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">textFieldDidChangeSelection</span><span class="p">(</span><span class="n">_</span> <span class="nv">textField</span><span class="p">:</span> <span class="kt">UITextField</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">//textField 확인 후 nil 체크 </span>
        <span class="k">if</span> <span class="n">textField</span> <span class="o">==</span> <span class="n">titleTextField</span> <span class="p">{</span>
            <span class="k">if</span> <span class="n">textField</span><span class="o">.</span><span class="n">text</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
                <span class="c1">//textField의 변경을 알림 </span>
                <span class="n">titleDelegate</span><span class="p">?</span><span class="o">.</span><span class="nf">textFieldDidChangeSelection</span><span class="p">(</span><span class="k">self</span><span class="p">,</span> <span class="nv">textField</span><span class="p">:</span> <span class="n">textField</span><span class="o">.</span><span class="n">text</span><span class="o">!</span><span class="p">)</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="c1">// MARK: - 디테일 처리를 위한 델리게이트</span>
<span class="kd">extension</span> <span class="kt">DetailViewController</span><span class="p">:</span> <span class="kt">UITextViewDelegate</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">textViewDidChange</span><span class="p">(</span><span class="n">_</span> <span class="nv">textView</span><span class="p">:</span> <span class="kt">UITextView</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">//textView 확인 후 nil 체크 </span>
        <span class="k">if</span> <span class="n">textView</span> <span class="o">==</span> <span class="n">detailTextView</span> <span class="p">{</span>
            <span class="k">if</span> <span class="n">textView</span><span class="o">.</span><span class="n">text</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
                <span class="c1">//textView 변경 알림 </span>
                <span class="n">detailDelegate</span><span class="p">?</span><span class="o">.</span><span class="nf">textViewDidChange</span><span class="p">(</span><span class="k">self</span><span class="p">,</span> <span class="nv">textView</span><span class="p">:</span> <span class="n">textView</span><span class="o">.</span><span class="n">text</span><span class="p">)</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="6-viewcontroller에서-생성한-델리게이트-채택">6. ViewController에서 생성한 델리게이트 채택</h2>
<ul>
  <li>필수 메서드를 구현하고 ViewController의 배열에서 title, detail 데이터를 수정하면 되는데 indexPath를 알 수 없습니다.</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// MARK: - 디테일 뷰에서 타이틀 입력</span>
<span class="kd">extension</span> <span class="kt">ViewController</span><span class="p">:</span> <span class="kt">DetailViewControllerTitleDelegate</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">textFieldDidChangeSelection</span><span class="p">(</span><span class="n">_</span> <span class="nv">controller</span><span class="p">:</span> <span class="kt">DetailViewController</span><span class="p">,</span> <span class="nv">textField</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">//ViewController에 있는 배열의 데이터 수정 </span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="c1">// MARK: - 디테일 뷰에서 디테일 입력</span>
<span class="kd">extension</span> <span class="kt">ViewController</span><span class="p">:</span> <span class="kt">DetailViewControllerDetailDelegate</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">textViewDidChange</span><span class="p">(</span><span class="n">_</span> <span class="nv">controller</span><span class="p">:</span> <span class="kt">DetailViewController</span><span class="p">,</span> <span class="nv">textView</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">//ViewController에 있는 배열의 데이터 수정</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="7-detailviewcontroller에서-indexpath-받을-변수-생성하기">7. DetailViewController에서 indexPath 받을 변수 생성하기</h2>
<ul>
  <li>receiveIndexPath 옵셔널 변수와 indexPath 변수를 선언합니다.</li>
  <li>ViewDidLoad에서 indexPath 변수의 값을 receiveIndexPath로 할당합니다.</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">DetailViewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>
    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">titleTextField</span><span class="p">:</span> <span class="kt">UITextField</span><span class="o">!</span>
    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">detailTextView</span><span class="p">:</span> <span class="kt">UITextView</span><span class="o">!</span>
    
    <span class="c1">//ViewController에서 전달 받은 데이터 저장</span>
    <span class="k">var</span> <span class="nv">receiveTitle</span><span class="p">:</span> <span class="kt">String</span><span class="p">?</span>
    <span class="k">var</span> <span class="nv">receiveDetail</span><span class="p">:</span> <span class="kt">String</span><span class="p">?</span>
    <span class="k">var</span> <span class="nv">receiveIndexPath</span><span class="p">:</span> <span class="kt">Int</span><span class="p">?</span>  <span class="c1">//IndexPath를 받기위한 변수 </span>
    
    <span class="k">var</span> <span class="nv">indexPath</span><span class="p">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">0</span>
    
    <span class="k">var</span> <span class="nv">titleDelegate</span><span class="p">:</span> <span class="kt">DetailViewControllerTitleDelegate</span><span class="p">?</span>
    <span class="k">var</span> <span class="nv">detailDelegate</span><span class="p">:</span> <span class="kt">DetailViewControllerDetailDelegate</span><span class="p">?</span>
    
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>
        <span class="n">titleTextField</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">receiveTitle</span>
        <span class="n">detailTextView</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">receiveDetail</span>
        <span class="n">indexPath</span> <span class="o">=</span> <span class="n">receiveIndexPath</span><span class="o">!</span>   <span class="c1">//indexPath 저장 </span>
</code></pre></div></div>

<h2 id="8-viewcontroller에서-prepare-메서드-수정">8. ViewController에서 prepare 메서드 수정</h2>
<ul>
  <li>IndexPath를 전달하는 코드와 델리게이트를 설정합니다.</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">override</span> <span class="kd">func</span> <span class="nf">prepare</span><span class="p">(</span><span class="k">for</span> <span class="nv">segue</span><span class="p">:</span> <span class="kt">UIStoryboardSegue</span><span class="p">,</span> <span class="nv">sender</span><span class="p">:</span> <span class="kt">Any</span><span class="p">?)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="n">segue</span><span class="o">.</span><span class="n">identifier</span> <span class="o">==</span> <span class="s">"ToDoDetailSegue"</span> <span class="p">{</span>
            <span class="k">let</span> <span class="nv">cell</span> <span class="o">=</span> <span class="n">sender</span> <span class="k">as!</span> <span class="kt">UITableViewCell</span>
            <span class="k">let</span> <span class="nv">indexPath</span> <span class="o">=</span> <span class="k">self</span><span class="o">.</span><span class="n">myTodoListTableView</span><span class="o">.</span><span class="nf">indexPath</span><span class="p">(</span><span class="nv">for</span><span class="p">:</span> <span class="n">cell</span><span class="p">)</span>
            <span class="k">let</span> <span class="nv">detailView</span> <span class="o">=</span> <span class="n">segue</span><span class="o">.</span><span class="n">destination</span> <span class="k">as!</span> <span class="kt">DetailViewController</span>
            <span class="n">detailView</span><span class="o">.</span><span class="n">receiveTitle</span> <span class="o">=</span> <span class="n">myToDoListArray</span><span class="p">[</span><span class="n">indexPath</span><span class="o">!.</span><span class="n">row</span><span class="p">]</span><span class="o">.</span><span class="n">toDoTitle</span>
            <span class="n">detailView</span><span class="o">.</span><span class="n">receiveDetail</span> <span class="o">=</span> <span class="n">myToDoListArray</span><span class="p">[</span><span class="n">indexPath</span><span class="o">!.</span><span class="n">row</span><span class="p">]</span><span class="o">.</span><span class="n">toDoDetail</span>
            <span class="n">detailView</span><span class="o">.</span><span class="n">receiveIndexPath</span> <span class="o">=</span> <span class="n">indexPath</span><span class="o">!.</span><span class="n">row</span>    <span class="c1">//IndexPath 전달 </span>
            <span class="n">detailView</span><span class="o">.</span><span class="n">titleDelegate</span> <span class="o">=</span> <span class="k">self</span>     <span class="c1">//타이틀처리를 위한 TextField 델리게이트</span>
            <span class="n">detailView</span><span class="o">.</span><span class="n">detailDelegate</span> <span class="o">=</span> <span class="k">self</span>    <span class="c1">//디테일처리를 위한 TextView 델리게이트</span>
        <span class="p">}</span>
    <span class="p">}</span>
</code></pre></div></div>

<h2 id="9-viewcontroller에서-채택한-메서드-수정">9. ViewController에서 채택한 메서드 수정</h2>
<ul>
  <li>indexPath를 받아 올 수 있어 배열을 수정합니다.</li>
  <li>수정된 데이터를 확인할 수 있도록 reload 합니다.</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// MARK: - 디테일 뷰에서 타이틀 입력</span>
<span class="kd">extension</span> <span class="kt">ViewController</span><span class="p">:</span> <span class="kt">DetailViewControllerTitleDelegate</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">textFieldDidChangeSelection</span><span class="p">(</span><span class="n">_</span> <span class="nv">controller</span><span class="p">:</span> <span class="kt">DetailViewController</span><span class="p">,</span> <span class="nv">textField</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="k">let</span> <span class="nv">indexPath</span> <span class="o">=</span> <span class="n">controller</span><span class="o">.</span><span class="n">receiveIndexPath</span> <span class="p">{</span>
            <span class="n">myToDoListArray</span><span class="p">[</span><span class="n">indexPath</span><span class="p">]</span><span class="o">.</span><span class="n">toDoTitle</span> <span class="o">=</span> <span class="n">textField</span>    <span class="c1">//타이틀 자동저장</span>
            <span class="k">self</span><span class="o">.</span><span class="n">myTodoListTableView</span><span class="o">.</span><span class="nf">reloadData</span><span class="p">()</span>   <span class="c1">//테이블 뷰 리로드</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="c1">// MARK: - 디테일 뷰에서 디테일 입력</span>
<span class="kd">extension</span> <span class="kt">ViewController</span><span class="p">:</span> <span class="kt">DetailViewControllerDetailDelegate</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">textViewDidChange</span><span class="p">(</span><span class="n">_</span> <span class="nv">controller</span><span class="p">:</span> <span class="kt">DetailViewController</span><span class="p">,</span> <span class="nv">textView</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="k">let</span> <span class="nv">indexPath</span> <span class="o">=</span> <span class="n">controller</span><span class="o">.</span><span class="n">receiveIndexPath</span> <span class="p">{</span>
            <span class="n">myToDoListArray</span><span class="p">[</span><span class="n">indexPath</span><span class="p">]</span><span class="o">.</span><span class="n">toDoDetail</span> <span class="o">=</span> <span class="n">textView</span>    <span class="c1">//디테일 자동저장</span>
            <span class="k">self</span><span class="o">.</span><span class="n">myTodoListTableView</span><span class="o">.</span><span class="nf">reloadData</span><span class="p">()</span>   <span class="c1">//테이블 뷰 리로드</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="10-실행">10. 실행</h2>
<ul>
  <li>처음 동영상처럼 ViewController의 TableView에서 Row를 선택하면 DetailViewController 화면으로 이동하고 DetailViewController에서 ViewController Cell데이터를 확인할 수 있습니다.</li>
</ul>

<h1 id="마무리">마무리</h1>
<ul>
  <li>데이터를 주고 받을 때 델리게이트를 사용해서 주고 받는 연습이 된다.</li>
</ul>]]></content><author><name>HyeongSub Lim</name></author><category term="UIKit" /><category term="swift" /><category term="iOS" /><category term="Tableview" /><category term="Cell" /><category term="Row" /><summary type="html"><![CDATA[Table View Row 선택 후 화면 이동하기]]></summary></entry><entry><title type="html">[프로그래머스/Swift] 카드뭉치</title><link href="http://localhost:4000/algorithm/%EC%B9%B4%EB%93%9C%EB%AD%89%EC%B9%98/" rel="alternate" type="text/html" title="[프로그래머스/Swift] 카드뭉치" /><published>2024-03-28T00:00:00+09:00</published><updated>2024-03-28T00:00:00+09:00</updated><id>http://localhost:4000/algorithm/%EC%B9%B4%EB%93%9C%EB%AD%89%EC%B9%98</id><content type="html" xml:base="http://localhost:4000/algorithm/%EC%B9%B4%EB%93%9C%EB%AD%89%EC%B9%98/"><![CDATA[<h1 id="문제-설명">문제 설명</h1>
<ul>
  <li>코니는 영어 단어가 적힌 카드 뭉치 두 개를 선물로 받았습니다. 코니는 다음과 같은 규칙으로 카드에 적힌 단어들을 사용해 원하는 순서의 단어 배열을 만들 수 있는지 알고 싶습니다.
    <ul>
      <li>원하는 카드 뭉치에서 카드를 순서대로 한 장씩 사용합니다.</li>
      <li>한 번 사용한 카드는 다시 사용할 수 없습니다.</li>
      <li>카드를 사용하지 않고 다음 카드로 넘어갈 수 없습니다.</li>
      <li>기존에 주어진 카드 뭉치의 단어 순서는 바꿀 수 없습니다.</li>
    </ul>
  </li>
  <li>예를 들어 첫 번째 카드 뭉치에 순서대로 [“i”, “drink”, “water”], 두 번째 카드 뭉치에 순서대로 [“want”, “to”]가 적혀있을 때 [“i”, “want”, “to”, “drink”, “water”] 순서의 단어 배열을 만들려고 한다면 첫 번째 카드 뭉치에서 “i”를 사용한 후 두 번째 카드 뭉치에서 “want”와 “to”를 사용하고 첫 번째 카드뭉치에 “drink”와 “water”를 차례대로 사용하면 원하는 순서의 단어 배열을 만들 수 있습니다.</li>
  <li>
    <p>문자열로 이루어진 배열 cards1, cards2와 원하는 단어 배열 goal이 매개변수로 주어질 때, cards1과 cards2에 적힌 단어들로 goal를 만들 있다면 “Yes”를, 만들 수 없다면 “No”를 return하는 solution 함수를 완성해주세요.</p>
  </li>
  <li><a href="https://school.programmers.co.kr/learn/courses/30/lessons/159994" target="_blank">문제 풀기</a></li>
</ul>

<h1 id="제한사항">제한사항</h1>
<ul>
  <li>1 ≤ cards1의 길이, cards2의 길이 ≤ 10
    <ul>
      <li>1 ≤ cards1[i]의 길이, cards2[i]의 길이 ≤ 10</li>
      <li>cards1과 cards2에는 서로 다른 단어만 존재합니다.</li>
    </ul>
  </li>
  <li>2 ≤ goal의 길이 ≤ cards1의 길이 + cards2의 길이
    <ul>
      <li>1 ≤ goal[i]의 길이 ≤ 10</li>
      <li>goal의 원소는 cards1과 cards2의 원소들로만 이루어져 있습니다.</li>
    </ul>
  </li>
  <li>cards1, cards2, goal의 문자열들은 모두 알파벳 소문자로만 이루어져 있습니다.</li>
</ul>

<h1 id="입출력-예">입출력 예</h1>

<table>
  <thead>
    <tr>
      <th>cards1</th>
      <th>cards2</th>
      <th>goal</th>
      <th>result</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>[“i”, “drink”, “water”]</td>
      <td>[“want”, “to”]</td>
      <td>[“i”, “want”, “to”, “drink”, “water”]</td>
      <td>“Yes”</td>
    </tr>
    <tr>
      <td>[“i”, “water”, “drink”]</td>
      <td>[“want”, “to”]</td>
      <td>[“i”, “want”, “to”, “drink”, “water”]</td>
      <td>“No”</td>
    </tr>
  </tbody>
</table>

<h1 id="나의-풀이">나의 풀이</h1>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">Foundation</span>

<span class="kd">func</span> <span class="nf">solution</span><span class="p">(</span><span class="n">_</span> <span class="nv">cards1</span><span class="p">:[</span><span class="kt">String</span><span class="p">],</span> <span class="n">_</span> <span class="nv">cards2</span><span class="p">:[</span><span class="kt">String</span><span class="p">],</span> <span class="n">_</span> <span class="nv">goal</span><span class="p">:[</span><span class="kt">String</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="kt">String</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">cd1</span> <span class="o">=</span> <span class="n">cards1</span>
    <span class="k">var</span> <span class="nv">cd2</span> <span class="o">=</span> <span class="n">cards2</span>
    <span class="k">var</span> <span class="nv">removeCnt</span><span class="p">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">0</span>
    
    <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="n">goal</span> <span class="p">{</span>
        <span class="k">if</span> <span class="n">cd1</span><span class="o">.</span><span class="n">count</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">i</span> <span class="o">==</span> <span class="n">cd1</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="p">{</span>
            <span class="n">cd1</span><span class="o">.</span><span class="nf">remove</span><span class="p">(</span><span class="nv">at</span><span class="p">:</span> <span class="mi">0</span><span class="p">)</span>
            <span class="n">removeCnt</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="n">cd2</span><span class="o">.</span><span class="n">count</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">i</span> <span class="o">==</span> <span class="n">cd2</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="p">{</span>
            <span class="n">cd2</span><span class="o">.</span><span class="nf">remove</span><span class="p">(</span><span class="nv">at</span><span class="p">:</span> <span class="mi">0</span><span class="p">)</span>
            <span class="n">removeCnt</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="k">if</span> <span class="n">goal</span><span class="o">.</span><span class="n">count</span> <span class="o">==</span> <span class="n">removeCnt</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s">"Yes"</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s">"No"</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h1 id="다른-사람-풀이">다른 사람 풀이</h1>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">Foundation</span>

<span class="kd">func</span> <span class="nf">solution</span><span class="p">(</span><span class="n">_</span> <span class="nv">cards1</span><span class="p">:[</span><span class="kt">String</span><span class="p">],</span> <span class="n">_</span> <span class="nv">cards2</span><span class="p">:[</span><span class="kt">String</span><span class="p">],</span> <span class="n">_</span> <span class="nv">goal</span><span class="p">:[</span><span class="kt">String</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="kt">String</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">reverseCards1</span> <span class="o">=</span> <span class="kt">Array</span><span class="p">(</span><span class="n">cards1</span><span class="o">.</span><span class="nf">reversed</span><span class="p">())</span>
    <span class="k">var</span> <span class="nv">reverseCards2</span> <span class="o">=</span> <span class="kt">Array</span><span class="p">(</span><span class="n">cards2</span><span class="o">.</span><span class="nf">reversed</span><span class="p">())</span>

    <span class="k">for</span> <span class="n">g</span> <span class="k">in</span> <span class="n">goal</span> <span class="p">{</span>
        <span class="k">if</span> <span class="o">!</span><span class="n">reverseCards1</span><span class="o">.</span><span class="n">isEmpty</span> <span class="o">&amp;&amp;</span> <span class="n">reverseCards1</span><span class="o">.</span><span class="n">last</span> <span class="o">==</span> <span class="n">g</span> <span class="p">{</span>
            <span class="n">reverseCards1</span><span class="o">.</span><span class="nf">removeLast</span><span class="p">()</span>
            <span class="k">continue</span>
        <span class="p">}</span>
        <span class="k">if</span> <span class="o">!</span><span class="n">reverseCards2</span><span class="o">.</span><span class="n">isEmpty</span> <span class="o">&amp;&amp;</span> <span class="n">reverseCards2</span><span class="o">.</span><span class="n">last</span> <span class="o">==</span> <span class="n">g</span> <span class="p">{</span>
            <span class="n">reverseCards2</span><span class="o">.</span><span class="nf">removeLast</span><span class="p">()</span>
            <span class="k">continue</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="s">"No"</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="s">"Yes"</span>
<span class="p">}</span>
</code></pre></div></div>

<h1 id="나의-풀이방법">나의 풀이방법</h1>
<ul>
  <li>goal을 하나씩 불러와서 card의 첫번째 값과 같으면 remove 시키고 삭제 횟수를 증가, 삭제 횟수가 goal 수가 일치하면 Yes, 아니면 No !</li>
</ul>

<h1 id="다른사람-풀이">다른사람 풀이</h1>
<ul>
  <li>이번에는 다른 사람 풀이도 비슷</li>
</ul>]]></content><author><name>HyeongSub Lim</name></author><category term="Algorithm" /><category term="Algorithm" /><category term="coding test" /><category term="카드뭉치" /><summary type="html"><![CDATA[[프로그래머스/Swift] 카드뭉치]]></summary></entry><entry><title type="html">[UIKit] Cell의 오른쪽 Swipe 액션으로 수정/삭제 버튼 구현</title><link href="http://localhost:4000/uikit/%EC%85%80%EC%98%A4%EB%A5%B8%EC%AA%BD%EC%8A%A4%EC%99%80%EC%9D%B4%ED%94%84%EC%95%A1%EC%85%98/" rel="alternate" type="text/html" title="[UIKit] Cell의 오른쪽 Swipe 액션으로 수정/삭제 버튼 구현" /><published>2024-03-27T00:00:00+09:00</published><updated>2024-03-27T00:00:00+09:00</updated><id>http://localhost:4000/uikit/%EC%85%80%EC%98%A4%EB%A5%B8%EC%AA%BD%EC%8A%A4%EC%99%80%EC%9D%B4%ED%94%84%EC%95%A1%EC%85%98</id><content type="html" xml:base="http://localhost:4000/uikit/%EC%85%80%EC%98%A4%EB%A5%B8%EC%AA%BD%EC%8A%A4%EC%99%80%EC%9D%B4%ED%94%84%EC%95%A1%EC%85%98/"><![CDATA[<h1 id="cell을-오른쪽-swipe하여-수정--삭제-기능-화면보기">Cell을 오른쪽 Swipe하여 수정 / 삭제 기능 화면보기</h1>
<ul>
  <li>Cell을 오른쪽 Swipe하여 수정, 삭제 버튼을 추가했습니다.</li>
</ul>

<h2 id="실행화면">실행화면</h2>

<video width="640" height="360" controls="">
    <source src="../../assets/video/2024-03-27-trailingSwipeActionsConfigurationForRowAt.mov" type="video/mp4" />
</video>

<p><br /></p>

<h1 id="예제-코드">예제 코드</h1>
<ul>
  <li>UITableViewDelegate 채택 후 trailingSwipeActionsConfigurationForRowAt 메서드를 구현합니다.</li>
  <li>특정 indexPath에 해당하는 테이블 뷰 셀의 오른쪽 스와이프 액션을 구성할 때 호출됩니다.</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 오른쪽으로 스와이프할 때의 액션을 구성하는 메서드</span>
<span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">trailingSwipeActionsConfigurationForRowAt</span> <span class="nv">indexPath</span><span class="p">:</span> <span class="kt">IndexPath</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">UISwipeActionsConfiguration</span><span class="p">?</span> <span class="p">{</span>
    <span class="c1">// 삭제 액션 설정</span>
    <span class="k">let</span> <span class="nv">deleteAction</span> <span class="o">=</span> <span class="kt">UIContextualAction</span><span class="p">(</span><span class="nv">style</span><span class="p">:</span> <span class="o">.</span><span class="n">destructive</span><span class="p">,</span> <span class="nv">title</span><span class="p">:</span> <span class="s">"삭제"</span><span class="p">)</span> <span class="p">{</span> <span class="p">(</span><span class="n">action</span><span class="p">,</span> <span class="n">view</span><span class="p">,</span> <span class="n">completionHandler</span><span class="p">)</span> <span class="k">in</span>
        <span class="c1">//삭제 기능 추가 </span>
        <span class="k">let</span> <span class="nv">alertController</span> <span class="o">=</span> <span class="kt">UIAlertController</span><span class="p">(</span><span class="nv">title</span><span class="p">:</span> <span class="s">"삭제 확인"</span><span class="p">,</span> <span class="nv">message</span><span class="p">:</span> <span class="s">"삭제하시겠습니까?"</span><span class="p">,</span> <span class="nv">preferredStyle</span><span class="p">:</span> <span class="o">.</span><span class="n">alert</span><span class="p">)</span>
        <span class="k">let</span> <span class="nv">cancelButton</span> <span class="o">=</span> <span class="kt">UIAlertAction</span><span class="p">(</span><span class="nv">title</span><span class="p">:</span> <span class="s">"취소"</span><span class="p">,</span> <span class="nv">style</span><span class="p">:</span> <span class="o">.</span><span class="n">cancel</span><span class="p">)</span>
        <span class="k">let</span> <span class="nv">deleteButton</span> <span class="o">=</span> <span class="kt">UIAlertAction</span><span class="p">(</span><span class="nv">title</span><span class="p">:</span> <span class="s">"삭제"</span><span class="p">,</span> <span class="nv">style</span><span class="p">:</span> <span class="o">.</span><span class="k">default</span><span class="p">)</span> <span class="p">{</span> <span class="n">_</span> <span class="k">in</span>
            <span class="c1">// 데이터 소스에서 해당 셀에 대한 데이터를 삭제</span>
            <span class="k">self</span><span class="o">.</span><span class="n">myToDoListArray</span><span class="o">.</span><span class="nf">remove</span><span class="p">(</span><span class="nv">at</span><span class="p">:</span> <span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="p">)</span>
            <span class="c1">// 테이블 뷰에서 해당 셀을 삭제</span>
            <span class="n">tableView</span><span class="o">.</span><span class="nf">deleteRows</span><span class="p">(</span><span class="nv">at</span><span class="p">:</span> <span class="p">[</span><span class="n">indexPath</span><span class="p">],</span> <span class="nv">with</span><span class="p">:</span> <span class="o">.</span><span class="n">fade</span><span class="p">)</span>
        <span class="p">}</span>
        <span class="n">alertController</span><span class="o">.</span><span class="nf">addAction</span><span class="p">(</span><span class="n">cancelButton</span><span class="p">)</span>
        <span class="n">alertController</span><span class="o">.</span><span class="nf">addAction</span><span class="p">(</span><span class="n">deleteButton</span><span class="p">)</span>
        <span class="k">self</span><span class="o">.</span><span class="nf">present</span><span class="p">(</span><span class="n">alertController</span><span class="p">,</span> <span class="nv">animated</span><span class="p">:</span> <span class="kc">true</span><span class="p">)</span>
    
        <span class="c1">// 처리 완료 핸들러 호출</span>
        <span class="nf">completionHandler</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span>
    <span class="p">}</span>
    
    <span class="c1">// 수정 액션 설정</span>
    <span class="k">let</span> <span class="nv">editAction</span> <span class="o">=</span> <span class="kt">UIContextualAction</span><span class="p">(</span><span class="nv">style</span><span class="p">:</span> <span class="o">.</span><span class="n">normal</span><span class="p">,</span> <span class="nv">title</span><span class="p">:</span> <span class="s">"수정"</span><span class="p">)</span> <span class="p">{</span> <span class="p">(</span><span class="n">action</span><span class="p">,</span> <span class="n">view</span><span class="p">,</span> <span class="n">completionHandler</span><span class="p">)</span> <span class="k">in</span>
        <span class="c1">//수정 기능 추가 </span>
        <span class="k">let</span> <span class="nv">alertController</span> <span class="o">=</span> <span class="kt">UIAlertController</span><span class="p">(</span><span class="nv">title</span><span class="p">:</span> <span class="s">"할 일 입력"</span><span class="p">,</span> <span class="nv">message</span><span class="p">:</span> <span class="s">""</span><span class="p">,</span> <span class="nv">preferredStyle</span><span class="p">:</span> <span class="o">.</span><span class="n">alert</span><span class="p">)</span>
        <span class="n">alertController</span><span class="o">.</span><span class="n">addTextField</span> <span class="p">{</span> <span class="n">textField</span> <span class="k">in</span>
            <span class="n">textField</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="k">self</span><span class="o">.</span><span class="n">myToDoListArray</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="p">]</span><span class="o">.</span><span class="n">toDoTitle</span>
        <span class="p">}</span>
        <span class="k">let</span> <span class="nv">cancelButton</span> <span class="o">=</span> <span class="kt">UIAlertAction</span><span class="p">(</span><span class="nv">title</span><span class="p">:</span> <span class="s">"취소"</span><span class="p">,</span> <span class="nv">style</span><span class="p">:</span> <span class="o">.</span><span class="n">cancel</span><span class="p">)</span>
        <span class="k">let</span> <span class="nv">editButton</span> <span class="o">=</span> <span class="kt">UIAlertAction</span><span class="p">(</span><span class="nv">title</span><span class="p">:</span> <span class="s">"수정"</span><span class="p">,</span> <span class="nv">style</span><span class="p">:</span> <span class="o">.</span><span class="k">default</span><span class="p">)</span> <span class="p">{</span> <span class="n">_</span> <span class="k">in</span>
            <span class="k">if</span> <span class="k">let</span> <span class="nv">editTextField</span> <span class="o">=</span> <span class="n">alertController</span><span class="o">.</span><span class="n">textFields</span><span class="p">?</span><span class="o">.</span><span class="n">first</span><span class="p">,</span>
                <span class="k">let</span> <span class="nv">text</span> <span class="o">=</span> <span class="n">editTextField</span><span class="o">.</span><span class="n">text</span> <span class="p">{</span>
                <span class="k">self</span><span class="o">.</span><span class="n">myToDoListArray</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="p">]</span><span class="o">.</span><span class="n">toDoTitle</span> <span class="o">=</span> <span class="n">text</span>
                <span class="c1">// 수정됐는지 확인하기 위해 row 새로고침</span>
                <span class="k">self</span><span class="o">.</span><span class="n">myTodoListTableView</span><span class="o">.</span><span class="nf">reloadRows</span><span class="p">(</span><span class="nv">at</span><span class="p">:</span> <span class="p">[</span><span class="n">indexPath</span><span class="p">],</span> <span class="nv">with</span><span class="p">:</span> <span class="o">.</span><span class="n">automatic</span><span class="p">)</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="n">alertController</span><span class="o">.</span><span class="nf">addAction</span><span class="p">(</span><span class="n">cancelButton</span><span class="p">)</span>
        <span class="n">alertController</span><span class="o">.</span><span class="nf">addAction</span><span class="p">(</span><span class="n">editButton</span><span class="p">)</span>
        <span class="k">self</span><span class="o">.</span><span class="nf">present</span><span class="p">(</span><span class="n">alertController</span><span class="p">,</span> <span class="nv">animated</span><span class="p">:</span> <span class="kc">true</span><span class="p">)</span>
        
        <span class="nf">completionHandler</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span>
    <span class="p">}</span>
    
    <span class="c1">// 버튼들을 배열로 묶어서 스와이프 액션 구성</span>
    <span class="k">let</span> <span class="nv">swipeConfiguration</span> <span class="o">=</span> <span class="kt">UISwipeActionsConfiguration</span><span class="p">(</span><span class="nv">actions</span><span class="p">:</span> <span class="p">[</span><span class="n">deleteAction</span><span class="p">,</span> <span class="n">editAction</span><span class="p">])</span>
    
    <span class="c1">// 스와이프 액션 구성 반환</span>
    <span class="k">return</span> <span class="n">swipeConfiguration</span>
<span class="p">}</span>
</code></pre></div></div>

<h1 id="마무리">마무리</h1>
<ul>
  <li>기존에 사용한 메서드 tableView(_ tableView: UITableView, commit editingStyle: UITableViewCell.EditingStyle, forRowAt indexPath: IndexPath) 삭제</li>
  <li>기존에 사용한 메서드에서 스와이프를 통한 삭제 기능을 추가했으나 수정 버튼을 추가할 수 없었다.</li>
  <li>스와이프로 원하는 액션을 만들어 구성하는 방법으로 원하는 기능 추가 가능</li>
</ul>]]></content><author><name>HyeongSub Lim</name></author><category term="UIKit" /><category term="swift" /><category term="iOS" /><category term="Tableview" /><category term="Cell" /><category term="Swipe" /><category term="edit" /><category term="delete" /><summary type="html"><![CDATA[Cell 오른쪽 Swipe로 수정,삭제 구현]]></summary></entry><entry><title type="html">[프로그래머스/Swift] 2016년</title><link href="http://localhost:4000/algorithm/2016%EB%85%84/" rel="alternate" type="text/html" title="[프로그래머스/Swift] 2016년" /><published>2024-03-27T00:00:00+09:00</published><updated>2024-03-27T00:00:00+09:00</updated><id>http://localhost:4000/algorithm/2016%EB%85%84</id><content type="html" xml:base="http://localhost:4000/algorithm/2016%EB%85%84/"><![CDATA[<h1 id="문제-설명">문제 설명</h1>
<ul>
  <li>
    <p>2016년 1월 1일은 금요일입니다. 2016년 a월 b일은 무슨 요일일까요? 두 수 a ,b를 입력받아 2016년 a월 b일이 무슨 요일인지 리턴하는 함수, solution을 완성하세요. 요일의 이름은 일요일부터 토요일까지 각각 SUN,MON,TUE,WED,THU,FRI,SAT 입니다. 예를 들어 a=5, b=24라면 5월 24일은 화요일이므로 문자열 “TUE”를 반환하세요.</p>
  </li>
  <li>
    <p><a href="https://school.programmers.co.kr/learn/courses/30/lessons/12901" target="_blank">문제 풀기</a></p>
  </li>
</ul>

<h1 id="제한사항">제한사항</h1>
<ul>
  <li>2016년은 윤년입니다.</li>
  <li>2016년 a월 b일은 실제로 있는 날입니다. (13월 26일이나 2월 45일같은 날짜는 주어지지 않습니다)</li>
</ul>

<h1 id="입출력-예">입출력 예</h1>

<table>
  <thead>
    <tr>
      <th>a</th>
      <th>b</th>
      <th>result</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>5</td>
      <td>24</td>
      <td>TUE</td>
    </tr>
  </tbody>
</table>

<h1 id="나의-풀이">나의 풀이</h1>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">Foundation</span>
<span class="kd">func</span> <span class="nf">solution</span><span class="p">(</span><span class="n">_</span> <span class="nv">a</span><span class="p">:</span><span class="kt">Int</span><span class="p">,</span> <span class="n">_</span> <span class="nv">b</span><span class="p">:</span><span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">String</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">weekdays</span> <span class="o">=</span> <span class="p">[</span><span class="s">"SUN"</span><span class="p">,</span> <span class="s">"MON"</span><span class="p">,</span> <span class="s">"TUE"</span><span class="p">,</span> <span class="s">"WED"</span><span class="p">,</span> <span class="s">"THU"</span> <span class="p">,</span> <span class="s">"FRI"</span><span class="p">,</span> <span class="s">"SAT"</span><span class="p">]</span>
    <span class="k">let</span> <span class="nv">month</span> <span class="o">=</span> <span class="kt">String</span><span class="p">(</span><span class="nv">format</span><span class="p">:</span> <span class="s">"%02d"</span><span class="p">,</span> <span class="n">a</span><span class="p">)</span>   <span class="c1">//한자리인 경우 앞에 0이 붙도록 </span>
    <span class="k">let</span> <span class="nv">day</span> <span class="o">=</span> <span class="kt">String</span><span class="p">(</span><span class="nv">format</span><span class="p">:</span> <span class="s">"%02d"</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>     <span class="c1">//한자리인 경우 앞에 0이 붙도록 </span>
    
    <span class="c1">//문자열을 날짜로 변환하기 위해 사용 </span>
    <span class="k">let</span> <span class="nv">dateFormatter</span> <span class="o">=</span> <span class="kt">DateFormatter</span><span class="p">()</span>
    <span class="n">dateFormatter</span><span class="o">.</span><span class="n">dateFormat</span> <span class="o">=</span> <span class="s">"yyyyMMdd"</span>
    
    <span class="k">guard</span> <span class="k">let</span> <span class="nv">date</span> <span class="o">=</span> <span class="n">dateFormatter</span><span class="o">.</span><span class="nf">date</span><span class="p">(</span><span class="nv">from</span><span class="p">:</span> <span class="s">"2016"</span> <span class="o">+</span> <span class="n">month</span> <span class="o">+</span> <span class="n">day</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="s">""</span> <span class="p">}</span>
    
    <span class="k">let</span> <span class="nv">calendar</span> <span class="o">=</span> <span class="kt">Calendar</span><span class="o">.</span><span class="n">current</span>     <span class="c1">//현재 달력 가져오기 </span>
    <span class="k">let</span> <span class="nv">weekday</span> <span class="o">=</span> <span class="n">calendar</span><span class="o">.</span><span class="nf">component</span><span class="p">(</span><span class="o">.</span><span class="n">weekday</span><span class="p">,</span> <span class="nv">from</span><span class="p">:</span> <span class="n">date</span><span class="p">)</span>  <span class="c1">//요일 추출하기 </span>
        
    <span class="k">return</span> <span class="n">weekdays</span><span class="p">[</span><span class="n">weekday</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span>
<span class="p">}</span>
</code></pre></div></div>

<h1 id="다른-사람-풀이">다른 사람 풀이</h1>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">solution</span><span class="p">(</span><span class="n">_</span> <span class="nv">a</span><span class="p">:</span><span class="kt">Int</span><span class="p">,</span> <span class="n">_</span> <span class="nv">b</span><span class="p">:</span><span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">String</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">w</span> <span class="o">=</span> <span class="p">[</span><span class="s">"THU"</span><span class="p">,</span> <span class="s">"FRI"</span><span class="p">,</span> <span class="s">"SAT"</span><span class="p">,</span> <span class="s">"SUN"</span><span class="p">,</span> <span class="s">"MON"</span><span class="p">,</span> <span class="s">"TUE"</span><span class="p">,</span> <span class="s">"WED"</span><span class="p">]</span>
    <span class="k">let</span> <span class="nv">monthDay</span> <span class="o">=</span> <span class="p">[</span> <span class="mi">31</span><span class="p">,</span> <span class="mi">29</span><span class="p">,</span> <span class="mi">31</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">31</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">31</span><span class="p">,</span> <span class="mi">31</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">31</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">31</span><span class="p">]</span>
    <span class="k">let</span> <span class="nv">totalDay</span> <span class="o">=</span> <span class="n">monthDay</span><span class="p">[</span><span class="mi">0</span><span class="o">..&lt;</span><span class="n">a</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="nf">reduce</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="o">+</span><span class="p">)</span> <span class="o">+</span> <span class="n">b</span>

    <span class="k">return</span> <span class="n">w</span><span class="p">[</span><span class="n">totalDay</span> <span class="o">%</span> <span class="mi">7</span><span class="p">]</span>
<span class="p">}</span>
</code></pre></div></div>

<h1 id="의견">의견</h1>
<ul>
  <li>이번에는 날짜 관련된 기능을 알아야 할 것 같아 바로 검색을 하고 풀었다.</li>
  <li>좋아요 많은 다른 사람 풀이를 봤지만 2016년 기준이라 DateFormatter, Calendar를 쓰는게 년도 입력으로 확장하기에 더 맞는 방법인 것 같다.</li>
</ul>]]></content><author><name>HyeongSub Lim</name></author><category term="Algorithm" /><category term="Algorithm" /><category term="coding test" /><category term="2016년" /><summary type="html"><![CDATA[[프로그래머스/Swift] 2016년]]></summary></entry><entry><title type="html">[TIL] 내배캠 iOS앱 개발 공부 22일차</title><link href="http://localhost:4000/TIL/til22/" rel="alternate" type="text/html" title="[TIL] 내배캠 iOS앱 개발 공부 22일차" /><published>2024-03-27T00:00:00+09:00</published><updated>2024-03-27T00:00:00+09:00</updated><id>http://localhost:4000/TIL/til22</id><content type="html" xml:base="http://localhost:4000/TIL/til22/"><![CDATA[<h3 id="데일리-스크럼">데일리 스크럼</h3>
<p><img src="/assets/images/categories/til/2024-03-27-til22.png" alt="" /></p>

<h3 id="알고리즘">알고리즘</h3>
<ul>
  <li>오늘은 특정 날짜의 요일을 맞추는 문제였는데 Swift에서 제공하는 함수로 처리할 수 있을 것 같았다. Swift에서의 Date처리 방법을 확인하고 풀었다.</li>
  <li>Date, Calendar 관련은 따로 정리해보고 포스팅 해봐야겠다.</li>
  <li>풀이 보기
    <ul>
      <li><a href="https://limlogging.github.io/algorithm/2016%EB%85%84/" target="_blank">2016년</a></li>
    </ul>
  </li>
</ul>

<h3 id="개인-과제-공부">개인 과제 공부</h3>
<ul>
  <li>NavigationBar에 Edit 버튼을 코드로 추가했었는데 스토리보드에서 Button을 추가하는 걸로 수정했다. Edit 버튼을 선택하면 Done으로 바뀌고 Done을 선택하면 Edit로 바뀌는데 Text 변경이 되지 않아 한참 걸렸다. 버튼을 선택할때 마다 bar button item 설정을 변경하는 것으로 해결했다.</li>
  <li>Swipe 삭제도 수정버튼을 추가하려면 다른 메서드를 사용해야해서 다시한다고 시간이 걸렸다. 어떤 메서드를 써야하나 찾는게 시간이 걸린다.</li>
  <li><a href="https://limlogging.github.io/uikit/%EC%85%80%EC%98%A4%EB%A5%B8%EC%AA%BD%EC%8A%A4%EC%99%80%EC%9D%B4%ED%94%84%EC%95%A1%EC%85%98/" target="_blank">Cell의 오른쪽 Swipe 액션으로 수정/삭제 버튼 구현</a></li>
</ul>

<h3 id="내일-목표">내일 목표</h3>
<ul>
  <li>꾸미기 도전에는 실패했는데 우선 기능 추가와 완성에 조금 더 집중하는걸로</li>
  <li>알고리즘 문제 풀기 (문제 풀고 고차함수 연습 꼭 10분이라도..)</li>
  <li>과제 풀기</li>
</ul>]]></content><author><name>HyeongSub Lim</name></author><category term="TIL" /><category term="TIL" /><summary type="html"><![CDATA[내배캠 iOS앱 개발 공부 22일차 이야기]]></summary></entry><entry><title type="html">[UIKit] TableView 목록 순서 바꾸기</title><link href="http://localhost:4000/uikit/%EB%AA%A9%EB%A1%9D%EC%88%9C%EC%84%9C%EB%B0%94%EA%BE%B8%EA%B8%B0/" rel="alternate" type="text/html" title="[UIKit] TableView 목록 순서 바꾸기" /><published>2024-03-26T00:00:00+09:00</published><updated>2024-03-26T00:00:00+09:00</updated><id>http://localhost:4000/uikit/%EB%AA%A9%EB%A1%9D%EC%88%9C%EC%84%9C%EB%B0%94%EA%BE%B8%EA%B8%B0</id><content type="html" xml:base="http://localhost:4000/uikit/%EB%AA%A9%EB%A1%9D%EC%88%9C%EC%84%9C%EB%B0%94%EA%BE%B8%EA%B8%B0/"><![CDATA[<h1 id="table-view에-목록-순서-바꾸기">Table View에 목록 순서 바꾸기</h1>
<ul>
  <li>navigation bar에서 Edit 버튼을 선택하고 오른쪽에 줄을 선택하고 드래그하면 순서를 변경할 수 있습니다.</li>
</ul>

<p><br /></p>

<h1 id="tableview-dalegate-채택-후-moverowat-메서드-구현">TableView Dalegate 채택 후 moveRowAt 메서드 구현</h1>
<ul>
  <li>moveRowAt 메서드에서 source / destination Index를 확인 할 수 있습니다.</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// MARK: - 목록 순서 변경</span>
<span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">moveRowAt</span> <span class="nv">sourceIndexPath</span><span class="p">:</span> <span class="kt">IndexPath</span><span class="p">,</span> <span class="n">to</span> <span class="nv">destinationIndexPath</span><span class="p">:</span> <span class="kt">IndexPath</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">//현재 row(출발지)의 cell 데이터 저장</span>
    <span class="k">let</span> <span class="nv">sourceId</span> <span class="o">=</span> <span class="n">myToDoListArray</span><span class="p">[</span><span class="n">sourceIndexPath</span><span class="o">.</span><span class="n">row</span><span class="p">]</span><span class="o">.</span><span class="n">toDoid</span>
    <span class="k">let</span> <span class="nv">sourceTitle</span> <span class="o">=</span> <span class="n">myToDoListArray</span><span class="p">[</span><span class="n">sourceIndexPath</span><span class="o">.</span><span class="n">row</span><span class="p">]</span><span class="o">.</span><span class="n">toDoTitle</span>
    <span class="k">let</span> <span class="nv">sourceIsComplete</span> <span class="o">=</span> <span class="n">myToDoListArray</span><span class="p">[</span><span class="n">sourceIndexPath</span><span class="o">.</span><span class="n">row</span><span class="p">]</span><span class="o">.</span><span class="n">toDoIsComplete</span>
    
    <span class="c1">//선택한 row 배열에서 삭제</span>
    <span class="n">myToDoListArray</span><span class="o">.</span><span class="nf">remove</span><span class="p">(</span><span class="nv">at</span><span class="p">:</span> <span class="n">sourceIndexPath</span><span class="o">.</span><span class="n">row</span><span class="p">)</span>
    
    <span class="c1">//이동한 위치에 출발지 cell 데이터를 배열의 목적지 index 위치에 추가</span>
    <span class="n">myToDoListArray</span><span class="o">.</span><span class="nf">insert</span><span class="p">(</span><span class="kt">ToDoList</span><span class="p">(</span><span class="nv">toDoid</span><span class="p">:</span> <span class="n">sourceId</span><span class="p">,</span> <span class="nv">toDoTitle</span><span class="p">:</span> <span class="n">sourceTitle</span><span class="p">,</span> <span class="nv">toDoIsComplete</span><span class="p">:</span> <span class="n">sourceIsComplete</span><span class="p">),</span> <span class="nv">at</span><span class="p">:</span> <span class="n">destinationIndexPath</span><span class="o">.</span><span class="n">row</span><span class="p">)</span>
    
    <span class="c1">//print("목록 변경 후: \(myToDoListArray)")</span>
    <span class="n">myTodoListTableView</span><span class="o">.</span><span class="nf">reloadData</span><span class="p">()</span>    <span class="c1">//변경사항 확인을 위해 새로고침</span>
<span class="p">}</span>
</code></pre></div></div>

<p><br /></p>

<h1 id="실행-화면">실행 화면</h1>
<video width="640" height="360" controls="">
    <source src="../../assets/video/2024-03-26-목록순서바꾸기.mov" type="video/mp4" />
</video>

<p><br /></p>

<h1 id="마무리">마무리</h1>
<ul>
  <li>TableView Dalegate 채택 후 moveRowAt 메서드를 통해 순서이동을 구현할 수 있다.</li>
</ul>]]></content><author><name>HyeongSub Lim</name></author><category term="UIKit" /><category term="swift" /><category term="iOS" /><category term="TableView" /><category term="moveRowAt" /><summary type="html"><![CDATA[TableView 목록 순서 바꾸기]]></summary></entry><entry><title type="html">[UIKit] Tableview에서 Swipe로 Row 삭제하기</title><link href="http://localhost:4000/UIKit/TableViewSwipeDelete/" rel="alternate" type="text/html" title="[UIKit] Tableview에서 Swipe로 Row 삭제하기" /><published>2024-03-26T00:00:00+09:00</published><updated>2024-03-26T00:00:00+09:00</updated><id>http://localhost:4000/UIKit/TableViewSwipeDelete</id><content type="html" xml:base="http://localhost:4000/UIKit/TableViewSwipeDelete/"><![CDATA[<h1 id="tableview에서-swipe로-row-삭제하기">Tableview에서 Swipe로 Row 삭제하기</h1>
<ul>
  <li>TableView에서 Row을 움직여 삭제할 수 있습니다.</li>
</ul>

<p><br /></p>

<h1 id="예제-코드">예제 코드</h1>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="c1">// MARK: - TableView 스와이프(swipe) 삭제</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">commit</span> <span class="nv">editingStyle</span><span class="p">:</span> <span class="kt">UITableViewCell</span><span class="o">.</span><span class="kt">EditingStyle</span><span class="p">,</span> <span class="n">forRowAt</span> <span class="nv">indexPath</span><span class="p">:</span> <span class="kt">IndexPath</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// 편집 스타일이 삭제인 경우 </span>
        <span class="k">if</span> <span class="n">editingStyle</span> <span class="o">==</span> <span class="o">.</span><span class="n">delete</span> <span class="p">{</span>
            <span class="c1">//해당 indexPath에 위치한 데이터를 배열에서 제거</span>
            <span class="n">myToDoListArray</span><span class="o">.</span><span class="nf">remove</span><span class="p">(</span><span class="nv">at</span><span class="p">:</span> <span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="p">)</span>
            <span class="c1">// 테이블 뷰에서 해당 행을 애니메이션과 함께 삭제</span>
            <span class="n">tableView</span><span class="o">.</span><span class="nf">deleteRows</span><span class="p">(</span><span class="nv">at</span><span class="p">:</span> <span class="p">[</span><span class="n">indexPath</span><span class="p">],</span> <span class="nv">with</span><span class="p">:</span> <span class="o">.</span><span class="n">fade</span><span class="p">)</span>
        <span class="p">}</span> 
    <span class="p">}</span>
</code></pre></div></div>

<p><br /></p>

<h1 id="실행화면">실행화면</h1>
<video width="640" height="360" controls="">
    <source src="../../assets/video/2024-03-26-TableViewSwipeDelete.mov" type="video/mp4" />
</video>

<p><br /></p>

<h1 id="버튼-이름-변경">버튼 이름 변경</h1>
<ul>
  <li>버튼 이름 변경 (Delete -&gt; 삭제)</li>
  <li>UITableViewDelegate 채택해야 사용 가능</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="c1">// MARK: - 삭제 글자 변경 Delete -&gt; 삭제</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">titleForDeleteConfirmationButtonForRowAt</span> <span class="nv">indexPath</span><span class="p">:</span> <span class="kt">IndexPath</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">String</span><span class="p">?</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s">"삭제"</span>
    <span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>버튼 이름 변경 확인</li>
</ul>

<p><img src="../../assets/images/categories/uikit/2024-03-26-TableViewSwipeDelete1.png" alt="alt text" /></p>

<p><br /></p>

<h1 id="삭제-전-alert-버튼으로-다시-확인하기">삭제 전 alert 버튼으로 다시 확인하기</h1>
<ul>
  <li>alert 추가 코드</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="c1">// MARK: - TableView 스와이프(swipe) 삭제</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">commit</span> <span class="nv">editingStyle</span><span class="p">:</span> <span class="kt">UITableViewCell</span><span class="o">.</span><span class="kt">EditingStyle</span><span class="p">,</span> <span class="n">forRowAt</span> <span class="nv">indexPath</span><span class="p">:</span> <span class="kt">IndexPath</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="n">editingStyle</span> <span class="o">==</span> <span class="o">.</span><span class="n">delete</span> <span class="p">{</span>
            <span class="k">let</span> <span class="nv">alertController</span> <span class="o">=</span> <span class="kt">UIAlertController</span><span class="p">(</span><span class="nv">title</span><span class="p">:</span> <span class="s">"삭제 확인"</span><span class="p">,</span> <span class="nv">message</span><span class="p">:</span> <span class="s">"삭제하시겠습니까?"</span><span class="p">,</span> <span class="nv">preferredStyle</span><span class="p">:</span> <span class="o">.</span><span class="n">alert</span><span class="p">)</span>
            <span class="k">let</span> <span class="nv">cancelButton</span> <span class="o">=</span> <span class="kt">UIAlertAction</span><span class="p">(</span><span class="nv">title</span><span class="p">:</span> <span class="s">"취소"</span><span class="p">,</span> <span class="nv">style</span><span class="p">:</span> <span class="o">.</span><span class="n">cancel</span><span class="p">)</span>
            <span class="k">let</span> <span class="nv">deleteButton</span> <span class="o">=</span> <span class="kt">UIAlertAction</span><span class="p">(</span><span class="nv">title</span><span class="p">:</span> <span class="s">"삭제"</span><span class="p">,</span> <span class="nv">style</span><span class="p">:</span> <span class="o">.</span><span class="k">default</span><span class="p">)</span> <span class="p">{</span> <span class="n">_</span> <span class="k">in</span>
                <span class="c1">//해당 indexPath에 위치한 데이터를 배열에서 제거</span>
                <span class="k">self</span><span class="o">.</span><span class="n">myToDoListArray</span><span class="o">.</span><span class="nf">remove</span><span class="p">(</span><span class="nv">at</span><span class="p">:</span> <span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="p">)</span>
                <span class="c1">// 테이블 뷰에서 해당 행을 애니메이션과 함께 삭제</span>
                <span class="n">tableView</span><span class="o">.</span><span class="nf">deleteRows</span><span class="p">(</span><span class="nv">at</span><span class="p">:</span> <span class="p">[</span><span class="n">indexPath</span><span class="p">],</span> <span class="nv">with</span><span class="p">:</span> <span class="o">.</span><span class="n">fade</span><span class="p">)</span>
            <span class="p">}</span>
            <span class="n">alertController</span><span class="o">.</span><span class="nf">addAction</span><span class="p">(</span><span class="n">cancelButton</span><span class="p">)</span>
            <span class="n">alertController</span><span class="o">.</span><span class="nf">addAction</span><span class="p">(</span><span class="n">deleteButton</span><span class="p">)</span>
            <span class="nf">present</span><span class="p">(</span><span class="n">alertController</span><span class="p">,</span> <span class="nv">animated</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="nv">completion</span><span class="p">:</span> <span class="kc">nil</span><span class="p">)</span>
        <span class="p">}</span> 
    <span class="p">}</span>
</code></pre></div></div>
<ul>
  <li>alert 창 확인</li>
</ul>

<p><img src="../../assets/images/categories/uikit/2024-03-26-TableViewSwipeDelete2.png" alt="alt text" /></p>

<p><br /></p>

<h1 id="마무리">마무리</h1>
<ul>
  <li>TableView의 편집 버튼을 눌러 삭제를 시도할 수 있지만 Swipe로 삭제 가능</li>
  <li>삭제를 되물어보는 기능이 없어 따로 만들어야함</li>
  <li>해당 메서드가 XCode에서 자동검색이 되지 않는 것 같다.
    <ul>
      <li>⭐️⭐️⭐️더 찾아보니 내 클래스 파일은 UIViewController를 상속받는 클래스인데 <font color="red">UITableViewController</font>를 상속받는 클래스 파일을 만들면 주석처리된 메서드가 그냥 보인다!!!!!⭐️⭐️⭐️
        <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="cm">/*
  // Override to support editing the table view.
  override func tableView(_ tableView: UITableView, commit editingStyle: UITableViewCell.EditingStyle, forRowAt indexPath: IndexPath) {
  if editingStyle == .delete {
      // Delete the row from the data source
      tableView.deleteRows(at: [indexPath], with: .fade)
  } else if editingStyle == .insert {
      // Create a new instance of the appropriate class, insert it into the array, and add a new row to the table view
  }    
  }
  */</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ul>]]></content><author><name>HyeongSub Lim</name></author><category term="UIKit" /><category term="swift" /><category term="iOS" /><category term="TableView Swipe Delete" /><summary type="html"><![CDATA[Tableview에서 Swipe로 Row 삭제하기]]></summary></entry><entry><title type="html">[UIKit] NavigationBar에 Edit 버튼 추가하기</title><link href="http://localhost:4000/UIKit/NavigationBarEditButton/" rel="alternate" type="text/html" title="[UIKit] NavigationBar에 Edit 버튼 추가하기" /><published>2024-03-26T00:00:00+09:00</published><updated>2024-03-26T00:00:00+09:00</updated><id>http://localhost:4000/UIKit/NavigationBarEditButton</id><content type="html" xml:base="http://localhost:4000/UIKit/NavigationBarEditButton/"><![CDATA[<h1 id="navigation-bar에-edit-버튼-추가하기">Navigation Bar에 Edit 버튼 추가하기</h1>
<ul>
  <li>navigation과 연결된 상태에서 viewDidLoad에 코드를 추가합니다.</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>
        
        <span class="n">myTodoListTableView</span><span class="o">.</span><span class="n">dataSource</span> <span class="o">=</span> <span class="k">self</span>
        <span class="n">myTodoListTableView</span><span class="o">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="k">self</span>
        
        <span class="c1">//상단 Navigation bar 왼쪽에 Edit 버튼 추가</span>
        <span class="k">self</span><span class="o">.</span><span class="n">navigationItem</span><span class="o">.</span><span class="n">leftBarButtonItem</span> <span class="o">=</span> <span class="k">self</span><span class="o">.</span><span class="n">editButtonItem</span> 
    <span class="p">}</span>
</code></pre></div></div>

<p><br /></p>

<h1 id="실행-화면">실행 화면</h1>
<ul>
  <li>네비게이션 바 왼쪽에 edit 버튼이 생기고 edit 버튼을 누르면 done으로 바뀝니다.</li>
  <li>edit 버튼을 선택 시 아무런 변화가 없습니다.</li>
</ul>

<video width="640" height="360" controls="">
    <source src="../../assets/video/2024-03-26-NavigationBarEditButton1.mov" type="video/mp4" />
</video>

<p><br /></p>

<h1 id="delegate-상속-후-setediting-메서드를-추가">Delegate 상속 후 setEditing 메서드를 추가</h1>
<ul>
  <li>UITableViewDelegate를 채택하고 setEditing 메서드를 추가합니다.</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">override</span> <span class="kd">func</span> <span class="nf">setEditing</span><span class="p">(</span><span class="n">_</span> <span class="nv">editing</span><span class="p">:</span> <span class="kt">Bool</span><span class="p">,</span> <span class="nv">animated</span><span class="p">:</span> <span class="kt">Bool</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">//부모클래스 편집 모드 설정에 관련된 작업을 수행, 없으면 Done 버튼 사라짐 </span>
        <span class="k">super</span><span class="o">.</span><span class="nf">setEditing</span><span class="p">(</span><span class="n">editing</span><span class="p">,</span> <span class="nv">animated</span><span class="p">:</span> <span class="n">animated</span><span class="p">)</span> 
        
        <span class="c1">//사용자가 편집 모드로 전환할 때 테이블 뷰의 셀을 편집할 수 있도록 허용하거나 허용하지 않도록 설정</span>
        <span class="c1">//myTodoListTableView를 편집모드로 변경할 수 있도록 설정 </span>
        <span class="n">myTodoListTableView</span><span class="o">.</span><span class="nf">setEditing</span><span class="p">(</span><span class="n">editing</span><span class="p">,</span> <span class="nv">animated</span><span class="p">:</span> <span class="kc">true</span><span class="p">)</span> 
    <span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>관련 이벤트가 없으면 ⛔️ 버튼을 클릭하면 아무런 변화가 없습니다.</li>
  <li><a href="https://limlogging.github.io/UIKit/TableViewSwipeDelete/" target="_blank">삭제기능 바로가기</a></li>
</ul>

<p><br /></p>

<h1 id="실행-화면-1">실행 화면</h1>
<video width="640" height="360" controls="">
    <source src="../../assets/video/2024-03-26-NavigationBarEditButton2.mov" type="video/mp4" />
</video>

<p><br /></p>

<h1 id="코드가-아닌-스토리보드에-bar-button-item-추가하여-구현하기">코드가 아닌 스토리보드에 bar Button Item 추가하여 구현하기</h1>
<h2 id="1-bar-button-item-추가">1. bar Button Item 추가</h2>
<ul>
  <li>라이브러리에서 bar button item을 추가하고 System Item을 Edit으로 변경합니다.</li>
</ul>

<p><img src="../../assets/images/categories/uikit/2024-03-26-NavigationBarEditButton1.png" alt="" /></p>

<h2 id="2-액션버튼-생성">2. 액션버튼 생성</h2>
<ul>
  <li>편집모드가 아닐땐 Edit 버튼이 보여야하고 편집모드일때는 Done 버튼이 보여야합니다.</li>
  <li>새로운 버튼 설정을 하지 않으면 button title이 edit로만 보입니다.</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// MARK: - edit 창 선택</span>
<span class="kd">@IBAction</span> <span class="kd">func</span> <span class="nf">editButtonTapped</span><span class="p">(</span><span class="n">_</span> <span class="nv">sender</span><span class="p">:</span> <span class="kt">UIBarButtonItem</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">//편집 모드와 버튼의 Text는 서로 반대 </span>
    <span class="k">if</span> <span class="n">myTodoListTableView</span><span class="o">.</span><span class="n">isEditing</span> <span class="p">{</span>
        <span class="c1">// 편집 모드 해제</span>
        <span class="n">myTodoListTableView</span><span class="o">.</span><span class="nf">setEditing</span><span class="p">(</span><span class="kc">false</span><span class="p">,</span> <span class="nv">animated</span><span class="p">:</span> <span class="kc">true</span><span class="p">)</span>
        <span class="c1">// 새로운 UIBarButtonItem 생성하여 Edit 버튼으로 설정</span>
        <span class="k">let</span> <span class="nv">editButton</span> <span class="o">=</span> <span class="kt">UIBarButtonItem</span><span class="p">(</span><span class="nv">barButtonSystemItem</span><span class="p">:</span> <span class="o">.</span><span class="n">edit</span><span class="p">,</span> <span class="nv">target</span><span class="p">:</span> <span class="k">self</span><span class="p">,</span> <span class="nv">action</span><span class="p">:</span> <span class="k">#selector</span><span class="p">(</span><span class="nf">editButtonTapped</span><span class="p">(</span><span class="nv">_</span><span class="p">:)))</span>
        <span class="n">navigationItem</span><span class="o">.</span><span class="n">leftBarButtonItem</span> <span class="o">=</span> <span class="n">editButton</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="c1">// 편집 모드 활성화</span>
        <span class="n">myTodoListTableView</span><span class="o">.</span><span class="nf">setEditing</span><span class="p">(</span><span class="kc">true</span><span class="p">,</span> <span class="nv">animated</span><span class="p">:</span> <span class="kc">true</span><span class="p">)</span>
        
        <span class="c1">// 새로운 UIBarButtonItem 생성하여 Done 버튼으로 설정</span>
        <span class="k">let</span> <span class="nv">doneButton</span> <span class="o">=</span> <span class="kt">UIBarButtonItem</span><span class="p">(</span><span class="nv">barButtonSystemItem</span><span class="p">:</span> <span class="o">.</span><span class="n">done</span><span class="p">,</span> <span class="nv">target</span><span class="p">:</span> <span class="k">self</span><span class="p">,</span> <span class="nv">action</span><span class="p">:</span> <span class="k">#selector</span><span class="p">(</span><span class="nf">editButtonTapped</span><span class="p">(</span><span class="nv">_</span><span class="p">:)))</span>
        <span class="n">navigationItem</span><span class="o">.</span><span class="n">leftBarButtonItem</span> <span class="o">=</span> <span class="n">doneButton</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><br /></p>

<h1 id="마무리">마무리</h1>
<ul>
  <li>Navigation Bar에 버튼을 추가하고 TableView Delegate를 채택하여 TableView 편집모드 구현가능</li>
</ul>]]></content><author><name>HyeongSub Lim</name></author><category term="UIKit" /><category term="swift" /><category term="iOS" /><category term="Navigation" /><category term="Bar" /><category term="Edit" /><category term="Button" /><summary type="html"><![CDATA[NavigationBar에 Edit 버튼 추가하고 TableView row삭제하기]]></summary></entry><entry><title type="html">[TIL] 내배캠 iOS앱 개발 공부 21일차</title><link href="http://localhost:4000/TIL/til21/" rel="alternate" type="text/html" title="[TIL] 내배캠 iOS앱 개발 공부 21일차" /><published>2024-03-26T00:00:00+09:00</published><updated>2024-03-26T00:00:00+09:00</updated><id>http://localhost:4000/TIL/til21</id><content type="html" xml:base="http://localhost:4000/TIL/til21/"><![CDATA[<h3 id="데일리-스크럼">데일리 스크럼</h3>
<p><img src="/assets/images/categories/til/2024-03-26-til21.png" alt="" /></p>

<h3 id="알고리즘">알고리즘</h3>
<ul>
  <li>고차함수를 많이 연습해보고 알고리즘 문제 풀어야하는데 따로 공부없이 아침에 문제를 풀다보니 많이 부족한 것 같다. 꼭 시간내서 클로저, 고차함수 다시.. 공부해봐야겠다</li>
  <li>풀이 보기
    <ul>
      <li><a href="https://limlogging.github.io/algorithm/%EB%AA%85%EC%98%88%EC%9D%98%EC%A0%84%EB%8B%B9/" target="_blank">명예의전당</a></li>
    </ul>
  </li>
</ul>

<h3 id="개인-과제-공부">개인 과제 공부</h3>
<ul>
  <li>오늘은 속도를 내서 level3 삭제까지 완료하고 순서바꾸기를 추가했다.</li>
  <li>검색 하는 도중에 자동완성이 안되는 메서드가 있었는데 TableViewController를 상속받아 파일을 생성하면 기본적으로 주석처리된 메서드가 있다는걸 알았다.</li>
  <li>Delegate에서 제공하는 함수를 많이 알면 다양하게 적용을 시도해 볼 수 있을 것 같다!
    <ul>
      <li><a href="https://limlogging.github.io/UIKit/UITableViewCellDelegate/" target="_blank">Tableview Cell에서 Delegate 사용</a></li>
      <li><a href="https://limlogging.github.io/UIKit/TableViewSwipeDelete/" target="_blank">Tableview에서 Swipe로 Row 삭제하기</a></li>
      <li><a href="https://limlogging.github.io/UIKit/NavigationBarEditButton/" target="_blank">NavigationBar에 Edit 버튼 추가하기</a></li>
      <li><a href="https://limlogging.github.io/uikit/%EB%AA%A9%EB%A1%9D%EC%88%9C%EC%84%9C%EB%B0%94%EA%BE%B8%EA%B8%B0/" target="_blank">TableView 목록 순서 바꾸기</a></li>
    </ul>
  </li>
</ul>

<h3 id="내일-목표">내일 목표</h3>
<ul>
  <li>다른 분들이 UI를 스위치에서 체크박스로 바꾸고 폰트도 변경하고 조금 꾸며도 꾸민 티가 확 나는 것 같다. 내일은 꾸미기에도 조금 도전해보는걸로…</li>
  <li>알고리즘 문제 풀기 (문제 풀고 고차함수 연습 꼭 10분이라도..)</li>
  <li>과제 풀기</li>
</ul>]]></content><author><name>HyeongSub Lim</name></author><category term="TIL" /><category term="TIL" /><summary type="html"><![CDATA[내배캠 iOS앱 개발 공부 21일차 이야기]]></summary></entry></feed>